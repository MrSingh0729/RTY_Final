routes/api.py:


from flask import Blueprint, jsonify, request
from flask_login import login_required
from models import ProjectGoal

api_bp = Blueprint('api', __name__, url_prefix='/api')

@api_bp.route('/project-goal')
@login_required
def get_project_goal():
    project_name = request.args.get('project')
    
    if not project_name:
        return jsonify({"error": "Project name is required"}), 400
    
    try:
        project_goal = ProjectGoal.query.filter_by(project_name=project_name).first()
        
        if project_goal:
            return jsonify({"goal": project_goal.goal})
        else:
            return jsonify({"goal": None})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    
    
    


routes/auth.py:

from flask import Blueprint, render_template, request, redirect, url_for, flash, session
from flask_login import login_user, logout_user, login_required
from utils.api import get_token

auth_bp = Blueprint('auth', __name__, url_prefix='/auth')

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        try:
            # Try to authenticate with the API
            token = get_token()
            if token:
                # If successful, log in the user
                from app import User
                user = User(username)
                login_user(user)
                return redirect(url_for('dashboard.home'))
        except Exception as e:
            error = "Invalid username or password"
    
    return render_template('auth/login.html', error=error)

@auth_bp.route('/logout')
@login_required
def logout():
    logout_user()
    session.clear()
    return redirect(url_for('dashboard.home'))


routes/dashboard.py:


from flask import Blueprint, render_template, request, send_file, jsonify, redirect, url_for
from flask_login import login_required, current_user
import pandas as pd
from models import ModelDescription, ProjectGoal, FPYAutoData
import io
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill
from datetime import datetime
from utils.api import *
from utils.helpers import get_top_n_counts, map_api_to_db, map_db_to_api
from config import Config
from models import ModelDescription, ProjectGoal, FPYData
from extensions import db

dashboard_bp = Blueprint('dashboard', __name__, url_prefix='/dashboard')

def get_ntf_details_for_station(model_name, station, station_type, start_date, end_date):
    """Get NTF details for a specific station"""
    try:
        token = get_token()
        detail_data = get_station_ntf_details_by_model(token, model_name, station, station_type, start_date, end_date)
        if not detail_data:
            return {
                "top_computers": {},
                "top_faults_by_computer": {}
            }
            
        detail_df = pd.DataFrame(detail_data).rename(columns={
            "substation": "Computer Name",
            "sn": "SN",
            "symptomEnName": "Fault Description"
        })
        detail_df = detail_df[["SN", "Fault Description", "Computer Name"]]
        
        if not detail_df.empty:
            top_computers = detail_df["Computer Name"].value_counts().head(3).to_dict()
            top_faults_by_computer = {}
            
            for comp in top_computers:
                comp_faults = detail_df[detail_df["Computer Name"] == comp]
                faults = comp_faults["Fault Description"].value_counts().head(3).reset_index().values.tolist()
                top_faults_by_computer[comp] = faults
                
            return {
                "top_computers": top_computers,
                "top_faults_by_computer": top_faults_by_computer
            }
        else:
            return {
                "top_computers": {},
                "top_faults_by_computer": {}
            }
    except Exception as e:
        print(f"Error getting NTF details for {station}: {e}")
        return {
            "top_computers": {},
            "top_faults_by_computer": {}
        }

def get_der_details_for_station(model_name, station, station_type, start_date, end_date):
    """Get DER details for a specific station"""
    try:
        token = get_token()
        detail_df = pd.DataFrame(get_station_der_details_by_model(token, model_name, station, station_type, start_date, end_date)).rename(columns={
            "sn": "SN",
            "responsibilityEnName": "Responsibility",
            "symptomEnName": "Symptoms"
        })
        detail_df = detail_df[["SN", "Responsibility", "Symptoms"]]
        
        # Get top symptoms and responsibilities
        if not detail_df.empty:
            top_symptoms = get_top_n_counts(detail_df, "Symptoms", 3)
            top_responsibilities = get_top_n_counts(detail_df, "Responsibility", 3)
            
            return {
                "top_symptoms": top_symptoms.to_dict(orient="records"),
                "top_responsibilities": top_responsibilities.to_dict(orient="records")
            }
        else:
            return {
                "top_symptoms": [],
                "top_responsibilities": []
            }
    except Exception as e:
        print(f"Error getting DER details for {station}: {e}")
        return {
            "top_symptoms": [],
            "top_responsibilities": []
        }

@dashboard_bp.route('/')
def index():
    current_time = datetime.now().strftime('%H:%M')
    try:
        token = get_token()
        projects = get_project_list(token)
        
        # Get today's data from 08:00AM to now
        now = datetime.now()
        start = now.replace(hour=8, minute=0, second=0, microsecond=0)
        
        # Get FPY data for all projects
        fpy_data_raw = get_fpy(token, projects, start, now)
        
        # Get all models from database to filter out 2G models
        db_models = {model.model_name: model.technology for model in ModelDescription.query.all()}
        
        # Initialize counters
        total_pcurr_input = 0
        total_rqc2_good = 0
        valid_rty_count = 0
        rty_sum = 0
        
        # Process each record
        for record in fpy_data_raw:
            project = record.get('project', '')
            station = record.get('station', '')
            technology = db_models.get(project, '')
            
            # Skip 2G models
            if technology == '2G':
                continue
                
            # Extract values
            input_qty = int(record.get('inPut', 0))
            pass_qty = int(record.get('pass', 0))
            rty_val = float(str(record.get('rty', '0')).replace('%', '')) if record.get('rty') else 0
            
            # Accumulate PCURR input
            if station == 'PCURR':
                total_pcurr_input += input_qty
                
            # Accumulate RQC2 good qty
            if station == 'RQC2':
                total_rqc2_good += pass_qty
                
            # Accumulate RTY for average calculation
            if rty_val > 0:
                valid_rty_count += 1
                rty_sum += rty_val
        
        # Calculate average RTY
        avg_rty = (rty_sum / valid_rty_count) if valid_rty_count > 0 else 0
        
        # Get active projects count (excluding 2G)
        active_projects = len([p for p in projects if db_models.get(p, '') != '2G'])
        
        # Prepare stats for template
        stats = {
            'total_pcurr_input': total_pcurr_input,
            'total_rqc2_good': total_rqc2_good,
            'overall_rty': f"{avg_rty:.2f}%",
            'active_projects': active_projects
        }
        
        return render_template('index.html', stats=stats, current_time=current_time)
    except Exception as e:
        current_time = datetime.now().strftime('%H:%M')
        return render_template('errors/500.html', error=str(e), current_time=current_time)
    

@dashboard_bp.route('/home')
def home():
    current_time = datetime.now().strftime('%H:%M')
    # Check if user is logged in
    logged_in = current_user.is_authenticated
    return render_template('home.html', current_time=current_time, logged_in=logged_in)


@dashboard_bp.route('/custom-dashboard')
@login_required
def custom_dashboard():
    current_time = datetime.now().strftime('%H:%M')
    try:
        token = get_token()
        projects = get_project_list(token)
        
        # Get today's data from 08:00AM to now
        now = datetime.now()
        start = now.replace(hour=8, minute=0, second=0, microsecond=0)
        
        # Get FPY data for all projects
        fpy_data_raw = get_fpy(token, projects, start, now)
        
        # Get all models from database to filter out 2G models
        db_models = {model.model_name: model.technology for model in ModelDescription.query.all()}
        
        # Initialize counters
        total_pcurr_input = 0
        total_rqc2_good = 0
        valid_rty_count = 0
        rty_sum = 0
        
        # Process each record
        for record in fpy_data_raw:
            project = record.get('project', '')
            station = record.get('station', '')
            technology = db_models.get(project, '')
            
            # Skip 2G models
            if technology == '2G':
                continue
                
            # Extract values
            input_qty = int(record.get('inPut', 0))
            pass_qty = int(record.get('pass', 0))
            rty_val = float(str(record.get('rty', '0')).replace('%', '')) if record.get('rty') else 0
            
            # Accumulate PCURR input
            if station == 'PCURR':
                total_pcurr_input += input_qty
                
            # Accumulate RQC2 good qty
            if station == 'RQC2':
                total_rqc2_good += pass_qty
                
            # Accumulate RTY for average calculation
            if rty_val > 0:
                valid_rty_count += 1
                rty_sum += rty_val
        
        # Calculate average RTY
        avg_rty = (rty_sum / valid_rty_count) if valid_rty_count > 0 else 0
        
        # Get active projects count (excluding 2G)
        active_projects = len([p for p in projects if db_models.get(p, '') != '2G'])
        
        # Prepare stats for template
        stats = {
            'total_pcurr_input': total_pcurr_input,
            'total_rqc2_good': total_rqc2_good,
            'overall_rty': f"{avg_rty:.2f}%",
            'active_projects': active_projects
        }
        
        return render_template("dashboard/custom_dashboard.html", stats=stats, current_time=current_time)
    except Exception as e:
        current_time = datetime.now().strftime('%H:%M')
        return render_template('errors/500.html', error=str(e), current_time=current_time)

@dashboard_bp.route('/auto-data')
@login_required
def auto_data():
    current_time = datetime.now().strftime('%H:%M')
    try:
        # Try to get data from the auto data table first
        auto_data_records = FPYAutoData.query.all()
        
        if auto_data_records:
            # Convert database objects to dictionaries
            desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty", "py"]
            data = []
            
            for record in auto_data_records:
                row = {
                    "project": record.project,
                    "station": record.station,
                    "inPut": record.inPut,
                    "pass": record.pass_qty,  # Map 'pass_qty' from DB to 'pass' in API
                    "fail": record.fail,
                    "notFail": record.notFail,
                    "der": record.der,
                    "ntf": record.ntf,
                    "rty": record.rty,
                    "py": record.py
                }
                data.append(row)
            
            # Get the last update time
            last_updated = FPYAutoData.query.order_by(FPYAutoData.last_updated.desc()).first().last_updated
            last_updated_str = last_updated.strftime('%Y-%m-%d %H:%M:%S')
        else:
            # If no data in auto data table, fetch fresh data
            print("No auto data found, fetching fresh data...")
            token = get_token()
            projects = get_project_list(token)
            fpy_data_raw = get_fpy(token, projects)
            
            # Process data and add PY column
            desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty", "py"]
            data = []
            
            for row in fpy_data_raw:
                # Add PY column (empty for now)
                row["py"] = ""
                data.append({col: row.get(col, "") for col in desired_columns})
            
            last_updated_str = "Just now"
        
        return render_template('dashboard/auto_data.html', 
                               data=data, 
                               current_time=current_time,
                               last_updated=last_updated_str)
    except Exception as e:
        current_time = datetime.now().strftime('%H:%M')
        return render_template('errors/500.html', error=str(e), current_time=current_time)
    


@dashboard_bp.route('/project-specific', methods=['GET', 'POST'])
@login_required
def project_specific():
    current_time = datetime.now().strftime('%H:%M')
    try:
        token = get_token()
        # Get live running projects from API (as before)
        projects = get_project_list(token)
        selected_project = None
        auto_goal = None
        rty_goal = 90.0  # Default value
        fpy_data = []
        failed_stations = []
        fail_details = []

        if request.method == 'POST':
            selected_project = request.form.get('project')
            # Get goal from database for the selected project
            project_goal = ProjectGoal.query.filter_by(project_name=selected_project).first()
            
            if project_goal and project_goal.goal != 'NA':
                auto_goal = float(project_goal.goal.replace('%', ''))
                rty_goal = auto_goal  # Use the auto-retrieved goal
            else:
                # If no goal in database, use the form value
                rty_goal = float(request.form.get('rty_goal', 90.0))

            print(f"Using RTY goal: {rty_goal}% (Auto: {auto_goal if auto_goal else 'None'})")
            
            fpy_data_raw = get_fpy(token, [selected_project])

            desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty", "py"]
            fpy_data = [
                {col: row.get(col, "") for col in desired_columns}
                for row in fpy_data_raw
            ]

            if fpy_data and "rty" in fpy_data[0]:
                try:
                    actual_rty = float(str(fpy_data[0]["rty"]).replace("%", ""))
                    if actual_rty < rty_goal:
                        for row in fpy_data:
                            station = row.get("station")
                            ntf = float(str(row.get("ntf", "0")).replace("%", "")) if row.get("ntf") else None
                            der = float(str(row.get("der", "0")).replace("%", "")) if row.get("der") else None

                            if station in Config.NTF_GOALS and ntf is not None and ntf > Config.NTF_GOALS[station]:
                                failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))
                                detail_data = get_station_ntf_details(token, selected_project, station)
                                detail_df = pd.DataFrame(detail_data)
                                detail_df = detail_df.rename(columns={
                                    "substation": "Computer Name",
                                    "sn": "SN",
                                    "symptomEnName": "Fault Description"
                                })
                                detail_df = detail_df[["SN", "Fault Description", "Computer Name"]]

                                top_computers = detail_df["Computer Name"].value_counts().head(3).to_dict()
                                top_faults_by_computer = {}
                                for comp in top_computers:
                                    comp_faults = detail_df[detail_df["Computer Name"] == comp]
                                    faults = comp_faults["Fault Description"].value_counts().head(3).reset_index().values.tolist()
                                    top_faults_by_computer[comp] = faults

                                fail_details.append({
                                    "station": station,
                                    "metric": "NTF",
                                    "actual": ntf,
                                    "goal": Config.NTF_GOALS[station],
                                    "top_computers": top_computers,
                                    "top_faults_by_computer": top_faults_by_computer
                                })

                            if station in Config.DER_GOALS and der is not None and der > Config.DER_GOALS[station]:
                                failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                                detail_data = get_station_der_details(token, selected_project, station)
                                detail_df = pd.DataFrame(detail_data)
                                detail_df = detail_df.rename(columns={
                                    "sn": "SN",
                                    "responsibilityEnName": "Responsibility",
                                    "symptomEnName": "Symptoms"
                                })
                                detail_df = detail_df[["SN", "Responsibility", "Symptoms"]]
                                top_symptoms = get_top_n_counts(detail_df, "Symptoms", 3)
                                top_responsibilities = get_top_n_counts(detail_df, "Responsibility", 3)

                                fail_details.append({
                                    "station": station,
                                    "metric": "DER",
                                    "actual": der,
                                    "goal": Config.DER_GOALS[station],
                                    "top_symptoms": top_symptoms.to_dict(orient="records"),
                                    "top_responsibilities": top_responsibilities.to_dict(orient="records")
                                })
                except Exception as e:
                    print("RTY analysis error:", e)

        return render_template("dashboard/project_specific.html",
                               projects=projects,
                               selected_project=selected_project,
                               rty_goal=rty_goal,
                               auto_goal=auto_goal,  # Pass auto goal to template
                               data=fpy_data,
                               failed_stations=failed_stations,
                               fail_details=fail_details,
                               current_time=current_time)
    except Exception as e:
        return render_template('errors/500.html', error=str(e), current_time=current_time)

@dashboard_bp.route('/model-specific', methods=['GET', 'POST'])
@login_required
def model_specific():
    current_time = datetime.now().strftime('%H:%M')
    try:
        # Get all models from database for the searchable dropdown
        models = ModelDescription.query.all()
        selected_model = None
        station_type = "BE"
        start_date = None
        end_date = None
        rty_goal = 90.0  # Default value
        auto_goal = None
        fpy_data = []
        failed_stations = []

        if request.method == 'POST':
            selected_model = request.form.get('model_name')
            station_type = request.form.get('station_type', 'BE')
            start_date = request.form.get('start_date')
            end_date = request.form.get('end_date')
            
            # Get goal from database for the selected model
            model_goal = ModelDescription.query.filter_by(model_name=selected_model).first()
            
            if model_goal and model_goal.goal != 'NA':
                auto_goal = float(model_goal.goal.replace('%', ''))
                rty_goal = auto_goal  # Use the auto-retrieved goal
            else:
                # If no goal in database, use the form value
                rty_goal = float(request.form.get('rty_goal', 90.0))

            print(f"Fetching data for model: {selected_model}, station type: {station_type}, start: {start_date}, end: {end_date}")
            print(f"Using RTY goal: {rty_goal}% (Auto: {auto_goal if auto_goal else 'None'})")
            
            # First, try to get data from the database
            fpy_data_query = FPYData.query.filter_by(project=selected_model)
            
            # If date range is specified, filter by date
            if start_date and end_date:
                start_datetime = datetime.strptime(start_date, '%Y-%m-%dT%H:%M')
                end_datetime = datetime.strptime(end_date, '%Y-%m-%dT%H:%M')
                fpy_data_query = fpy_data_query.filter(FPYData.timestamp.between(start_datetime, end_datetime))
            
            db_data = fpy_data_query.all()
            
            # If no data in database or if refresh is needed, fetch from API
            if not db_data or request.form.get('refresh_data') == 'true':
                token = get_token()
                fpy_data_raw = get_fpy_by_model(token, selected_model, station_type, start_date, end_date)
                print(f"Raw data received: {len(fpy_data_raw) if fpy_data_raw else 0} records")
                
                # Save API data to database
                for record in fpy_data_raw:
                    # Check if record already exists for this model, station, and timestamp
                    existing_record = FPYData.query.filter_by(
                        project=record.get('project'),
                        station=record.get('station')
                    ).first()
                    
                    if existing_record:
                        # Update existing record
                        mapped_data = map_api_to_db(record)
                        for key, value in mapped_data.items():
                            setattr(existing_record, key, value)
                    else:
                        # Create new record
                        mapped_data = map_api_to_db(record)
                        new_record = FPYData(**mapped_data)
                        db.session.add(new_record)
                
                db.session.commit()
                print("Data saved to database")
                
                # Now get the data from the database
                fpy_data_query = FPYData.query.filter_by(project=selected_model)
                if start_date and end_date:
                    start_datetime = datetime.strptime(start_date, '%Y-%m-%dT%H:%M')
                    end_datetime = datetime.strptime(end_date, '%Y-%m-%dT%H:%M')
                    fpy_data_query = fpy_data_query.filter(FPYData.timestamp.between(start_datetime, end_datetime))
                
                db_data = fpy_data_query.all()
            
            # Convert database objects to dictionaries for template
            desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty", "py"]
            fpy_data = []
            
            for record in db_data:
                row = map_db_to_api(record)
                fpy_data.append(row)
            
            print(f"Processed data: {len(fpy_data)} records")
            if fpy_data:
                print(f"First record: {fpy_data[0]}")

            if fpy_data and "rty" in fpy_data[0]:
                try:
                    actual_rty = float(str(fpy_data[0]["rty"]).replace("%", ""))
                    print(f"Actual RTY: {actual_rty}%, Goal: {rty_goal}%")
                    
                    if actual_rty < rty_goal:
                        for row in fpy_data:
                            station = row.get("station")
                            ntf = float(str(row.get("ntf", "0")).replace("%", "")) if row.get("ntf") else None
                            der = float(str(row.get("der", "0")).replace("%", "")) if row.get("der") else None

                            if station in Config.NTF_GOALS and ntf is not None and ntf > Config.NTF_GOALS[station]:
                                failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))

                            if station in Config.DER_GOALS and der is not None and der > Config.DER_GOALS[station]:
                                failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                except Exception as e:
                    print("RTY analysis error:", e)

        return render_template("dashboard/model_specific.html",
                               models=models,
                               selected_model=selected_model,
                               station_type=station_type,
                               start_date=start_date,
                               end_date=end_date,
                               rty_goal=rty_goal,
                               auto_goal=auto_goal,  # Pass auto goal to template
                               data=fpy_data,
                               failed_stations=failed_stations,
                               current_time=current_time,
                               get_ntf_details_for_station=get_ntf_details_for_station,
                               get_der_details_for_station=get_der_details_for_station)
    except Exception as e:
        print(f"Error in model_specific: {e}")
        import traceback
        traceback.print_exc()
        return render_template('errors/500.html', error=str(e), current_time=current_time)

@dashboard_bp.route('/export-excel')
@login_required
def export_excel():
    project = request.args.get('project')
    rty_goal = float(request.args.get('rty_goal', 90.0))
 
    token = get_token()
    fpy_data_raw = get_fpy(token, [project])
 
    if not fpy_data_raw:
        return "No data to export."
 
    # Clean FPY table
    desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty", "py"]
    fpy_data = [{col: row.get(col, "") for col in desired_columns} for row in fpy_data_raw]
    fpy_df = pd.DataFrame(fpy_data).astype(str)
 
    failed_stations = []
    ntf_rows = []
    der_rows = []
 
    try:
        actual_rty = float(str(fpy_df["rty"].iloc[0]).replace("%", ""))
        if actual_rty < rty_goal:
            for _, row in fpy_df.iterrows():
                station = row.get("station")
                ntf = float(str(row.get("ntf", "0")).replace("%", "")) if row.get("ntf") else None
                der = float(str(row.get("der", "0")).replace("%", "")) if row.get("der") else None
 
                if station in Config.NTF_GOALS and ntf is not None and ntf > Config.NTF_GOALS[station]:
                    failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))
                    detail_df = pd.DataFrame(get_station_ntf_details(token, project, station)).rename(columns={
                        "substation": "Computer Name",
                        "sn": "SN",
                        "symptomEnName": "Fault Description"
                    })[["SN", "Fault Description", "Computer Name"]]
 
                    for comp in detail_df["Computer Name"].value_counts().head(3).index:
                        ntf_rows.append([f"{comp} → {detail_df[detail_df['Computer Name'] == comp]['Computer Name'].count()}", ""])
 
                if station in Config.DER_GOALS and der is not None and der > Config.DER_GOALS[station]:
                    failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                    detail_df = pd.DataFrame(get_station_der_details(token, project, station)).rename(columns={
                        "sn": "SN",
                        "responsibilityEnName": "Responsibility",
                        "symptomEnName": "Symptoms"
                    })[["SN", "Responsibility", "Symptoms"]]
 
                    top_symptoms = detail_df["Symptoms"].value_counts().head(3)
                    top_responsibilities = detail_df["Responsibility"].value_counts().head(3)
 
                    for i in range(3):
                        symptom = top_symptoms.index[i] if i < len(top_symptoms) else ""
                        symptom_qty = top_symptoms.iloc[i] if i < len(top_symptoms) else ""
                        resp = top_responsibilities.index[i] if i < len(top_responsibilities) else ""
                        resp_qty = top_responsibilities.iloc[i] if i < len(top_responsibilities) else ""
                        der_rows.append([f"{symptom} → {symptom_qty}", f"{resp} → {resp_qty}"])
    except Exception as e:
        print("RTY analysis error:", e)
 
    # Create Excel workbook
    wb = Workbook()
    ws = wb.active
    ws.title = "FPY Report"
 
    bold = Font(bold=True)
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)
    header_fill = PatternFill(start_color="4361ee", end_color="4361ee", fill_type="solid")
    header_font = Font(bold=True, color="FFFFFF")
 
    def write_section(title, df_or_rows, headers=None):
        # Safely merge title row
        pre_row = ws.max_row if ws.max_row else 0
        ws.append([title])
        title_row = pre_row + 1
        ws.merge_cells(start_row=title_row, start_column=1, end_row=title_row, end_column=10)
        ws.cell(row=title_row, column=1).font = bold
 
        if isinstance(df_or_rows, pd.DataFrame):
            ws.append(list(df_or_rows.columns))
            for cell in ws[ws.max_row]:
                cell.font = header_font
                cell.alignment = center
                cell.fill = header_fill
            for row in df_or_rows.itertuples(index=False):
                ws.append(list(row))
        else:
            if headers:
                ws.append(headers)
                for cell in ws[ws.max_row]:
                    cell.font = header_font
                    cell.alignment = center
                    cell.fill = header_fill
            for row in df_or_rows:
                ws.append(row)
 
        ws.append([])  # Spacer row
 
    # Write FPY Table
    write_section("FPY Table", fpy_df)
 
    # Write Failed Stations
    if failed_stations:
        fail_df = pd.DataFrame(failed_stations, columns=["Station", "Metric", "Actual (%)", "Goal (%)"])
        write_section("Failed Stations", fail_df)
 
    # Write NTF Breakdown
    if ntf_rows:
        write_section("Top Failure Analysis — NTF", ntf_rows, ["Top Computer → Qty", "Top 3 Faults → Qty"])
 
    # Write DER Breakdown
    if der_rows:
        write_section("Top Failure Analysis — DER", der_rows, ["Symptom → Qty", "Responsibility → Qty"])
 
    # Adjust column width for 'project' column
    ws.column_dimensions['A'].width = 25  # Wider than others
 
    output = io.BytesIO()
    wb.save(output)
    output.seek(0)
 
    return send_file(output,
                     download_name=f"{project}_full_report.xlsx",
                     as_attachment=True,
                     mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
 
@dashboard_bp.route('/export-pdf')
@login_required
def export_pdf():
    project = request.args.get('project')
    rty_goal = float(request.args.get('rty_goal', 90.0))
 
    token = get_token()
    fpy_data_raw = get_fpy(token, [project])
 
    if not fpy_data_raw:
        return "No data to export."
 
    # Clean FPY table
    desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty", "py"]
    fpy_data = [{col: row.get(col, "") for col in desired_columns} for row in fpy_data_raw]
    fpy_df = pd.DataFrame(fpy_data).astype(str)
 
    failed_stations = []
    ntf_blocks = []
    der_blocks = []
 
    try:
        actual_rty = float(str(fpy_df["rty"].iloc[0]).replace("%", ""))
        if actual_rty < rty_goal:
            for _, row in fpy_df.iterrows():
                station = row.get("station")
                ntf = float(str(row.get("ntf", "0")).replace("%", "")) if row.get("ntf") else None
                der = float(str(row.get("der", "0")).replace("%", "")) if row.get("der") else None
 
                if station in Config.NTF_GOALS and ntf is not None and ntf > Config.NTF_GOALS[station]:
                    failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))
                    detail_df = pd.DataFrame(get_station_ntf_details(token, project, station)).rename(columns={
                        "substation": "Computer Name",
                        "sn": "SN",
                        "symptomEnName": "Fault Description"
                    })[["SN", "Fault Description", "Computer Name"]]
 
                    top_computers = detail_df["Computer Name"].value_counts().head(3).to_dict()
                    rows = ""
                    for comp, count in top_computers.items():
                        comp_faults = detail_df[detail_df["Computer Name"] == comp]
                        faults = comp_faults["Fault Description"].value_counts().head(3)
                        fault_lines = "".join([f"{i+1}. {fault} → {qty}<br>" for i, (fault, qty) in enumerate(faults.items())])
                        rows += f"<tr><td>{comp} → {count}</td><td>{fault_lines}</td></tr>"
                    ntf_blocks.append(f"""
                        <h3>{station} — NTF Analysis</h3>
                        <table>
                            <thead><tr><th>Top Computer → Qty</th><th>Top 3 Faults → Qty</th></tr></thead>
                            <tbody>{rows}</tbody>
                        </table>
                    """)
 
                if station in Config.DER_GOALS and der is not None and der > Config.DER_GOALS[station]:
                    failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                    detail_df = pd.DataFrame(get_station_der_details(token, project, station)).rename(columns={
                        "sn": "SN",
                        "responsibilityEnName": "Responsibility",
                        "symptomEnName": "Symptoms"
                    })[["SN", "Responsibility", "Symptoms"]]
 
                    top_symptoms = detail_df["Symptoms"].value_counts().head(3)
                    top_responsibilities = detail_df["Responsibility"].value_counts().head(3)
 
                    rows = ""
                    for i in range(3):
                        symptom = top_symptoms.index[i] if i < len(top_symptoms) else ""
                        symptom_qty = top_symptoms.iloc[i] if i < len(top_symptoms) else ""
                        resp = top_responsibilities.index[i] if i < len(top_responsibilities) else ""
                        resp_qty = top_responsibilities.iloc[i] if i < len(top_responsibilities) else ""
                        rows += f"<tr><td>{symptom} → {symptom_qty}</td><td>{resp} → {resp_qty}</td></tr>"
                    der_blocks.append(f"""
                        <h3>{station} — DER Analysis</h3>
                        <table>
                            <thead><tr><th>Symptom → Qty</th><th>Responsibility → Qty</th></tr></thead>
                            <tbody>{rows}</tbody>
                        </table>
                    """)
    except Exception as e:
        print("RTY analysis error:", e)
 
    # Build FPY table manually with wider project column
    fpy_html = "<table border='1' cellspacing='0' cellpadding='4' style='width:100%;'>"
    fpy_html += "<thead><tr>"
    for col in fpy_df.columns:
        if col == "project":
            fpy_html += f"<th style='font-size:10px; white-space:normal; word-wrap:break-word; width:120px;'>{col}</th>"
        else:
            fpy_html += f"<th style='font-size:10px; white-space:normal; word-wrap:break-word;'>{col}</th>"
    fpy_html += "</tr></thead><tbody>"
 
    for _, row in fpy_df.iterrows():
        fpy_html += "<tr>"
        for col in fpy_df.columns:
            if col == "project":
                fpy_html += f"<td style='font-size:10px; white-space:normal; word-wrap:break-word; width:120px;'>{row[col]}</td>"
            else:
                fpy_html += f"<td style='font-size:10px; white-space:normal; word-wrap:break-word;'>{row[col]}</td>"
        fpy_html += "</tr>"
    fpy_html += "</tbody></table>"
 
    # Build full HTML
    html = f"""
    <html><head><style>
    body {{ font-family: Arial; font-size: 11px; }}
    table {{ border-collapse: collapse; width: 100%; margin-bottom: 20px; }}
    th, td {{ border: 1px solid #ccc; padding: 4px; text-align: left; vertical-align: top; }}
    th {{ background-color: #4361ee; color: white; }}
    h1 {{ margin-bottom: 10px; color: #4361ee; }}
    h2 {{ margin-top: 30px; color: #4361ee; }}
    h3 {{ margin-top: 20px; color: #4361ee; }}
    </style></head><body>
    <h1>FPY Report for {project}</h1>
    <p><strong>RTY Goal:</strong> {rty_goal}%</p>
 
    <h2>FPY Table</h2>
    {fpy_html}
    """
 
    if failed_stations:
        fail_df = pd.DataFrame(failed_stations, columns=["Station", "Metric", "Actual (%)", "Goal (%)"])
        html += "<h2>Failed Stations</h2>" + fail_df.to_html(index=False)
 
    if ntf_blocks or der_blocks:
        html += "<h2>Top Failure Analysis</h2>"
        html += "".join(ntf_blocks)
        html += "".join(der_blocks)
 
    html += "</body></html>"
 
    # Convert to PDF using ReportLab
    from reportlab.lib.pagesizes import letter, landscape
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet
    from reportlab.lib import colors
    from reportlab.lib.units import inch
 
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=landscape(letter))
    elements = []
    
    styles = getSampleStyleSheet()
    title_style = styles['Title']
    heading_style = styles['Heading1']
    normal_style = styles['Normal']
    
    # Title
    elements.append(Paragraph(f"FPY Report for {project}", title_style))
    elements.append(Spacer(1, 12))
    elements.append(Paragraph(f"RTY Goal: {rty_goal}%", normal_style))
    elements.append(Spacer(1, 12))
    
    # FPY Table
    elements.append(Paragraph("FPY Table", heading_style))
    elements.append(Spacer(1, 12))
    
    # Convert DataFrame to list of lists for ReportLab
    fpy_data_list = [list(fpy_df.columns)] + fpy_df.values.tolist()
    fpy_table = Table(fpy_data_list)
    fpy_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    elements.append(fpy_table)
    elements.append(Spacer(1, 12))
    
    # Failed Stations
    if failed_stations:
        elements.append(Paragraph("Failed Stations", heading_style))
        elements.append(Spacer(1, 12))
        
        failed_data = [["Station", "Metric", "Actual (%)", "Goal (%)"]] + failed_stations
        failed_table = Table(failed_data)
        failed_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        elements.append(failed_table)
        elements.append(Spacer(1, 12))
    
    # NTF Breakdown
    if ntf_blocks:
        elements.append(Paragraph("Top Failure Analysis — NTF", heading_style))
        elements.append(Spacer(1, 12))
        
        for rows in ntf_blocks:
            ntf_table = Table([["Top Computer → Qty", "Top 3 Faults → Qty"]] + rows)
            ntf_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            elements.append(ntf_table)
            elements.append(Spacer(1, 12))
    
    # DER Breakdown
    if der_blocks:
        elements.append(Paragraph("Top Failure Analysis — DER", heading_style))
        elements.append(Spacer(1, 12))
        
        for rows in der_blocks:
            der_table = Table([["Symptom → Qty", "Responsibility → Qty"]] + rows)
            der_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            elements.append(der_table)
            elements.append(Spacer(1, 12))
    
    # Build PDF
    doc.build(elements)
    
    buffer.seek(0)
    return send_file(buffer,
                     download_name=f"{project}_full_report.pdf",
                     as_attachment=True,
                     mimetype='application/pdf')

@dashboard_bp.route('/export-excel-model')
@login_required
def export_excel_model():
    model_name = request.args.get('model_name')
    station_type = request.args.get('station_type', 'BE')
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    rty_goal = float(request.args.get('rty_goal', 90.0))

    try:
        # Try to get data from database first
        fpy_data_query = FPYData.query.filter_by(project=model_name)
        
        # If date range is specified, filter by date
        if start_date and end_date:
            start_datetime = datetime.strptime(start_date, '%Y-%m-%dT%H:%M')
            end_datetime = datetime.strptime(end_date, '%Y-%m-%dT%H:%M')
            fpy_data_query = fpy_data_query.filter(FPYData.timestamp.between(start_datetime, end_datetime))
        
        db_data = fpy_data_query.all()
        
        # If no data in database, fetch from API
        if not db_data:
            token = get_token()
            fpy_data_raw = get_fpy_by_model(token, model_name, station_type, start_date, end_date)
            
            # Convert API data to database format and save
            for record in fpy_data_raw:
                mapped_data = map_api_to_db(record)
                new_record = FPYData(**mapped_data)
                db.session.add(new_record)
            
            db.session.commit()
            
            # Now get the data from the database
            fpy_data_query = FPYData.query.filter_by(project=model_name)
            if start_date and end_date:
                start_datetime = datetime.strptime(start_date, '%Y-%m-%dT%H:%M')
                end_datetime = datetime.strptime(end_date, '%Y-%m-%dT%H:%M')
                fpy_data_query = fpy_data_query.filter(FPYData.timestamp.between(start_datetime, end_datetime))
            
            db_data = fpy_data_query.all()
        
        # Convert database objects to dictionaries
        desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty", "py"]
        fpy_data = []
        
        for record in db_data:
            row = map_db_to_api(record)
            fpy_data.append(row)

        if not fpy_data:
            return "No data to export."

        # Create Excel workbook
        wb = Workbook()
        ws = wb.active
        ws.title = "FPY Report"

        bold = Font(bold=True)
        center = Alignment(horizontal="center", vertical="center", wrap_text=True)
        header_fill = PatternFill(start_color="4361ee", end_color="4361ee", fill_type="solid")
        header_font = Font(bold=True, color="FFFFFF")

        # Write headers
        headers = ["Model", "Station", "Input Qty", "Good Qty", "NG", "NDF", "NG Rate", "NDF Rate", "RTY", "PY"]
        ws.append(headers)
        
        for cell in ws[1]:  # First row
            cell.font = header_font
            cell.alignment = center
            cell.fill = header_fill

        # Write data
        for row_data in fpy_data:
            row = [
                row_data.get("project", ""),
                row_data.get("station", ""),
                row_data.get("inPut", ""),
                row_data.get("pass", ""),
                row_data.get("fail", ""),
                row_data.get("notFail", ""),
                row_data.get("der", ""),
                row_data.get("ntf", ""),
                row_data.get("rty", ""),
                row_data.get("py", "")
            ]
            ws.append(row)

        # Adjust column widths
        for col in ws.columns:
            max_length = 0
            column = col[0].column_letter  # Get the column letter
            for cell in col:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            ws.column_dimensions[column].width = adjusted_width

        output = io.BytesIO()
        wb.save(output)
        output.seek(0)

        return send_file(output,
                         download_name=f"{model_name}_report.xlsx",
                         as_attachment=True,
                         mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    except Exception as e:
        print(f"Error exporting Excel: {e}")
        return f"Error exporting data: {str(e)}"

@dashboard_bp.route('/export-pdf-model')
@login_required
def export_pdf_model():
    model_name = request.args.get('model_name')
    station_type = request.args.get('station_type', 'BE')
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    rty_goal = float(request.args.get('rty_goal', 90.0))

    try:
        # Try to get data from database first
        fpy_data_query = FPYData.query.filter_by(project=model_name)
        
        # If date range is specified, filter by date
        if start_date and end_date:
            start_datetime = datetime.strptime(start_date, '%Y-%m-%dT%H:%M')
            end_datetime = datetime.strptime(end_date, '%Y-%m-%dT%H:%M')
            fpy_data_query = fpy_data_query.filter(FPYData.timestamp.between(start_datetime, end_datetime))
        
        db_data = fpy_data_query.all()
        
        # If no data in database, fetch from API
        if not db_data:
            token = get_token()
            fpy_data_raw = get_fpy_by_model(token, model_name, station_type, start_date, end_date)
            
            # Convert API data to database format and save
            for record in fpy_data_raw:
                mapped_data = map_api_to_db(record)
                new_record = FPYData(**mapped_data)
                db.session.add(new_record)
            
            db.session.commit()
            
            # Now get the data from the database
            fpy_data_query = FPYData.query.filter_by(project=model_name)
            if start_date and end_date:
                start_datetime = datetime.strptime(start_date, '%Y-%m-%dT%H:%M')
                end_datetime = datetime.strptime(end_date, '%Y-%m-%dT%H:%M')
                fpy_data_query = fpy_data_query.filter(FPYData.timestamp.between(start_datetime, end_datetime))
            
            db_data = fpy_data_query.all()
        
        # Convert database objects to dictionaries
        desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty", "py"]
        fpy_data = []
        
        for record in db_data:
            row = map_db_to_api(record)
            fpy_data.append(row)

        if not fpy_data:
            return "No data to export."

        # Create PDF using ReportLab
        from reportlab.lib.pagesizes import letter, landscape
        from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
        from reportlab.lib.styles import getSampleStyleSheet
        from reportlab.lib import colors
        from reportlab.lib.units import inch

        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=landscape(letter))
        elements = []
        
        styles = getSampleStyleSheet()
        title_style = styles['Title']
        heading_style = styles['Heading1']
        normal_style = styles['Normal']
        
        # Title
        elements.append(Paragraph(f"FPY Report for {model_name}", title_style))
        elements.append(Spacer(1, 12))
        elements.append(Paragraph(f"RTY Goal: {rty_goal}%", normal_style))
        elements.append(Spacer(1, 12))
        
        # FPY Table
        elements.append(Paragraph("FPY Data", heading_style))
        elements.append(Spacer(1, 12))
        
        # Convert DataFrame to list of lists for ReportLab
        headers = ["Model", "Station", "Input Qty", "Good Qty", "NG", "NDF", "NG Rate", "NDF Rate", "RTY", "PY"]
        fpy_data_list = [headers]
        
        for row in fpy_data:
            fpy_data_list.append([
                row.get("project", ""),
                row.get("station", ""),
                row.get("inPut", ""),
                row.get("pass", ""),
                row.get("fail", ""),
                row.get("notFail", ""),
                row.get("der", ""),
                row.get("ntf", ""),
                row.get("rty", ""),
                row.get("py", "")
            ])
        
        fpy_table = Table(fpy_data_list)
        fpy_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        elements.append(fpy_table)
        elements.append(Spacer(1, 12))
        
        # Build PDF
        doc.build(elements)
        
        buffer.seek(0)
        return send_file(buffer,
                         download_name=f"{model_name}_report.pdf",
                         as_attachment=True,
                         mimetype='application/pdf')
    except Exception as e:
        print(f"Error exporting PDF: {e}")
        return f"Error exporting data: {str(e)}"
    
    
    
@dashboard_bp.route('/rty-analysis-report')
@login_required
def rty_analysis_report():
    current_time = datetime.now().strftime('%H:%M')
    try:
        # Get token
        token = get_token()
        
        # Get project list
        projects = get_project_list(token)
        
        # Get today's data from 08:00AM to now
        now = datetime.now()
        start = now.replace(hour=8, minute=0, second=0, microsecond=0)
        
        # Get FPY data
        fpy_data_raw = get_fpy(token, projects, start, now)
        
        # Get model descriptions from database to filter out 2G models and get goals
        db_models = {model.model_name: model for model in ModelDescription.query.all()}
        
        # Process data and filter out 2G models
        processed_data = []
        models_not_meeting_goal = []
        
        # Group data by project/model
        project_data = {}
        
        for record in fpy_data_raw:
            project = record.get('project', '')
            model_info = db_models.get(project)
            
            # Skip 2G models
            if model_info and model_info.technology == '2G':
                continue
                
            # Skip if no model info found
            if not model_info:
                continue
                
            # Extract values
            input_qty = int(record.get('inPut', 0))
            pass_qty = int(record.get('pass', 0))
            fail_qty = int(record.get('fail', 0))
            not_fail_qty = int(record.get('notFail', 0))
            der_val = float(str(record.get('der', '0')).replace('%', '')) if record.get('der') else 0
            ntf_val = float(str(record.get('ntf', '0')).replace('%', '')) if record.get('ntf') else 0
            rty_val = float(str(record.get('rty', '0')).replace('%', '')) if record.get('rty') else 0
            
            # Get goal from model info
            goal_str = model_info.goal.replace('%', '') if model_info.goal and model_info.goal != 'NA' else '0'
            goal_val = float(goal_str) if goal_str else 0
            
            # Create processed record
            processed_record = {
                "project": project,
                "station": record.get('station', ''),
                "inPut": input_qty,
                "pass": pass_qty,
                "fail": fail_qty,
                "notFail": not_fail_qty,
                "der": der_val,
                "ntf": ntf_val,
                "rty": rty_val,
                "goal": goal_val,
                "technology": model_info.technology,
                "position": model_info.position,
                "brand": model_info.brand
            }
            
            processed_data.append(processed_record)
            
            # Group by project for later analysis
            if project not in project_data:
                project_data[project] = []
            project_data[project].append(processed_record)
        
        # Calculate overall RTY for each project and check against goal
        for project, records in project_data.items():
            # Calculate total input and pass for the project
            total_input = sum(record['inPut'] for record in records)
            total_pass = sum(record['pass'] for record in records)
            
            # Calculate overall RTY
            overall_rty = (total_pass / total_input * 100) if total_input > 0 else 0
            
            # Get model info
            model_info = db_models.get(project)
            goal_val = model_info.goal.replace('%', '') if model_info.goal and model_info.goal != 'NA' else '0'
            goal_val = float(goal_val) if goal_val else 0
            
            # Check if goal is not achieved
            if overall_rty < goal_val and goal_val > 0:
                models_not_meeting_goal.append({
                    "project": project,
                    "technology": model_info.technology,
                    "position": model_info.position,
                    "brand": model_info.brand,
                    "goal": goal_val,
                    "actual_rty": overall_rty,
                    "gap": goal_val - overall_rty,
                    "total_input": total_input,
                    "total_pass": total_pass,
                    "total_fail": sum(record['fail'] for record in records),
                    "total_ntf": sum(record['notFail'] for record in records),
                    "stations": records
                })
        
        # Sort by gap (largest gap first)
        models_not_meeting_goal.sort(key=lambda x: x['gap'], reverse=True)
        
        # Calculate summary statistics
        total_models = len(project_data)
        models_meeting_goal = total_models - len(models_not_meeting_goal)
        compliance_rate = (models_meeting_goal / total_models * 100) if total_models > 0 else 0
        
        # Calculate average gap
        avg_gap = sum(model['gap'] for model in models_not_meeting_goal) / len(models_not_meeting_goal) if models_not_meeting_goal else 0
        
        # Calculate total input for all models
        total_input_all = sum(model['total_input'] for model in models_not_meeting_goal)
        
        # Calculate potential improvement if all models met goal
        potential_improvement = 0
        for model in models_not_meeting_goal:
            if model['total_input'] > 0:
                potential_units = model['total_input'] * (model['gap'] / 100)
                potential_improvement += potential_units
        
        # Prepare summary data
        summary_data = {
            "total_models": total_models,
            "models_meeting_goal": models_meeting_goal,
            "models_not_meeting_goal": len(models_not_meeting_goal),
            "compliance_rate": compliance_rate,
            "avg_gap": avg_gap,
            "total_input": total_input_all,
            "potential_improvement": potential_improvement
        }
        
        # Group by technology for analysis
        tech_analysis = {}
        for model in models_not_meeting_goal:
            tech = model['technology']
            if tech not in tech_analysis:
                tech_analysis[tech] = {
                    "count": 0,
                    "total_gap": 0,
                    "total_input": 0,
                    "models": []
                }
            
            tech_analysis[tech]["count"] += 1
            tech_analysis[tech]["total_gap"] += model['gap']
            tech_analysis[tech]["total_input"] += model['total_input']
            tech_analysis[tech]["models"].append(model)
        
        # Group by position for analysis
        position_analysis = {}
        for model in models_not_meeting_goal:
            position = model['position']
            if position not in position_analysis:
                position_analysis[position] = {
                    "count": 0,
                    "total_gap": 0,
                    "total_input": 0,
                    "models": []
                }
            
            position_analysis[position]["count"] += 1
            position_analysis[position]["total_gap"] += model['gap']
            position_analysis[position]["total_input"] += model['total_input']
            position_analysis[position]["models"].append(model)
        
        # Group by brand for analysis
        brand_analysis = {}
        for model in models_not_meeting_goal:
            brand = model['brand']
            if brand not in brand_analysis:
                brand_analysis[brand] = {
                    "count": 0,
                    "total_gap": 0,
                    "total_input": 0,
                    "models": []
                }
            
            brand_analysis[brand]["count"] += 1
            brand_analysis[brand]["total_gap"] += model['gap']
            brand_analysis[brand]["total_input"] += model['total_input']
            brand_analysis[brand]["models"].append(model)
        
        return render_template('dashboard/rty_analysis_report.html', 
                               models_not_meeting_goal=models_not_meeting_goal,
                               summary_data=summary_data,
                               tech_analysis=tech_analysis,
                               position_analysis=position_analysis,
                               brand_analysis=brand_analysis,
                               current_time=current_time)
    except Exception as e:
        current_time = datetime.now().strftime('%H:%M')
        return render_template('errors/500.html', error=str(e), current_time=current_time)
    
    
    
@dashboard_bp.route('/models-rty-summary')
@login_required
def models_rty_summary():
    current_time = datetime.now().strftime('%H:%M')
    try:
        # Import station goals from config
        from config import Config
        
        # Get token
        token = get_token()
        
        # Get project list
        projects = get_project_list(token)
        
        # Get today's data from 08:00AM to now
        now = datetime.now()
        start = now.replace(hour=8, minute=0, second=0, microsecond=0)
        
        # Get FPY data
        fpy_data_raw = get_fpy(token, projects, start, now)
        
        # Get model descriptions from database to filter out 2G models and get goals
        db_models = {model.model_name: model for model in ModelDescription.query.all()}
        
        # Process data and filter out 2G models
        all_models_data = []
        models_achieving_goal = []
        models_not_achieving_goal = []
        
        # Group data by project/model
        project_data = {}
        station_data = {}  # For station analysis
        
        # Initialize counters for overall RTY calculation
        total_pcurr_input_all = 0
        total_ng_all = 0
        total_ndf_all = 0
        
        # Initialize data structures for technology and position analysis
        tech_rty_data = {}  # To store RTY values for each technology
        position_rty_data = {}  # To store RTY values for each position category
        
        for record in fpy_data_raw:
            project = record.get('project', '')
            station = record.get('station', '')
            model_info = db_models.get(project)
            
            # Skip 2G models
            if model_info and model_info.technology == '2G':
                continue
                
            # Skip if no model info found
            if not model_info:
                continue
                
            # Extract values
            input_qty = int(record.get('inPut', 0))
            pass_qty = int(record.get('pass', 0))
            fail_qty = int(record.get('fail', 0))
            not_fail_qty = int(record.get('notFail', 0))
            der_val = float(str(record.get('der', '0')).replace('%', '')) if record.get('der') else 0
            ntf_val = float(str(record.get('ntf', '0')).replace('%', '')) if record.get('ntf') else 0
            rty_val = float(str(record.get('rty', '0')).replace('%', '')) if record.get('rty') else 0
            
            # Get goal from model info
            goal_str = model_info.goal.replace('%', '') if model_info.goal and model_info.goal != 'NA' else '0'
            goal_val = float(goal_str) if goal_str else 0
            
            # Create processed record
            processed_record = {
                "project": project,
                "station": station,
                "inPut": input_qty,
                "pass": pass_qty,
                "fail": fail_qty,
                "notFail": not_fail_qty,
                "der": der_val,
                "ntf": ntf_val,
                "rty": rty_val,
                "goal": goal_val,
                "technology": model_info.technology,
                "position": model_info.position,
                "brand": model_info.brand
            }
            
            # Add to all models data
            all_models_data.append(processed_record)
            
            # Group by project for later analysis
            if project not in project_data:
                project_data[project] = []
            project_data[project].append(processed_record)
            
            # Group by station for station analysis
            if station not in station_data:
                station_data[station] = []
            station_data[station].append(processed_record)
            
            # Accumulate for overall RTY calculation
            total_ng_all += fail_qty
            total_ndf_all += not_fail_qty
            if station == 'PCURR':
                total_pcurr_input_all += input_qty
            
            # Collect RTY data for technology and position analysis
            tech = model_info.technology
            if tech not in tech_rty_data:
                tech_rty_data[tech] = []
            tech_rty_data[tech].append(rty_val)
            
            position = model_info.position
            if position in ['LOW', 'MID']:
                position_key = 'LOW/MID'
            elif position in ['HIGH', 'FLAGSHIP', 'FOLD']:
                position_key = 'HIGH/FLAGSHIP/FOLD'
            else:
                position_key = 'OTHER'
                
            if position_key not in position_rty_data:
                position_rty_data[position_key] = []
            position_rty_data[position_key].append(rty_val)
        
        # Calculate overall RTY using the formula
        # RTY (%) = (1 - (Total NG Qty + Total NDF Qty) / Total PCURR Input) × 100
        overall_rty = (1 - (total_ng_all + total_ndf_all) / total_pcurr_input_all) * 100 if total_pcurr_input_all > 0 else 0
        
        # Calculate average RTY by technology and position
        tech_avg_rty = {}
        for tech, rty_values in tech_rty_data.items():
            if rty_values:
                tech_avg_rty[tech] = sum(rty_values) / len(rty_values)
            else:
                tech_avg_rty[tech] = 0
        
        position_avg_rty = {}
        for position, rty_values in position_rty_data.items():
            if rty_values:
                position_avg_rty[position] = sum(rty_values) / len(rty_values)
            else:
                position_avg_rty[position] = 0
        
        # Calculate RTY for each project and check against goal
        for project, records in project_data.items():
            # Calculate total input and pass for the project
            total_input = sum(record['inPut'] for record in records)
            total_pass = sum(record['pass'] for record in records)
            
            # Calculate overall RTY for the project (from API)
            # We'll use the RTY from the first record as the overall RTY for the project
            project_rty = records[0]['rty'] if records else 0
            
            # Get model info
            model_info = db_models.get(project)
            goal_val = model_info.goal.replace('%', '') if model_info.goal and model_info.goal != 'NA' else '0'
            goal_val = float(goal_val) if goal_val else 0
            
            # Check if goal is achieved
            if project_rty >= goal_val and goal_val > 0:
                models_achieving_goal.append({
                    "project": project,
                    "technology": model_info.technology,
                    "position": model_info.position,
                    "brand": model_info.brand,
                    "goal": goal_val,
                    "actual_rty": project_rty,
                    "gap": project_rty - goal_val,
                    "total_input": total_input,
                    "total_pass": total_pass,
                    "total_fail": sum(record['fail'] for record in records),
                    "total_ntf": sum(record['notFail'] for record in records),
                    "stations": records
                })
            else:
                models_not_achieving_goal.append({
                    "project": project,
                    "technology": model_info.technology,
                    "position": model_info.position,
                    "brand": model_info.brand,
                    "goal": goal_val,
                    "actual_rty": project_rty,
                    "gap": goal_val - project_rty if goal_val > 0 else 0,
                    "total_input": total_input,
                    "total_pass": total_pass,
                    "total_fail": sum(record['fail'] for record in records),
                    "total_ntf": sum(record['notFail'] for record in records),
                    "stations": records
                })
        
        # Sort models not achieving goal by gap (largest gap first)
        models_not_achieving_goal.sort(key=lambda x: x['gap'], reverse=True)
        
        # Calculate station performance for models not achieving goal
        stations_not_meeting_goal = {}
        station_details = {}  # For storing top 3 issues
        
        for model in models_not_achieving_goal:
            project = model['project']
            stations_not_meeting_goal[project] = []
            station_details[project] = []
            
            # Get stations for this model
            for station, records in station_data.items():
                # Filter records for this project
                project_records = [r for r in records if r['project'] == project]
                
                if project_records:
                    total_input = sum(record['inPut'] for record in project_records)
                    total_pass = sum(record['pass'] for record in project_records)
                    total_fail = sum(record['fail'] for record in project_records)
                    total_ntf = sum(record['notFail'] for record in project_records)
                    
                    # Calculate station RTY
                    station_rty = (total_pass / total_input * 100) if total_input > 0 else 0
                    
                    # Calculate station DER and NTF
                    station_der = (total_fail / total_input * 100) if total_input > 0 else 0
                    station_ntf = (total_ntf / total_input * 100) if total_input > 0 else 0
                    
                    # Check if station meets goals from config
                    station_ntf_goal = Config.NTF_GOALS.get(station, float('inf'))
                    station_der_goal = Config.DER_GOALS.get(station, float('inf'))
                    
                    # Consider a station not meeting goal if it exceeds either NTF or DER goal
                    if station_ntf > station_ntf_goal or station_der > station_der_goal:
                        station_info = {
                            "station": station,
                            "rty": station_rty,
                            "der": station_der,
                            "ntf": station_ntf,
                            "der_goal": station_der_goal,
                            "ntf_goal": station_ntf_goal,
                            "der_gap": station_der - station_der_goal,
                            "ntf_gap": station_ntf - station_ntf_goal,
                            "total_input": total_input,
                            "total_pass": total_pass,
                            "total_fail": total_fail,
                            "total_ntf": total_ntf
                        }
                        
                        stations_not_meeting_goal[project].append(station_info)
                        
                        # Get NTF details if NTF goal is not met
                        if station_ntf > station_ntf_goal:
                            try:
                                # Get detailed NTF data for this station
                                ntf_data = get_station_ntf_details(token, project, station)
                                ntf_df = pd.DataFrame(ntf_data)
                                
                                if not ntf_df.empty:
                                    # Rename columns to match expected format
                                    ntf_df = ntf_df.rename(columns={
                                        "substation": "Computer Name",
                                        "sn": "SN",
                                        "symptomEnName": "Fault Description"
                                    })
                                    
                                    # Get top computers
                                    top_computers = ntf_df["Computer Name"].value_counts().head(3).to_dict()
                                    
                                    # Get top faults by computer
                                    top_faults_by_computer = {}
                                    for comp in top_computers:
                                        comp_faults = ntf_df[ntf_df["Computer Name"] == comp]
                                        faults = comp_faults["Fault Description"].value_counts().head(3).reset_index().values.tolist()
                                        top_faults_by_computer[comp] = faults
                                    
                                    station_info["ntf_details"] = {
                                        "top_computers": top_computers,
                                        "top_faults_by_computer": top_faults_by_computer
                                    }
                                else:
                                    station_info["ntf_details"] = {
                                        "top_computers": {},
                                        "top_faults_by_computer": {}
                                    }
                            except Exception as e:
                                print(f"Error getting NTF details for {station}: {e}")
                                station_info["ntf_details"] = {
                                    "top_computers": {},
                                    "top_faults_by_computer": {}
                                }
                        
                        # Get DER details if DER goal is not met
                        if station_der > station_der_goal:
                            try:
                                # Get detailed DER data for this station
                                der_data = get_station_der_details(token, project, station)
                                der_df = pd.DataFrame(der_data)
                                
                                if not der_df.empty:
                                    # Rename columns to match expected format
                                    der_df = der_df.rename(columns={
                                        "sn": "SN",
                                        "responsibilityEnName": "Responsibility",
                                        "symptomEnName": "Symptoms"
                                    })
                                    
                                    # Get top symptoms and responsibilities
                                    top_symptoms = get_top_n_counts(der_df, "Symptoms", 3)
                                    top_responsibilities = get_top_n_counts(der_df, "Responsibility", 3)
                                    
                                    station_info["der_details"] = {
                                        "top_symptoms": top_symptoms.to_dict(orient="records"),
                                        "top_responsibilities": top_responsibilities.to_dict(orient="records")
                                    }
                                else:
                                    station_info["der_details"] = {
                                        "top_symptoms": [],
                                        "top_responsibilities": []
                                    }
                            except Exception as e:
                                print(f"Error getting DER details for {station}: {e}")
                                station_info["der_details"] = {
                                    "top_symptoms": [],
                                    "top_responsibilities": []
                                }
            
            # Sort stations not meeting goal by DER gap (largest gap first)
            stations_not_meeting_goal[project].sort(key=lambda x: x['der_gap'], reverse=True)
        
        # Calculate summary statistics
        total_models = len(project_data)
        models_achieving_count = len(models_achieving_goal)
        models_not_achieving_count = len(models_not_achieving_goal)
        achievement_rate = (models_achieving_count / total_models * 100) if total_models > 0 else 0
        
        # Prepare summary data
        summary_data = {
            "total_models": total_models,
            "models_achieving_goal": models_achieving_count,
            "models_not_achieving_goal": models_not_achieving_count,
            "achievement_rate": achievement_rate,
            "overall_rty": overall_rty,
            "total_pcurr_input": total_pcurr_input_all,
            "total_ng_all": total_ng_all,
            "total_ndf_all": total_ndf_all,
            "ntf_goals": Config.NTF_GOALS,
            "der_goals": Config.DER_GOALS,
            "tech_avg_rty": tech_avg_rty,
            "position_avg_rty": position_avg_rty
        }
        
        # Prepare models summary table data
        models_summary = []
        
        # Add models achieving goal
        for model in models_achieving_goal:
            models_summary.append({
                "project": model["project"],
                "technology": model["technology"],
                "position": model["position"],
                "brand": model["brand"],
                "goal": model["goal"],
                "actual_rty": model["actual_rty"],
                "status": "Achieved",
                "gap": model["gap"]
            })
        
        # Add models not achieving goal
        for model in models_not_achieving_goal:
            models_summary.append({
                "project": model["project"],
                "technology": model["technology"],
                "position": model["position"],
                "brand": model["brand"],
                "goal": model["goal"],
                "actual_rty": model["actual_rty"],
                "status": "Not Achieved",
                "gap": -model["gap"]  # Negative gap for not achieved
            })
        
        # Sort by project name
        models_summary.sort(key=lambda x: x["project"])
        
        return render_template('dashboard/models_rty_summary.html', 
                               models_summary=models_summary,
                               models_achieving_goal=models_achieving_goal,
                               models_not_achieving_goal=models_not_achieving_goal,
                               stations_not_meeting_goal=stations_not_meeting_goal,
                               station_details=station_details,
                               summary_data=summary_data,
                               current_time=current_time)
    except Exception as e:
        current_time = datetime.now().strftime('%H:%M')
        return render_template('errors/500.html', error=str(e), current_time=current_time)


routes/__init__.py:

from .auth import auth_bp
from .dashboard import dashboard_bp
from .api import api_bp

__all__ = ['auth_bp', 'dashboard_bp', 'api_bp']



static/css/style.css:

:root {
    --primary: #4361ee;
    --secondary: #3f37c9;
    --success: #06ffa5;
    --warning: #ffbe0b;
    --danger: #ff006e;
    --light: #f8f9fa;
    --dark: #212529;
    --info: #00b4d8;
    --sidebar-width: 250px;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f8f9fa;
    margin: 0;
    padding: 0;
    color: var(--dark);
}

/* Sidebar Styles */
.sidebar {
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: var(--sidebar-width);
    background: linear-gradient(180deg, var(--primary) 0%, var(--secondary) 100%);
    color: white;
    z-index: 1000;
    transition: all 0.3s;
    display: flex;
    flex-direction: column;
}

.sidebar-header {
    padding: 20px;
    text-align: center;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.sidebar-header h3 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
}

.sidebar-menu {
    flex-grow: 1;
    padding: 20px 0;
}

.menu-item {
    display: flex;
    align-items: center;
    padding: 12px 20px;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: all 0.3s;
    border-left: 3px solid transparent;
}

.menu-item:hover {
    background-color: rgba(255, 255, 255, 0.1);
    color: white;
}

.menu-item.active {
    background-color: rgba(255, 255, 255, 0.15);
    border-left-color: var(--success);
    color: white;
}

.sidebar-footer {
    padding: 20px;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.user-info {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.user-avatar {
    margin-right: 10px;
}

.user-avatar i {
    font-size: 2rem;
}

.user-details {
    flex-grow: 1;
}

.user-name {
    font-weight: 600;
    margin-bottom: 2px;
}

.user-role {
    font-size: 0.8rem;
    opacity: 0.7;
}

.logout-btn {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 10px 15px;
    background-color: rgba(255, 255, 255, 0.1);
    color: white;
    border: none;
    border-radius: 4px;
    text-align: left;
    transition: background-color 0.3s;
}

.logout-btn:hover {
    background-color: rgba(255, 255, 255, 0.2);
    color: white;
}

/* Main Content Styles */
.main-content {
    margin-left: var(--sidebar-width);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    transition: all 0.3s;
}

.navbar {
    background-color: white;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
}

.content {
    flex-grow: 1;
    padding: 1.5rem;
}

/* Card Styles */
.card {
    border: none;
    border-radius: 0.5rem;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    margin-bottom: 1.5rem;
}

.card-header {
    background-color: white;
    border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    padding: 1rem 1.25rem;
}

.card-body {
    padding: 1.25rem;
}

/* Border Left Cards */
.border-left-primary {
    border-left: 0.25rem solid var(--primary) !important;
}

.border-left-success {
    border-left: 0.25rem solid var(--success) !important;
}

.border-left-info {
    border-left: 0.25rem solid var(--info) !important;
}

.border-left-warning {
    border-left: 0.25rem solid var(--warning) !important;
}

/* Button Styles */
.btn-primary {
    background-color: var(--primary);
    border-color: var(--primary);
}

.btn-primary:hover {
    background-color: var(--secondary);
    border-color: var(--secondary);
}

.btn-outline-primary {
    color: var(--primary);
    border-color: var(--primary);
}

.btn-outline-primary:hover {
    background-color: var(--primary);
    border-color: var(--primary);
}

/* Table Styles */
.table-responsive {
    border-radius: 0.5rem;
    overflow: hidden;
}

.table {
    margin-bottom: 0;
}

.table thead th {
    background-color: var(--primary);
    color: white;
    border-bottom: none;
}

.table-hover tbody tr:hover {
    background-color: rgba(67, 97, 238, 0.05);
}

/* Form Styles */
.form-control:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 0.2rem rgba(67, 97, 238, 0.25);
}

.form-select:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 0.2rem rgba(67, 97, 238, 0.25);
}

/* Alert Styles */
.alert-warning {
    background-color: rgba(255, 190, 11, 0.1);
    border-left: 4px solid var(--warning);
    color: var(--dark);
}

.alert-success {
    background-color: rgba(6, 255, 165, 0.1);
    border-left: 4px solid var(--success);
    color: var(--dark);
}

/* Footer Styles */
.footer {
    background-color: white;
    border-top: 1px solid rgba(0, 0, 0, 0.125);
    padding: 1rem;
    margin-top: auto;
}

/* Quick Action Styles */
.btn-action {
    display: block;
    color: var(--dark);
    text-decoration: none;
    transition: transform 0.3s;
}

.btn-action:hover {
    transform: translateY(-5px);
    color: var(--dark);
}

.icon-circle {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 15px;
}

.icon-circle i {
    font-size: 1.5rem;
}

/* Dashboard Specific Styles */
.stats-card {
    border-radius: 0.5rem;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    padding: 1rem;
    margin-bottom: 1rem;
    transition: transform 0.3s;
}

.stats-card:hover {
    transform: translateY(-5px);
}

.stats-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
}

.stats-value {
    font-size: 1.5rem;
    font-weight: bold;
    margin-bottom: 0.25rem;
}

.stats-label {
    font-size: 0.875rem;
    color: #6c757d;
}

/* Form Section Styles */
.form-section {
    background-color: white;
    border-radius: 0.5rem;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
}

.form-section label {
    font-weight: 600;
    color: var(--dark);
}

/* Export Button Styles */
.export-bar {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 1rem;
}

/* Dropdown Styles */
.dropdown-menu {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    border: none;
    border-radius: 0.5rem;
}

.dropdown-item:hover {
    background-color: rgba(67, 97, 238, 0.1);
}

/* Loading Spinner */
.spinner-border {
    width: 3rem;
    height: 3rem;
}

/* Breadcrumb Styles */
.breadcrumb {
    background-color: transparent;
    padding: 0;
    margin-bottom: 0;
}

.breadcrumb-item + .breadcrumb-item::before {
    content: ">";
    color: #6c757d;
}

/* Handle empty tables */
.dataTables_empty {
    text-align: center;
    padding: 20px;
    font-style: italic;
    color: #6c757d;
}

/* Ensure consistent column widths in analysis tables */
.analysis-table th,
.analysis-table td {
    min-width: 100px;
    max-width: 300px;
    word-wrap: break-word;
}

/* Style for no data rows */
.no-data-row {
    text-align: center;
    font-style: italic;
    color: #6c757d;
}

/* Timeline Styles */
.timeline {
    position: relative;
    padding-left: 20px;
}

.timeline-item {
    position: relative;
    padding-bottom: 20px;
}

.timeline-marker {
    position: absolute;
    left: -30px;
    width: 12px;
    height: 12px;
    border-radius: 50%;
}

.timeline-content {
    margin-left: 10px;
}

.timeline-time {
    font-size: 0.8rem;
    color: #6c757d;
    display: block;
    margin-bottom: 5px;
}

.timeline-title {
    font-weight: 600;
    margin-bottom: 5px;
}

.timeline-text {
    font-size: 0.9rem;
    color: #495057;
}

/* Gauge Chart Styles */
.gauge-container {
    position: relative;
    width: 150px;
    height: 150px;
    margin: 0 auto;
}

.gauge-value {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 1.2rem;
    font-weight: bold;
}

/* Responsive Styles */
@media (max-width: 768px) {
    .sidebar {
        width: 100%;
        max-width: var(--sidebar-width);
        transform: translateX(-100%);
    }
    
    .sidebar.active {
        transform: translateX(0);
    }
    
    .main-content {
        margin-left: 0;
    }
    
    .content {
        padding: 1rem;
    }
}

/* DataTables Custom Styles */
.dataTables_wrapper .dataTables_filter input {
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    padding: 0.375rem 0.75rem;
}

.dataTables_wrapper .dataTables_length select {
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    padding: 0.375rem 0.75rem;
}



static/js/main.js:


document.addEventListener('DOMContentLoaded', function() {
    // Sidebar Toggle
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebar = document.querySelector('.sidebar');
    
    if (sidebarToggle) {
        sidebarToggle.addEventListener('click', function() {
            sidebar.classList.toggle('active');
        });
    }
    
    // Initialize Tooltips
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
    
    // // Auto-hide alerts after 5 seconds
    // const alerts = document.querySelectorAll('.alert');
    // alerts.forEach(function(alert) {
    //     setTimeout(function() {
    //         alert.classList.add('fade');
    //         setTimeout(function() {
    //             alert.remove();
    //         }, 500);
    //     }, 5000);
    // });
    
    // Format numbers with commas
    function formatNumber(num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
    
    // Format percentage
    function formatPercentage(value) {
        return parseFloat(value).toFixed(2) + '%';
    }
    
    // Update last updated time
    function updateLastUpdatedTime() {
        const now = new Date();
        const timeString = now.getHours().toString().padStart(2, '0') + ':' + 
                          now.getMinutes().toString().padStart(2, '0');
        const lastUpdatedElement = document.getElementById('last-updated');
        if (lastUpdatedElement) {
            lastUpdatedElement.textContent = timeString;
        }
    }
    
    updateLastUpdatedTime();
    setInterval(updateLastUpdatedTime, 60000); // Update every minute
    
    // Handle form submissions with loading indicator
    const forms = document.querySelectorAll('form');
    forms.forEach(function(form) {
        form.addEventListener('submit', function() {
            const submitButton = form.querySelector('button[type="submit"]');
            if (submitButton) {
                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
            }
        });
    });
    
    // Initialize DataTables with common options
    function initDataTables() {
        // Check if DataTables are already initialized and destroy them
        const dataTables = document.querySelectorAll('table[id$="Table"]');
        dataTables.forEach(function(table) {
            if ($.fn.DataTable.isDataTable(table)) {
                $(table).DataTable().destroy();
            }
            
            $(table).DataTable({
                responsive: true,
                pageLength: 10,
                lengthMenu: [ [10, 25, 50, 100], [10, 25, 50, 100] ],
                dom: '<"row"<"col-sm-6"l><"col-sm-6"f>>' +
                     '<"row"<"col-sm-12"tr>>' +
                     '<"row"<"col-sm-5"i><"col-sm-7"p>>',
                language: {
                    search: "_INPUT_",
                    searchPlaceholder: "Search records..."
                },
                destroy: true
            });
        });
    }
    
    // Initialize DataTables on page load
    initDataTables();
    
    // Handle export buttons
    const exportButtons = document.querySelectorAll('.export-btn');
    exportButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            const format = this.getAttribute('data-format');
            const url = this.getAttribute('data-url');
            
            if (format && url) {
                window.location.href = url + '&format=' + format;
            }
        });
    });
    
    // Handle date range pickers
    const dateRangePickers = document.querySelectorAll('.date-range-picker');
    dateRangePickers.forEach(function(picker) {
        $(picker).daterangepicker({
            opens: 'left',
            locale: {
                format: 'YYYY-MM-DD'
            }
        });
    });
    
    // Handle datetime-local inputs
    const datetimeInputs = document.querySelectorAll('input[type="datetime-local"]');
    datetimeInputs.forEach(function(input) {
        const now = new Date();
        const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000)
                                .toISOString().slice(0, 16);
        input.setAttribute('max', localDateTime);
    });
    
    // Initialize charts if Chart.js is available
    if (typeof Chart !== 'undefined') {
        // Chart default options
        Chart.defaults.font.family = "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif";
        Chart.defaults.color = '#6c757d';
        
        // Create a chart for each canvas with 'chart' in its ID
        const chartCanvases = document.querySelectorAll('canvas[id*="chart"]');
        chartCanvases.forEach(function(canvas) {
            const ctx = canvas.getContext('2d');
            const chartType = canvas.getAttribute('data-chart-type') || 'line';
            
            // This is a placeholder - actual chart implementation would depend on the specific use case
            new Chart(ctx, {
                type: chartType,
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                    datasets: [{
                        label: 'Dataset',
                        data: [12, 19, 3, 5, 2, 3],
                        backgroundColor: 'rgba(67, 97, 238, 0.2)',
                        borderColor: 'rgba(67, 97, 238, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        });
    }
    
    // Handle confirmation dialogs
    const confirmButtons = document.querySelectorAll('[data-confirm]');
    confirmButtons.forEach(function(button) {
        button.addEventListener('click', function(e) {
            const message = this.getAttribute('data-confirm') || 'Are you sure?';
            if (!confirm(message)) {
                e.preventDefault();
            }
        });
    });
    
    // Handle file uploads
    const fileInputs = document.querySelectorAll('input[type="file"]');
    fileInputs.forEach(function(input) {
        input.addEventListener('change', function() {
            const fileName = this.files[0]?.name || 'No file selected';
            const label = this.nextElementSibling;
            if (label && label.classList.contains('custom-file-label')) {
                label.textContent = fileName;
            }
        });
    });
});



templates/auth/login.html:

{% extends "base.html" %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-lg border-0 rounded-lg mt-5">
                <div class="card-header justify-content-center">
                    <h3 class="font-weight-light my-4">FPY Dashboard Login</h3>
                </div>
                <div class="card-body">
                    {% if error %}
                    <div class="alert alert-danger" role="alert">
                        {{ error }}
                    </div>
                    {% endif %}
                    
                    <form method="POST" action="{{ url_for('auth.login') }}">
                        <div class="form-floating mb-3">
                            <input class="form-control" id="username" name="username" type="text" placeholder="Username" required>
                            <label for="username">Username</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input class="form-control" id="password" name="password" type="password" placeholder="Password" required>
                            <label for="password">Password</label>
                        </div>
                        <div class="d-flex align-items-center justify-content-between mt-4 mb-0">
                            <button class="btn btn-primary w-100" type="submit">Login</button>
                        </div>
                    </form>
                </div>
                <div class="card-footer text-center py-3">
                    <div class="small"><a href="#">Forgot Password?</a></div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}



templates/dashboard/auto_data.html:


{% extends "base.html" %}

{% block content %}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">Auto FPY Report</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ url_for('dashboard.index') }}">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Auto Data</li>
                </ol>
            </nav>
        </div>
        <div>
            <button class="btn btn-primary" id="refresh-btn">
                <i class="fas fa-sync-alt me-2"></i>Refresh Data
            </button>
        </div>
    </div>

    <!-- Data Info Card -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Data Information</h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Live data from today 08:00 → <span id="current-time">{{ current_time }}</span></strong>
                    </p>
                    <p>This report shows real-time First Pass Yield (FPY) data for all active projects.</p>
                </div>
                <div class="col-md-6 text-end">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-primary" id="export-csv">
                            <i class="fas fa-file-csv me-1"></i> CSV
                        </button>
                        <button type="button" class="btn btn-outline-primary" id="export-excel">
                            <i class="fas fa-file-excel me-1"></i> Excel
                        </button>
                        <button type="button" class="btn btn-outline-primary" id="export-pdf">
                            <i class="fas fa-file-pdf me-1"></i> PDF
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">FPY Data</h6>
            <div class="dropdown no-arrow">
                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown"
                    aria-expanded="false">
                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                    aria-labelledby="dropdownMenuLink">
                    <div class="dropdown-header">Actions:</div>
                    <a class="dropdown-item" href="#" id="toggle-columns">Toggle Columns</a>
                    <a class="dropdown-item" href="#" id="reset-table">Reset View</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            {% if data %}
            <div class="table-responsive">
                <table id="fpyTable" class="table table-striped table-hover" style="width:100%">
                    <thead>
                        <tr>
                            {% for col in data[0].keys() %}
                            <th>{{ column_headers[col] }}</th>
                            {% endfor %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for row in data %}
                        <tr>
                            {% for col in data[0].keys() %}
                            <td>{{ row[col] }}</td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            {% else %}
            <div class="alert alert-warning" role="alert">
                <div class="d-flex align-items-center">
                    <div class="me-3">
                        <i class="fas fa-exclamation-triangle fa-2x"></i>
                    </div>
                    <div>
                        <h5 class="alert-heading">No Data Available</h5>
                        <p class="mb-0">There is no current data available to display. Please try refreshing the data or
                            check back later.</p>
                    </div>
                </div>
            </div>
            {% endif %}
        </div>
    </div>

    <!-- Summary Statistics -->
    <div class="row">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Projects</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="total-projects">0</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-project-diagram fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Average RTY</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="avg-rty">0%</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-line fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Total Input</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="total-input">0</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-inbox fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Failure Rate</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="failure-rate">0%</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-exclamation-triangle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- RTY Performance Chart -->
    <div class="row">
        <div class="col-xl-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">RTY Performance by Project</h6>
                </div>
                <div class="card-body">
                    <canvas id="rtyPerformanceChart" height="100"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1" aria-labelledby="loadingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Refreshing data, please wait...</p>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize DataTable
        const table = $('#fpyTable').DataTable({
            responsive: true,
            pageLength: 20,
            lengthMenu: [[20, 50, 100, 200], [20, 50, 100, 200]],
            dom: 'Bfrtip',
            buttons: [
                'copy',
                {
                    extend: 'csv',
                    title: 'FPY_Report'
                },
                {
                    extend: 'excel',
                    title: 'FPY_Report'
                },
                {
                    extend: 'pdf',
                    title: 'FPY_Report',
                    orientation: 'landscape',
                    pageSize: 'A4'
                },
                'print'
            ],
            columnDefs: [
                { targets: '_all', className: 'text-center' }
            ]
        });

        // Calculate and display summary statistics
        function calculateStatistics() {
            const data = table.data().toArray();

            if (data.length === 0) {
                document.getElementById('total-projects').textContent = '0';
                document.getElementById('avg-rty').textContent = '0%';
                document.getElementById('total-input').textContent = '0';
                document.getElementById('failure-rate').textContent = '0%';
                return;
            }

            // Get unique projects
            const projects = new Set();
            let totalInput = 0;
            let totalPass = 0;
            let totalFail = 0;

            data.forEach(row => {
                projects.add(row[0]); // Assuming project is the first column
                totalInput += parseInt(row[2]) || 0; // Assuming input is the third column
                totalPass += parseInt(row[3]) || 0; // Assuming pass is the fourth column
                totalFail += parseInt(row[4]) || 0; // Assuming fail is the fifth column
            });

            // Calculate statistics
            const totalProjects = projects.size;
            const avgRty = totalInput > 0 ? ((totalPass / totalInput) * 100).toFixed(2) + '%' : '0%';
            const failureRate = totalInput > 0 ? ((totalFail / totalInput) * 100).toFixed(2) + '%' : '0%';

            // Update UI
            document.getElementById('total-projects').textContent = totalProjects;
            document.getElementById('avg-rty').textContent = avgRty;
            document.getElementById('total-input').textContent = totalInput.toLocaleString();
            document.getElementById('failure-rate').textContent = failureRate;

            // Create RTY Performance Chart
            createRtyPerformanceChart(data);
        }

        // Create RTY Performance Chart
        function createRtyPerformanceChart(data) {
            const ctx = document.getElementById('rtyPerformanceChart').getContext('2d');

            // Extract project names and RTY values
            const projects = [];
            const rtyValues = [];
            const goalValues = [];

            const projectMap = new Map();

            data.forEach(row => {
                const project = row[0];
                const rty = parseFloat(row[8].replace('%', '')) || 0; // Assuming RTY is the 9th column

                if (projectMap.has(project)) {
                    // If project already exists, average the RTY values
                    const existingData = projectMap.get(project);
                    existingData.total += rty;
                    existingData.count += 1;
                } else {
                    projectMap.set(project, { total: rty, count: 1 });
                }
            });

            projectMap.forEach((data, project) => {
                projects.push(project);
                rtyValues.push((data.total / data.count).toFixed(2));
                goalValues.push(90); // Assuming goal is 90%
            });

            // If we have too many projects, only show the top 10
            if (projects.length > 10) {
                projects.length = 10;
                rtyValues.length = 10;
                goalValues.length = 10;
            }

            // Destroy existing chart if it exists
            if (window.rtyPerformanceChartInstance) {
                window.rtyPerformanceChartInstance.destroy();
            }

            // Create new chart
            window.rtyPerformanceChartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: projects,
                    datasets: [
                        {
                            label: 'Actual RTY',
                            data: rtyValues,
                            backgroundColor: 'rgba(78, 115, 223, 0.8)',
                            borderColor: 'rgba(78, 115, 223, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Goal RTY',
                            data: goalValues,
                            backgroundColor: 'rgba(255, 193, 7, 0.5)',
                            borderColor: 'rgba(255, 193, 7, 1)',
                            borderWidth: 1,
                            type: 'line'
                        }
                    ]
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function (value) {
                                    return value + '%';
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return context.dataset.label + ': ' + context.parsed.y + '%';
                                }
                            }
                        }
                    }
                }
            });
        }

        // Calculate statistics on page load
        calculateStatistics();

        // Refresh button functionality
        document.getElementById('refresh-btn').addEventListener('click', function () {
            const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
            loadingModal.show();

            // Simulate data refresh
            setTimeout(function () {
                location.reload();
            }, 1500);
        });

        // Export buttons functionality
        document.getElementById('export-csv').addEventListener('click', function () {
            table.button('.buttons-csv').trigger();
        });

        document.getElementById('export-excel').addEventListener('click', function () {
            table.button('.buttons-excel').trigger();
        });

        document.getElementById('export-pdf').addEventListener('click', function () {
            table.button('.buttons-pdf').trigger();
        });

        // Toggle columns functionality
        document.getElementById('toggle-columns').addEventListener('click', function () {
            // This would open a modal to toggle column visibility
            alert('Column toggle functionality would be implemented here.');
        });

        // Reset table functionality
        document.getElementById('reset-table').addEventListener('click', function () {
            table.state.clear();
            table.ajax.reload();
            window.location.reload();
        });

        // Update current time
        function updateCurrentTime() {
            const now = new Date();
            const timeString = now.getHours().toString().padStart(2, '0') + ':' + now.getMinutes().toString().padStart(2, '0');
            document.getElementById('current-time').textContent = timeString;
        }

        updateCurrentTime();
        setInterval(updateCurrentTime, 60000); // Update every minute
    });
</script>
{% endblock %}



templates/dashboard/custom_dashboard.html:


{% extends "base.html" %}

{% block content %}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">Custom Dashboard</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ url_for('dashboard.index') }}">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Custom Dashboard</li>
                </ol>
            </nav>
        </div>
        <div>
            <button class="btn btn-primary" id="refresh-dashboard">
                <i class="fas fa-sync-alt me-2"></i>Refresh Data
            </button>
        </div>
    </div>
    
    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total PCURR Input</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.total_pcurr_input | int }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-inbox fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Total RQC2 Good Qty</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.total_rqc2_good | int }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Overall RTY</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.overall_rty }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-line fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Active Projects</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.active_projects }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-project-diagram fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Charts Row -->
    <div class="row mb-4">
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">RTY Trend</h6>
                    <div class="dropdown no-arrow">
                        <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                        </a>
                        <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                            <div class="dropdown-header">Actions:</div>
                            <a class="dropdown-item" href="#">Export Data</a>
                            <a class="dropdown-item" href="#">Add to Report</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Something else here</a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="rtyTrendChart" height="100"></canvas>
                </div>
            </div>
        </div>
        
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Project Distribution</h6>
                </div>
                <div class="card-body">
                    <canvas id="projectDistributionChart" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Quick Actions -->
    <div class="row">
        <div class="col-lg-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Quick Actions</h6>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-md-3 mb-4">
                            <a href="{{ url_for('dashboard.auto_data') }}" class="btn-action">
                                <div class="icon-circle bg-primary">
                                    <i class="fas fa-bolt text-white"></i>
                                </div>
                                <div class="mt-3">
                                    <h5>Auto Data</h5>
                                    <p class="text-muted">View real-time data</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 mb-4">
                            <a href="{{ url_for('dashboard.project_specific') }}" class="btn-action">
                                <div class="icon-circle bg-success">
                                    <i class="fas fa-project-diagram text-white"></i>
                                </div>
                                <div class="mt-3">
                                    <h5>Project Specific</h5>
                                    <p class="text-muted">Analyze by project</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 mb-4">
                            <a href="{{ url_for('dashboard.model_specific') }}" class="btn-action">
                                <div class="icon-circle bg-info">
                                    <i class="fas fa-cogs text-white"></i>
                                </div>
                                <div class="mt-3">
                                    <h5>Model Specific</h5>
                                    <p class="text-muted">Filter by model</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 mb-4">
                            <a href="#" class="btn-action">
                                <div class="icon-circle bg-warning">
                                    <i class="fas fa-file-export text-white"></i>
                                </div>
                                <div class="mt-3">
                                    <h5>Export Reports</h5>
                                    <p class="text-muted">Download data</p>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Recent Activity -->
    <div class="row">
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Recent Activity</h6>
                </div>
                <div class="card-body">
                    <div class="timeline">
                        <div class="timeline-item">
                            <div class="timeline-marker bg-primary"></div>
                            <div class="timeline-content">
                                <span class="timeline-time">10:30 AM</span>
                                <h6 class="timeline-title">Project Alpha RTY updated</h6>
                                <p class="timeline-text">RTY increased from 89.2% to 91.5%</p>
                            </div>
                        </div>
                        <div class="timeline-item">
                            <div class="timeline-marker bg-success"></div>
                            <div class="timeline-content">
                                <span class="timeline-time">9:15 AM</span>
                                <h6 class="timeline-title">New issue resolved</h6>
                                <p class="timeline-text">Station 3 NTF issue has been resolved</p>
                            </div>
                        </div>
                        <div class="timeline-item">
                            <div class="timeline-marker bg-warning"></div>
                            <div class="timeline-content">
                                <span class="timeline-time">Yesterday</span>
                                <h6 class="timeline-title">Weekly report generated</h6>
                                <p class="timeline-text">Weekly performance report is now available</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Top Performing Projects</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Project</th>
                                    <th>RTY</th>
                                    <th>Trend</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Project X</td>
                                    <td>96.8%</td>
                                    <td><i class="fas fa-arrow-up text-success"></i></td>
                                    <td><span class="badge bg-success">Excellent</span></td>
                                </tr>
                                <tr>
                                    <td>Project Y</td>
                                    <td>94.2%</td>
                                    <td><i class="fas fa-arrow-up text-success"></i></td>
                                    <td><span class="badge bg-success">Good</span></td>
                                </tr>
                                <tr>
                                    <td>Project Z</td>
                                    <td>91.5%</td>
                                    <td><i class="fas fa-minus text-warning"></i></td>
                                    <td><span class="badge bg-warning">Average</span></td>
                                </tr>
                                <tr>
                                    <td>Project A</td>
                                    <td>89.7%</td>
                                    <td><i class="fas fa-arrow-down text-danger"></i></td>
                                    <td><span class="badge bg-danger">Needs Attention</span></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1" aria-labelledby="loadingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Refreshing data, please wait...</p>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // RTY Trend Chart
        const rtyTrendCtx = document.getElementById('rtyTrendChart').getContext('2d');
        const rtyTrendChart = new Chart(rtyTrendCtx, {
            type: 'line',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                datasets: [{
                    label: 'RTY %',
                    data: [88, 89, 90, 89.5, 91, 90.5, 91.5, 92, 91.8, 92.3, 92.1, 92.5],
                    backgroundColor: 'rgba(78, 115, 223, 0.05)',
                    borderColor: 'rgba(78, 115, 223, 1)',
                    pointBackgroundColor: 'rgba(78, 115, 223, 1)',
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: 'rgba(78, 115, 223, 1)',
                    tension: 0.3,
                    fill: true
                }]
            },
            options: {
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: false,
                        min: 85,
                        max: 100,
                        ticks: {
                            callback: function(value) {
                                return value + '%';
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return context.dataset.label + ': ' + context.parsed.y + '%';
                            }
                        }
                    }
                }
            }
        });
        
        // Project Distribution Chart
        const projectDistributionCtx = document.getElementById('projectDistributionChart').getContext('2d');
        const projectDistributionChart = new Chart(projectDistributionCtx, {
            type: 'doughnut',
            data: {
                labels: ['Project A', 'Project B', 'Project C', 'Project D', 'Others'],
                datasets: [{
                    data: [30, 25, 20, 15, 10],
                    backgroundColor: [
                        'rgba(78, 115, 223, 0.8)',
                        'rgba(28, 200, 138, 0.8)',
                        'rgba(54, 185, 204, 0.8)',
                        'rgba(255, 193, 7, 0.8)',
                        'rgba(231, 74, 59, 0.8)'
                    ],
                    borderColor: [
                        'rgba(78, 115, 223, 1)',
                        'rgba(28, 200, 138, 1)',
                        'rgba(54, 185, 204, 1)',
                        'rgba(255, 193, 7, 1)',
                        'rgba(231, 74, 59, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
        
        // Update last updated time
        function updateLastUpdatedTime() {
            const now = new Date();
            const timeString = now.getHours().toString().padStart(2, '0') + ':' + now.getMinutes().toString().padStart(2, '0');
            document.getElementById('last-updated').textContent = timeString;
        }
        
        updateLastUpdatedTime();
        setInterval(updateLastUpdatedTime, 60000); // Update every minute
        
        // Refresh dashboard button
        document.getElementById('refresh-dashboard').addEventListener('click', function() {
            const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
            loadingModal.show();
            
            // Simulate data refresh
            setTimeout(function() {
                location.reload();
            }, 1500);
        });
    });
</script>
{% endblock %}


template/dashboard/model_specific.html



{% extends "base.html" %}

{% block content %}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">Model-Specific FPY Report</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ url_for('dashboard.index') }}">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Model Specific</li>
                </ol>
            </nav>
        </div>
        <div>
            <button class="btn btn-primary" id="refresh-btn">
                <i class="fas fa-sync-alt me-2"></i>Refresh Data
            </button>
        </div>
    </div>
    
    <!-- Filter Form -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Model Selection</h6>
        </div>
        <div class="card-body">
            <form method="POST" id="model-form">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="model_name" class="form-label">Model Name</label>
                        <div class="input-group">
                            <input type="text" class="form-control" name="model_name" id="model_name" 
                                   value="{{ selected_model }}" list="model-list" required>
                            <datalist id="model-list">
                                {% for model in models %}
                                <option value="{{ model.model_name }}">{{ model.model_name }} ({{ model.brand }} - {{ model.technology }})</option>
                                {% endfor %}
                            </datalist>
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" 
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-chevron-down"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" id="model-dropdown" style="max-height: 300px; overflow-y: auto;">
                                {% for model in models %}
                                <li><a class="dropdown-item model-item" href="#" data-model="{{ model.model_name }}" 
                                       data-goal="{{ model.goal }}">{{ model.model_name }} ({{ model.brand }} - {{ model.technology }})</a></li>
                                {% endfor %}
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label for="station_type" class="form-label">Station Type</label>
                        <select class="form-select" name="station_type" id="station_type">
                            <option value="BE" {% if station_type=="BE" %}selected{% endif %}>BE</option>
                            <option value="FT" {% if station_type=="FT" %}selected{% endif %}>FT</option>
                            <option value="ICT" {% if station_type=="ICT" %}selected{% endif %}>ICT</option>
                        </select>
                    </div>
                    <div class="col-md-2 mb-3">
                        <label for="start_date" class="form-label">Start Date</label>
                        <input type="datetime-local" class="form-control" name="start_date" id="start_date"
                               value="{{ start_date }}" required>
                    </div>
                    <div class="col-md-2 mb-3">
                        <label for="end_date" class="form-label">End Date</label>
                        <input type="datetime-local" class="form-control" name="end_date" id="end_date"
                               value="{{ end_date }}" required>
                    </div>
                    <div class="col-md-1 mb-3 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <label for="rty_goal" class="form-label">RTY Goal (%)</label>
                        <div class="input-group">
                            <input type="number" class="form-control" name="rty_goal" id="rty_goal" 
                                   value="{{ rty_goal }}" step="0.1" min="0" max="100" required>
                            <div class="input-group-text">
                                <span id="goal-source">Manual</span>
                            </div>
                        </div>
                        <input type="hidden" id="auto-goal" value="">
                    </div>
                    <div class="col-md-9 mb-3 d-flex align-items-end">
                        {% if selected_model %}
                        <div class="dropdown">
                            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="exportDropdown"
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-file-export me-1"></i> Export Model
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="exportDropdown">
                                <li><a class="dropdown-item"
                                        href="/export-excel-model?model_name={{ selected_model }}&station_type={{ station_type }}&start_date={{ start_date }}&end_date={{ end_date }}&rty_goal={{ rty_goal }}">Export
                                        as Excel</a></li>
                                <li><a class="dropdown-item"
                                        href="/export-pdf-model?model_name={{ selected_model }}&station_type={{ station_type }}&start_date={{ start_date }}&end_date={{ end_date }}&rty_goal={{ rty_goal }}">Export
                                        as PDF</a></li>
                            </ul>
                        </div>
                        {% endif %}
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    {% if selected_model %}
    <!-- Model Info Card -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Model: {{ selected_model }}</h6>
            <div class="btn-group" role="group">
                <a href="/export-excel-model?model_name={{ selected_model }}&station_type={{ station_type }}&start_date={{ start_date }}&end_date={{ end_date }}&rty_goal={{ rty_goal }}" class="btn btn-outline-primary">
                    <i class="fas fa-file-excel me-1"></i> Excel
                </a>
                <a href="/export-pdf-model?model_name={{ selected_model }}&station_type={{ station_type }}&start_date={{ start_date }}&end_date={{ end_date }}&rty_goal={{ rty_goal }}" class="btn btn-outline-primary">
                    <i class="fas fa-file-pdf me-1"></i> PDF
                </a>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    {% if data and "rty" in data[0] %}
                    {% set actual_rty = data[0]["rty"] %}
                    {% if actual_rty %}
                    {% set actual_rty_val = actual_rty.replace('%', '') | float %}
                    {% if actual_rty_val < rty_goal %}
                    <div class="alert alert-warning" role="alert">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="fas fa-exclamation-triangle fa-2x"></i>
                            </div>
                            <div>
                                <h5 class="alert-heading">RTY Goal Not Met</h5>
                                <p class="mb-0">Actual RTY: <strong>{{ actual_rty_val }}%</strong> | Goal: <strong>{{ rty_goal }}%</strong></p>
                            </div>
                        </div>
                    </div>
                    {% else %}
                    <div class="alert alert-success" role="alert">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="fas fa-check-circle fa-2x"></i>
                            </div>
                            <div>
                                <h5 class="alert-heading">RTY Goal Met</h5>
                                <p class="mb-0">Actual RTY: <strong>{{ actual_rty_val }}%</strong> | Goal: <strong>{{ rty_goal }}%</strong></p>
                            </div>
                        </div>
                    </div>
                    {% endif %}
                    {% endif %}
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
    {% endif %}
    
    {% if data %}
    <!-- FPY Data Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">FPY Data</h6>
            <div class="dropdown no-arrow">
                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                    <div class="dropdown-header">Actions:</div>
                    <a class="dropdown-item" href="#" id="toggle-columns">Toggle Columns</a>
                    <a class="dropdown-item" href="#" id="reset-table">Reset View</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="modelTable" class="table table-striped table-hover" style="width:100%">
                    {% if data and data[0] %}
                    <thead>
                        <tr>
                            {% set headers = data[0].keys() %}
                            {% for col in headers %}
                            <th>{{ column_headers[col] }}</th>
                            {% endfor %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for row in data %}
                        <tr>
                            {% for col in headers %}
                            <td>{{ row[col] }}</td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </tbody>
                    {% else %}
                    <p>No data available</p>
                    {% endif %}
                </table>
            </div>
        </div>
    </div>
    {% endif %}
    
    {% if failed_stations %}
    <!-- Failed Stations Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Stations Not Meeting NTF/DER Goals</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="goalTable" class="table table-striped table-hover" style="width:100%">
                    <thead>
                        <tr>
                            <th>Station</th>
                            <th>Metric</th>
                            <th>Actual (%)</th>
                            <th>Goal (%)</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for s in failed_stations %}
                        <tr>
                            <td>{{ s[0] }}</td>
                            <td>{{ s[1] }}</td>
                            <td>{{ s[2] }}</td>
                            <td>{{ s[3] }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    {% endif %}
    
    {% if data %}
    <!-- All Stations Analysis -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">All Stations Analysis</h6>
        </div>
        <div class="card-body">
            {% for row in data %}
            {% set station = row.station %}
            {% set ntf_val = row.ntf.replace('%', '') | float if row.ntf else 0 %}
            {% set der_val = row.der.replace('%', '') | float if row.der else 0 %}
            {% set ntf_goal = Config.NTF_GOALS.get(station, 0) %}
            {% set der_goal = Config.DER_GOALS.get(station, 0) %}

            <div class="mb-4">
                <div class="accordion" id="stationAnalysisAccordion{{ loop.index }}">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="stationHeading{{ loop.index }}">
                            <button class="accordion-button {% if loop.index > 1 %}collapsed{% endif %}" type="button"
                                data-bs-toggle="collapse" data-bs-target="#stationCollapse{{ loop.index }}"
                                aria-expanded="{% if loop.index == 1 %}true{% else %}false{% endif %}"
                                aria-controls="stationCollapse{{ loop.index }}">
                                <strong>{{ station }} Analysis</strong>
                                <span class="ms-2">
                                    {% if ntf_goal > 0 %}
                                    <span class="badge {% if ntf_val <= ntf_goal %}bg-success{% else %}bg-danger{% endif %}">
                                        NTF: {{ ntf_val }}% / {{ ntf_goal }}%
                                    </span>
                                    {% endif %}
                                    {% if der_goal > 0 %}
                                    <span class="badge {% if der_val <= der_goal %}bg-success{% else %}bg-danger{% endif %}">
                                        DER: {{ der_val }}% / {{ der_goal }}%
                                    </span>
                                    {% endif %}
                                </span>
                            </button>
                        </h2>
                        <div id="stationCollapse{{ loop.index }}"
                            class="accordion-collapse collapse {% if loop.index == 1 %}show{% endif %}"
                            aria-labelledby="stationHeading{{ loop.index }}"
                            data-bs-parent="#stationAnalysisAccordion{{ loop.index }}">
                            <div class="accordion-body">
                                <div class="row mb-3">
                                    <div class="col-md-3">
                                        <p><strong>RTY:</strong> {{ row.rty }}</p>
                                    </div>
                                    <div class="col-md-3">
                                        <p><strong>Input:</strong> {{ row.inPut }}</p>
                                    </div>
                                    <div class="col-md-3">
                                        <p><strong>Pass:</strong> {{ row.pass }}</p>
                                    </div>
                                    <div class="col-md-3">
                                        <p><strong>Fail:</strong> {{ row.fail }}</p>
                                    </div>
                                </div>

                                {% if ntf_goal > 0 %}
                                <h5 class="mt-3">NTF Analysis</h5>
                                <div class="table-responsive">
                                    <table id="ntfTable{{ loop.index }}"
                                        class="table table-striped table-hover analysis-table" style="width:100%">
                                        <thead>
                                            <tr>
                                                <th>Computer Name</th>
                                                <th>Qty</th>
                                                <th>Top Faults</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {% set ntf_details = get_ntf_details_for_station(selected_model, station,
                                            station_type, start_date, end_date) %}
                                            {% if ntf_details and ntf_details.top_computers %}
                                            {% for comp, count in ntf_details.top_computers.items() %}
                                            <tr>
                                                <td>{{ comp }}</td>
                                                <td>{{ count }}</td>
                                                <td>
                                                    {% if ntf_details.top_faults_by_computer and
                                                    ntf_details.top_faults_by_computer[comp] %}
                                                    <ol class="mb-0">
                                                        {% for fault in ntf_details.top_faults_by_computer[comp] %}
                                                        <li>{{ fault[0] }} → {{ fault[1] }}</li>
                                                        {% endfor %}
                                                    </ol>
                                                    {% else %}
                                                    No fault data available.
                                                    {% endif %}
                                                </td>
                                            </tr>
                                            {% endfor %}
                                            {% else %}
                                            <tr>
                                                <td colspan="3" class="text-center">No NTF data available</td>
                                            </tr>
                                            {% endif %}
                                        </tbody>
                                    </table>
                                </div>
                                {% endif %}

                                {% if der_goal > 0 %}
                                <h5 class="mt-3">DER Analysis</h5>
                                <div class="table-responsive">
                                    <table id="derTable{{ loop.index }}"
                                        class="table table-striped table-hover analysis-table" style="width:100%">
                                        <thead>
                                            <tr>
                                                <th>Symptom</th>
                                                <th>Qty</th>
                                                <th>Responsibility</th>
                                                <th>Qty</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {% set der_details = get_der_details_for_station(selected_model, station,
                                            station_type, start_date, end_date) %}
                                            {% if der_details and der_details.top_symptoms and
                                            der_details.top_responsibilities %}
                                            {% for i in range(3) %}
                                            <tr>
                                                <td>
                                                    {% if i < der_details.top_symptoms|length %}
                                                        {{ der_details.top_symptoms[i].Symptoms }}
                                                    {% endif %}
                                                </td>
                                                <td>
                                                    {% if i < der_details.top_symptoms|length %}
                                                        {{ der_details.top_symptoms[i].Count }}
                                                    {% endif %}
                                                </td>
                                                <td>
                                                    {% if i < der_details.top_responsibilities|length %}
                                                        {{ der_details.top_responsibilities[i].Responsibility }}
                                                    {% endif %}
                                                </td>
                                                <td>
                                                    {% if i < der_details.top_responsibilities|length %}
                                                        {{ der_details.top_responsibilities[i].Count }}
                                                    {% endif %}
                                                </td>
                                            </tr>
                                            {% endfor %}
                                            {% else %}
                                            <tr>
                                                <td colspan="4" class="text-center">No DER data available</td>
                                            </tr>
                                            {% endif %}
                                        </tbody>
                                    </table>
                                </div>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
    {% endif %}
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1" aria-labelledby="loadingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Refreshing data, please wait...</p>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize DataTables with destroy option to prevent reinitialization
        let modelTable;
        let stationGoalsTable;
        let goalTable;

        function initDataTables() {
            // Destroy existing DataTables if they exist
            if (modelTable) {
                modelTable.destroy();
            }
            if (stationGoalsTable) {
                stationGoalsTable.destroy();
            }
            if (goalTable) {
                goalTable.destroy();
            }

            // Initialize modelTable
            modelTable = $('#modelTable').DataTable({
                responsive: true,
                paging: false,
                searching: false,
                ordering: true,
                info: false,
                destroy: true
            });

            // Initialize stationGoalsTable
            stationGoalsTable = $('#stationGoalsTable').DataTable({
                responsive: true,
                paging: false,
                searching: false,
                ordering: true,
                info: false,
                destroy: true
            });

            // Initialize goalTable
            goalTable = $('#goalTable').DataTable({
                responsive: true,
                paging: false,
                searching: false,
                ordering: true,
                info: false,
                destroy: true
            });

            // Initialize analysis tables
            $('.analysis-table').each(function() {
                const tableId = $(this).attr('id');
                if (tableId && $.fn.DataTable.isDataTable('#' + tableId)) {
                    $('#' + tableId).DataTable().destroy();
                }

                // Check if the table has a "No data available" row
                const hasNoDataRow = $(this).find('td[colspan]').length > 0;

                $(this).DataTable({
                    responsive: true,
                    paging: false,
                    searching: false,
                    ordering: !hasNoDataRow,  // Disable sorting if no data
                    info: false,
                    destroy: true,
                    "columnDefs": [
                        { "targets": '_all', "defaultContent": "-" }  // Fill empty cells with "-"
                    ]
                });
            });
        }

        // Initialize DataTables on page load
        initDataTables();

        // Model selection functionality
        const modelInput = document.getElementById('model_name');
        const modelDropdown = document.getElementById('model-dropdown');
        const rtyGoalInput = document.getElementById('rty_goal');
        const goalSource = document.getElementById('goal-source');
        const autoGoalInput = document.getElementById('auto-goal');
        
        // Model dropdown item click handler
        document.querySelectorAll('.model-item').forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                const modelName = this.getAttribute('data-model');
                const modelGoal = this.getAttribute('data-goal');
                
                // Set the model input value
                modelInput.value = modelName;
                
                // Set the goal if available
                if (modelGoal && modelGoal !== 'NA') {
                    rtyGoalInput.value = parseFloat(modelGoal.replace('%', ''));
                    goalSource.textContent = 'Auto';
                    autoGoalInput.value = modelGoal;
                } else {
                    goalSource.textContent = 'Manual';
                    autoGoalInput.value = '';
                }
                
                // Close the dropdown
                const dropdown = new bootstrap.Dropdown(modelDropdown.querySelector('.dropdown-toggle'));
                dropdown.hide();
            });
        });
        
        // Model input change handler
        modelInput.addEventListener('input', function() {
            const modelName = this.value;
            
            // Find the model in the list
            const modelItem = document.querySelector(`.model-item[data-model="${modelName}"]`);
            
            if (modelItem) {
                const modelGoal = modelItem.getAttribute('data-goal');
                
                // Set the goal if available
                if (modelGoal && modelGoal !== 'NA') {
                    rtyGoalInput.value = parseFloat(modelGoal.replace('%', ''));
                    goalSource.textContent = 'Auto';
                    autoGoalInput.value = modelGoal;
                } else {
                    goalSource.textContent = 'Manual';
                    autoGoalInput.value = '';
                }
            } else {
                goalSource.textContent = 'Manual';
                autoGoalInput.value = '';
            }
        });
        
        // Manual goal input handler
        rtyGoalInput.addEventListener('input', function() {
            goalSource.textContent = 'Manual';
            autoGoalInput.value = '';
        });

        // Refresh button functionality
        document.getElementById('refresh-btn').addEventListener('click', function() {
            const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
            loadingModal.show();

            // Simulate data refresh
            setTimeout(function() {
                location.reload();
            }, 1500);
        });

        // Set max date for datetime inputs to current date/time
        const now = new Date();
        const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000)
            .toISOString().slice(0, 16);

        const startInput = document.getElementById('start_date');
        const endInput = document.getElementById('end_date');

        if (startInput && !startInput.value) {
            startInput.value = localDateTime;
        }

        if (endInput && !endInput.value) {
            endInput.value = localDateTime;
        }

        startInput.setAttribute('max', localDateTime);
        endInput.setAttribute('max', localDateTime);
        
        // Initialize auto goal if available
        {% if auto_goal %}
        rtyGoalInput.value = {{ auto_goal }};
        goalSource.textContent = 'Auto';
        autoGoalInput.value = '{{ auto_goal }}%';
        {% endif %}
    });
</script>
{% endblock %}



templates/dashboard/project_specific.html:


{% extends "base.html" %}

{% block content %}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">Project-Specific FPY Report</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ url_for('dashboard.index') }}">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Project Specific</li>
                </ol>
            </nav>
        </div>
        <div>
            <button class="btn btn-primary" id="refresh-btn">
                <i class="fas fa-sync-alt me-2"></i>Refresh Data
            </button>
        </div>
    </div>
    
    <!-- Filter Form -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Project Selection</h6>
        </div>
        <div class="card-body">
            <form method="POST" id="project-form">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="project" class="form-label">Select Project</label>
                        <select class="form-select" name="project" id="project" required>
                            <option value="" disabled selected>-- Select a project --</option>
                            {% for p in projects %}
                            <option value="{{ p }}" {% if p == selected_project %}selected{% endif %}>{{ p }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label for="rty_goal" class="form-label">RTY Goal (%)</label>
                        <div class="input-group">
                            <input type="number" class="form-control" name="rty_goal" id="rty_goal" 
                                   value="{{ rty_goal }}" step="0.1" min="0" max="100" required>
                            <div class="input-group-text">
                                <span id="goal-source">Manual</span>
                            </div>
                        </div>
                        <input type="hidden" id="auto-goal" value="">
                    </div>
                    <div class="col-md-3 mb-3 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="fas fa-search me-2"></i>View Report
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    {% if selected_project %}
    <!-- Project Info Card -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Project: {{ selected_project }}</h6>
            <div class="btn-group" role="group">
                <a href="/export-excel?project={{ selected_project }}&rty_goal={{ rty_goal }}" class="btn btn-outline-primary">
                    <i class="fas fa-file-excel me-1"></i> Excel
                </a>
                <a href="/export-pdf?project={{ selected_project }}&rty_goal={{ rty_goal }}" class="btn btn-outline-primary">
                    <i class="fas fa-file-pdf me-1"></i> PDF
                </a>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    {% if data and "rty" in data[0] %}
                    {% set actual_rty = data[0]["rty"] %}
                    {% if actual_rty %}
                    {% set actual_rty_val = actual_rty.replace('%', '') | float %}
                    {% if actual_rty_val < rty_goal %}
                    <div class="alert alert-warning" role="alert">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="fas fa-exclamation-triangle fa-2x"></i>
                            </div>
                            <div>
                                <h5 class="alert-heading">RTY Goal Not Met</h5>
                                <p class="mb-0">Actual RTY: <strong>{{ actual_rty_val }}%</strong> | Goal: <strong>{{ rty_goal }}%</strong></p>
                            </div>
                        </div>
                    </div>
                    {% else %}
                    <div class="alert alert-success" role="alert">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="fas fa-check-circle fa-2x"></i>
                            </div>
                            <div>
                                <h5 class="alert-heading">RTY Goal Met</h5>
                                <p class="mb-0">Actual RTY: <strong>{{ actual_rty_val }}%</strong> | Goal: <strong>{{ rty_goal }}%</strong></p>
                            </div>
                        </div>
                    </div>
                    {% endif %}
                    {% endif %}
                    {% endif %}
                </div>
                <div class="col-md-4">
                    <div class="d-flex justify-content-center">
                        <div class="position-relative" style="width: 150px; height: 150px;">
                            <canvas id="rtyGauge"></canvas>
                            <div class="position-absolute top-50 start-50 translate-middle text-center">
                                <div class="h5 mb-0" id="gauge-value">{{ data[0].rty if data else '0%' }}</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {% endif %}
    
    {% if data %}
    <!-- FPY Data Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">FPY Data</h6>
            <div class="dropdown no-arrow">
                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                    <div class="dropdown-header">Actions:</div>
                    <a class="dropdown-item" href="#" id="toggle-columns">Toggle Columns</a>
                    <a class="dropdown-item" href="#" id="reset-table">Reset View</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="projectTable" class="table table-striped table-hover" style="width:100%">
                    <thead>
                        <tr>
                            {% for col in data[0].keys() %}
                            <th>{{ column_headers[col] }}</th>
                            {% endfor %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for row in data %}
                        <tr>
                            {% for val in row.values() %}
                            <td>{{ val }}</td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    {% endif %}
    
    {% if failed_stations %}
    <!-- Failed Stations Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Stations Not Meeting NTF/DER Goals</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="goalTable" class="table table-striped table-hover" style="width:100%">
                    <thead>
                        <tr>
                            <th>Station</th>
                            <th>Metric</th>
                            <th>Actual (%)</th>
                            <th>Goal (%)</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for s in failed_stations %}
                        <tr>
                            <td>{{ s[0] }}</td>
                            <td>{{ s[1] }}</td>
                            <td>{{ s[2] }}</td>
                            <td>{{ s[3] }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    {% endif %}
    
    {% if fail_details %}
    <!-- Failure Analysis -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Top Failure Analysis</h6>
        </div>
        <div class="card-body">
            {% for detail in fail_details %}
            <div class="mb-4">
                <div class="accordion" id="failureAccordion{{ loop.index }}">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="heading{{ loop.index }}">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse{{ loop.index }}" aria-expanded="true" aria-controls="collapse{{ loop.index }}">
                                <strong>{{ detail.station }} — {{ detail.metric }} Analysis</strong>
                            </button>
                        </h2>
                        <div id="collapse{{ loop.index }}" class="accordion-collapse collapse show" aria-labelledby="heading{{ loop.index }}" data-bs-parent="#failureAccordion{{ loop.index }}">
                            <div class="accordion-body">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <p><strong>Actual:</strong> {{ detail.actual }}%</p>
                                    </div>
                                    <div class="col-md-6">
                                        <p><strong>Goal:</strong> {{ detail.goal }}%</p>
                                    </div>
                                </div>
                                
                                {% if detail.metric == "NTF" %}
                                <h5 class="mt-3">Top 3 Computers & Faults</h5>
                                <div class="table-responsive">
                                    <table id="ntfTable{{ loop.index }}" class="table table-striped table-hover analysis-table" style="width:100%">
                                        <thead>
                                            <tr>
                                                <th>Computer Name</th>
                                                <th>Qty</th>
                                                <th>Top Faults</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {% for comp, count in detail.top_computers.items() %}
                                            <tr>
                                                <td>{{ comp }}</td>
                                                <td>{{ count }}</td>
                                                <td>
                                                    {% if detail.top_faults_by_computer[comp] %}
                                                    <ol class="mb-0">
                                                        {% for fault in detail.top_faults_by_computer[comp] %}
                                                        <li>{{ fault[0] }} → {{ fault[1] }}</li>
                                                        {% endfor %}
                                                    </ol>
                                                    {% else %}
                                                    No fault data available.
                                                    {% endif %}
                                                </td>
                                            </tr>
                                            {% endfor %}
                                        </tbody>
                                    </table>
                                </div>
                                {% else %}
                                <h5 class="mt-3">Top 3 Symptoms & Responsibilities</h5>
                                <div class="table-responsive">
                                    <table id="derTable{{ loop.index }}" class="table table-striped table-hover analysis-table" style="width:100%">
                                        <thead>
                                            <tr>
                                                <th>Symptom</th>
                                                <th>Qty</th>
                                                <th>Responsibility</th>
                                                <th>Qty</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {% for i in range(3) %}
                                            <tr>
                                                <td>
                                                    {% if i < detail.top_symptoms|length %}
                                                        {{ detail.top_symptoms[i].Symptoms }}
                                                    {% endif %}
                                                </td>
                                                <td>
                                                    {% if i < detail.top_symptoms|length %}
                                                        {{ detail.top_symptoms[i].Count }}
                                                    {% endif %}
                                                </td>
                                                <td>
                                                    {% if i < detail.top_responsibilities|length %}
                                                        {{ detail.top_responsibilities[i].Responsibility }}
                                                    {% endif %}
                                                </td>
                                                <td>
                                                    {% if i < detail.top_responsibilities|length %}
                                                        {{ detail.top_responsibilities[i].Count }}
                                                    {% endif %}
                                                </td>
                                            </tr>
                                            {% endfor %}
                                        </tbody>
                                    </table>
                                </div>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
    {% endif %}
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1" aria-labelledby="loadingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Refreshing data, please wait...</p>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize DataTables with destroy option to prevent reinitialization
        let projectTable;
        let goalTable;
        
        function initDataTables() {
            // Destroy existing DataTables if they exist
            if (projectTable) {
                projectTable.destroy();
            }
            if (goalTable) {
                goalTable.destroy();
            }
            
            // Initialize projectTable
            projectTable = $('#projectTable').DataTable({
                responsive: true,
                paging: false,
                searching: false,
                ordering: true,
                info: false,
                destroy: true
            });
            
            // Initialize goalTable
            goalTable = $('#goalTable').DataTable({
                responsive: true,
                paging: false,
                searching: false,
                ordering: true,
                info: false,
                destroy: true
            });
            
            // Initialize analysis tables
            $('.analysis-table').each(function() {
                if ($.fn.DataTable.isDataTable(this)) {
                    $(this).DataTable().destroy();
                }
                $(this).DataTable({
                    responsive: true,
                    paging: false,
                    searching: false,
                    ordering: true,
                    info: false,
                    destroy: true
                });
            });
        }
        
        // Initialize DataTables on page load
        initDataTables();
        
        // Project selection handler
        const projectSelect = document.getElementById('project');
        const rtyGoalInput = document.getElementById('rty_goal');
        const goalSource = document.getElementById('goal-source');
        const autoGoalInput = document.getElementById('auto-goal');
        
        projectSelect.addEventListener('change', function() {
            const projectName = this.value;
            
            // Fetch project goal via AJAX
            fetch(`/api/project-goal?project=${projectName}`)
                .then(response => response.json())
                .then(data => {
                    if (data.goal && data.goal !== 'NA') {
                        const goalValue = parseFloat(data.goal.replace('%', ''));
                        rtyGoalInput.value = goalValue;
                        goalSource.textContent = 'Auto';
                        autoGoalInput.value = data.goal;
                    } else {
                        goalSource.textContent = 'Manual';
                        autoGoalInput.value = '';
                    }
                })
                .catch(error => {
                    console.error('Error fetching project goal:', error);
                    goalSource.textContent = 'Manual';
                    autoGoalInput.value = '';
                });
        });
        
        // Manual goal input handler
        rtyGoalInput.addEventListener('input', function() {
            goalSource.textContent = 'Manual';
            autoGoalInput.value = '';
        });
        
        // Initialize auto goal if available
        {% if auto_goal %}
        rtyGoalInput.value = {{ auto_goal }};
        goalSource.textContent = 'Auto';
        autoGoalInput.value = '{{ auto_goal }}%';
        {% endif %}
        
        // Initialize RTY Gauge Chart if data is available
        {% if data and "rty" in data[0] %}
        const rtyGaugeCtx = document.getElementById('rtyGauge').getContext('2d');
        const actualRty = parseFloat('{{ data[0].rty.replace("%", "") }}');
        const goalRty = parseFloat('{{ rty_goal }}');
        
        const rtyGaugeChart = new Chart(rtyGaugeCtx, {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: [actualRty, 100 - actualRty],
                    backgroundColor: [
                        actualRty >= goalRty ? 'rgba(40, 167, 69, 0.8)' : 'rgba(220, 53, 69, 0.8)',
                        'rgba(233, 236, 239, 0.8)'
                    ],
                    borderWidth: 0
                }]
            },
            options: {
                circumference: 180,
                rotation: 270,
                cutout: '75%',
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        enabled: false
                    }
                }
            }
        });
        {% endif %}
    });
</script>
{% endblock %}


templates/dashboard/rty_analysis_report.html:

{% extends "base.html" %}

{% block content %}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">RTY Goal Analysis Report</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ url_for('dashboard.index') }}">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">RTY Analysis</li>
                </ol>
            </nav>
        </div>
        <div class="d-flex align-items-center">
            <div class="me-3">
                <span class="text-muted">Report Time:</span>
                <span class="fw-bold">{{ current_time }}</span>
            </div>
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-primary" id="export-excel">
                    <i class="fas fa-file-excel me-1"></i> Excel
                </button>
                <button type="button" class="btn btn-outline-primary" id="export-pdf">
                    <i class="fas fa-file-pdf me-1"></i> PDF
                </button>
            </div>
        </div>
    </div>

    <!-- Executive Summary -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">Executive Summary</h6>
            <div class="dropdown no-arrow">
                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown"
                    aria-expanded="false">
                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                    aria-labelledby="dropdownMenuLink">
                    <div class="dropdown-header">Actions:</div>
                    <a class="dropdown-item" href="#" id="refresh-data">Refresh Data</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-primary shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Models
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">{{ summary_data.total_models }}
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-mobile-alt fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-warning shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Models Not
                                        Meeting Goal</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">{{
                                        summary_data.models_not_meeting_goal }}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-exclamation-triangle fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-danger shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">Compliance
                                        Rate</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">{{
                                        "%.1f"|format(summary_data.compliance_rate) }}%</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-percentage fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-info shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Avg. Gap</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">{{
                                        "%.1f"|format(summary_data.avg_gap) }}%</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-chart-line fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-xl-6 mb-4">
                    <div class="card border-left-success shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Potential
                                        Improvement</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">{{
                                        "%.0f"|format(summary_data.potential_improvement) }} units</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-arrow-up fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-6 mb-4">
                    <div class="card border-left-secondary shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-secondary text-uppercase mb-1">Total Input
                                        (Non-Compliant)</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">{{
                                        "%.0f"|format(summary_data.total_input) }} units</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-boxes fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Analysis by Category -->
    <div class="row mb-4">
        <!-- Technology Analysis -->
        <div class="col-xl-4 col-md-6 mb-4">
            <div class="card shadow h-100">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Analysis by Technology</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie pt-4">
                        <canvas id="techChart"></canvas>
                    </div>
                    <div class="mt-4 text-center small">
                        {% for tech, data in tech_analysis.items() %}
                        <span class="mr-2">
                            <i class="fas fa-circle"
                                style="color: {{ loop.cycle(['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b']) }}"></i>
                            {{ tech }}
                        </span>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>

        <!-- Position Analysis -->
        <div class="col-xl-4 col-md-6 mb-4">
            <div class="card shadow h-100">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Analysis by Position</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie pt-4">
                        <canvas id="positionChart"></canvas>
                    </div>
                    <div class="mt-4 text-center small">
                        {% for position, data in position_analysis.items() %}
                        <span class="mr-2">
                            <i class="fas fa-circle"
                                style="color: {{ loop.cycle(['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b']) }}"></i>
                            {{ position }}
                        </span>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>

        <!-- Brand Analysis -->
        <div class="col-xl-4 col-md-6 mb-4">
            <div class="card shadow h-100">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Analysis by Brand</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie pt-4">
                        <canvas id="brandChart"></canvas>
                    </div>
                    <div class="mt-4 text-center small">
                        {% for brand, data in brand_analysis.items() %}
                        <span class="mr-2">
                            <i class="fas fa-circle"
                                style="color: {{ loop.cycle(['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b']) }}"></i>
                            {{ brand }}
                        </span>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Detailed Model Analysis -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">Detailed Model Analysis</h6>
            <div class="dropdown no-arrow">
                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown"
                    aria-expanded="false">
                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                    aria-labelledby="dropdownMenuLink">
                    <div class="dropdown-header">Actions:</div>
                    <a class="dropdown-item" href="#" id="export-details">Export Details</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="modelAnalysisTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Model</th>
                            <th>Technology</th>
                            <th>Position</th>
                            <th>Brand</th>
                            <th>Goal</th>
                            <th>Actual RTY</th>
                            <th>Gap</th>
                            <th>Input Qty</th>
                            <th>Pass Qty</th>
                            <th>Fail Qty</th>
                            <th>NDF Qty</th>
                            <th>Impact</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for model in models_not_meeting_goal %}
                        <tr>
                            <td>{{ model.project }}</td>
                            <td>{{ model.technology }}</td>
                            <td>{{ model.position }}</td>
                            <td>{{ model.brand }}</td>
                            <td>{{ "%.1f"|format(model.goal) }}%</td>
                            <td>{{ "%.1f"|format(model.actual_rty) }}%</td>
                            <td>{{ "%.1f"|format(model.gap) }}%</td>
                            <td>{{ model.total_input }}</td>
                            <td>{{ model.total_pass }}</td>
                            <td>{{ model.total_fail }}</td>
                            <td>{{ model.total_ntf }}</td>
                            <td>
                                {% set impact = (model.gap / 100) * model.total_input %}
                                {{ "%.0f"|format(impact) }} units
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Recommendations -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Smart Industry Recommendations</h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-12">
                    <h5 class="font-weight-bold text-primary mb-3">Priority Actions</h5>
                    <ol>
                        {% if models_not_meeting_goal %}
                        {% set top_model = models_not_meeting_goal[0] %}
                        <li>
                            <strong>Focus on {{ top_model.project }} ({{ top_model.technology }} {{ top_model.position
                                }})</strong> -
                            This model has the largest RTY gap of {{ "%.1f"|format(top_model.gap) }}%.
                            Addressing this could improve {{ "%.0f"|format((top_model.gap / 100) *
                            top_model.total_input) }} units.
                        </li>
                        {% endif %}

                        {% if tech_analysis|length > 1 %}
                        <li>
                            <strong>Technology Focus</strong> -
                            {% set max_tech = tech_analysis.items()|max(attribute='1.count') %}
                            {{ max_tech[0] }} technology has the most models ({{ max_tech[1].count }}) not meeting
                            goals.
                            Consider technology-wide improvements.
                        </li>
                        {% endif %}

                        {% if position_analysis|length > 1 %}
                        <li>
                            <strong>Position Analysis</strong> -
                            {% set max_position = position_analysis.items()|max(attribute='1.count') %}
                            {{ max_position[0] }} position has {{ max_position[1].count }} models underperforming.
                            Review position-specific processes.
                        </li>
                        {% endif %}

                        <li>
                            <strong>Process Optimization</strong> -
                            Implement real-time monitoring systems to identify production issues as they occur,
                            reducing the average gap of {{ "%.1f"|format(summary_data.avg_gap) }}% across all models.
                        </li>

                        <li>
                            <strong>Quality Control Enhancement</strong> -
                            Focus on reducing NG (No Good) rates which directly impact RTY.
                            Target a {{ "%.1f"|format(summary_data.avg_gap/2) }}% improvement in the next quarter.
                        </li>
                    </ol>

                    <h5 class="font-weight-bold text-primary mt-4 mb-3">Long-term Strategic Initiatives</h5>
                    <ul>
                        <li>
                            <strong>Digital Transformation</strong> -
                            Implement Industry 4.0 technologies for predictive quality control and real-time process
                            adjustments.
                        </li>
                        <li>
                            <strong>Root Cause Analysis</strong> -
                            Establish a systematic approach to identify and eliminate root causes of quality issues.
                        </li>
                        <li>
                            <strong>Continuous Improvement Culture</strong> -
                            Foster a culture of continuous improvement with regular reviews and employee engagement.
                        </li>
                        <li>
                            <strong>Supply Chain Integration</strong> -
                            Work closely with suppliers to ensure component quality meets requirements.
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize DataTable
        const table = $('#modelAnalysisTable').DataTable({
            responsive: true,
            pageLength: 25,
            lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]],
            order: [[6, 'desc']], // Sort by Gap column descending
            dom: 'Bfrtip',
            buttons: [
                'copy',
                {
                    extend: 'csv',
                    title: 'RTY_Analysis_Report'
                },
                {
                    extend: 'excel',
                    title: 'RTY_Analysis_Report'
                },
                {
                    extend: 'pdf',
                    title: 'RTY_Analysis_Report',
                    orientation: 'landscape',
                    pageSize: 'A4'
                },
                'print'
            ],
            columnDefs: [
                { targets: '_all', className: 'text-center' }
            ]
        });

        // Technology Chart
        const techCtx = document.getElementById('techChart').getContext('2d');
        const techChart = new Chart(techCtx, {
            type: 'pie',
            data: {
                labels: [
                    {% for tech, data in tech_analysis.items() %}
                    "{{ tech }}",
                    {% endfor %}
                ],
        datasets: [{
            data: [
                {% for tech, data in tech_analysis.items() %}
                        {{ data.count }},
        {% endfor %}
    ],
        backgroundColor: [
        '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b'
    ],
        hoverBackgroundColor: [
        '#2e59d9', '#17a673', '#2c9faf', '#dda20a', '#be2612'
    ],
        hoverBorderColor: "rgba(234, 236, 244, 1)",
                }],
            },
        options: {
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false
            },
            tooltip: {
                callbacks: {
                    label: function (context) {
                        const label = context.label || '';
                        const value = context.raw || 0;
                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                        const percentage = Math.round((value / total) * 100);
                        return `${label}: ${value} models (${percentage}%)`;
                    }
                }
            }
        }
    }
        });

    // Position Chart
    const positionCtx = document.getElementById('positionChart').getContext('2d');
    const positionChart = new Chart(positionCtx, {
        type: 'pie',
        data: {
            labels: [
                {% for position, data in position_analysis.items() %}
                    "{{ position }}",
                    {% endfor %}
                ],
    datasets: [{
        data: [
            {% for position, data in position_analysis.items() %}
                        {{ data.count }},
    {% endfor %}
    ],
        backgroundColor: [
            '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b'
        ],
            hoverBackgroundColor: [
                '#2e59d9', '#17a673', '#2c9faf', '#dda20a', '#be2612'
            ],
                hoverBorderColor: "rgba(234, 236, 244, 1)",
                }],
            },
    options: {
        maintainAspectRatio: false,
            plugins: {
            legend: {
                display: false
            },
            tooltip: {
                callbacks: {
                    label: function(context) {
                        const label = context.label || '';
                        const value = context.raw || 0;
                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                        const percentage = Math.round((value / total) * 100);
                        return `${label}: ${value} models (${percentage}%)`;
                    }
                }
            }
        }
    }
        });

    // Brand Chart
    const brandCtx = document.getElementById('brandChart').getContext('2d');
    const brandChart = new Chart(brandCtx, {
        type: 'pie',
        data: {
            labels: [
                {% for brand, data in brand_analysis.items() %}
                    "{{ brand }}",
                    {% endfor %}
                ],
    datasets: [{
        data: [
            {% for brand, data in brand_analysis.items() %}
                        {{ data.count }},
    {% endfor %}
    ],
        backgroundColor: [
            '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b'
        ],
            hoverBackgroundColor: [
                '#2e59d9', '#17a673', '#2c9faf', '#dda20a', '#be2612'
            ],
                hoverBorderColor: "rgba(234, 236, 244, 1)",
                }],
            },
    options: {
        maintainAspectRatio: false,
            plugins: {
            legend: {
                display: false
            },
            tooltip: {
                callbacks: {
                    label: function(context) {
                        const label = context.label || '';
                        const value = context.raw || 0;
                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                        const percentage = Math.round((value / total) * 100);
                        return `${label}: ${value} models (${percentage}%)`;
                    }
                }
            }
        }
    }
        });

    // Export buttons
    document.getElementById('export-excel').addEventListener('click', function () {
        table.button('.buttons-excel').trigger();
    });

    document.getElementById('export-pdf').addEventListener('click', function () {
        table.button('.buttons-pdf').trigger();
    });

    document.getElementById('export-details').addEventListener('click', function () {
        table.button('.buttons-excel').trigger();
    });

    // Refresh data
    document.getElementById('refresh-data').addEventListener('click', function () {
        window.location.reload();
    });
    });
</script>
{% endblock %}


templates/errors/400.html:

{% extends "base.html" %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 text-center py-5">
            <h1 class="display-1">404</h1>
            <h2>Page Not Found</h2>
            <p class="lead">The page you're looking for doesn't exist.</p>
            <a href="{{ url_for('dashboard.index') }}" class="btn btn-primary mt-3">
                <i class="fas fa-home me-2"></i>Go to Dashboard
            </a>
        </div>
    </div>
</div>
{% endblock %}


templates/errors/500.html:

{% extends "base.html" %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 text-center py-5">
            <h1 class="display-1">500</h1>
            <h2>Server Error</h2>
            <p class="lead">We're sorry, but something went wrong on our end.</p>
            {% if error %}
            <div class="alert alert-danger mt-3">
                <strong>Error details:</strong> {{ error }}
            </div>
            {% endif %}
            <a href="{{ url_for('dashboard.index') }}" class="btn btn-primary mt-3">
                <i class="fas fa-home me-2"></i>Go to Dashboard
            </a>
        </div>
    </div>
</div>
{% endblock %}



templates/base.html:


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FPY Dashboard - Modern Analytics Platform</title>
    <meta name="description" content="Advanced First Pass Yield Dashboard for Manufacturing Analytics">

    <!-- Favicon -->
    <link rel="icon" href="{{ url_for('static', filename='images/favicon.ico') }}">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- DataTables CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.bootstrap5.min.css">

    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">

    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    {% block head %}{% endblock %}
</head>

<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h3><i class="fas fa-industry me-2"></i>FPY Dashboard</h3>
        </div>
        <div class="sidebar-menu">
            <a href="{{ url_for('dashboard.home') }}"
                class="menu-item {% if request.endpoint == 'dashboard.home' %}active{% endif %}">
                <i class="fas fa-home me-2"></i> Home
            </a>
            <a href="{{ url_for('dashboard.index') }}"
                class="menu-item {% if request.endpoint == 'dashboard.index' %}active{% endif %}">
                <i class="fas fa-home me-2"></i> Dashboard
            </a>
            <a href="{{ url_for('dashboard.custom_dashboard') }}"
                class="menu-item {% if request.endpoint == 'dashboard.custom_dashboard' %}active{% endif %}">
                <i class="fas fa-chart-bar me-2"></i> Custom Dashboard
            </a>
            <a href="{{ url_for('dashboard.auto_data') }}"
                class="menu-item {% if request.endpoint == 'dashboard.auto_data' %}active{% endif %}">
                <i class="fas fa-bolt me-2"></i> Auto Data
            </a>
            <a href="{{ url_for('dashboard.project_specific') }}"
                class="menu-item {% if request.endpoint == 'dashboard.project_specific' %}active{% endif %}">
                <i class="fas fa-project-diagram me-2"></i> Project Specific
            </a>
            <a href="{{ url_for('dashboard.model_specific') }}"
                class="menu-item {% if request.endpoint == 'dashboard.model_specific' %}active{% endif %}">
                <i class="fas fa-cogs me-2"></i> Model Specific
            </a>
            <a href="{{ url_for('dashboard.rty_analysis_report') }}"
                class="menu-item {% if request.endpoint == 'dashboard.model_specific' %}active{% endif %}">
                <i class="fas fa-cogs me-2"></i> RTY Analysis
            </a>
            <a href="{{ url_for('dashboard.models_rty_summary') }}"
                class="menu-item {% if request.endpoint == 'dashboard.model_specific' %}active{% endif %}">
                <i class="fas fa-cogs me-2"></i> MModels RTY Summary
            </a>
        </div>
        <div class="sidebar-footer">
            <div class="user-info">
                <div class="user-avatar">
                    <i class="fas fa-user-circle"></i>
                </div>
                <div class="user-details">
                    <div class="user-name">{{ current_user.id }}</div>
                    <div class="user-role">Analyst</div>
                </div>
            </div>
            <a href="{{ url_for('auth.logout') }}" class="logout-btn">
                <i class="fas fa-sign-out-alt me-2"></i> Logout
            </a>
        </div>
    </div>
    <!-- Add this to your navigation bar in base.html -->
<ul class="navbar-nav ms-auto">
    {% if current_user.is_authenticated %}
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-user fa-fw"></i> {{ current_user.id }}
            </a>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                <li><a class="dropdown-item" href="{{ url_for('auth.logout') }}"><i class="fas fa-sign-out-alt fa-sm fa-fw me-2 text-gray-400"></i>Logout</a></li>
            </ul>
        </li>
        
    {% else %}
        <li class="nav-item">
            <a class="nav-link" href="{{ url_for('auth.login') }}">
                <i class="fas fa-sign-in-alt"></i> Login
            </a>
        </li>
    {% endif %}
</ul>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Top Navigation -->
        <nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
            <div class="container-fluid">
                <button class="btn btn-link d-md-none" id="sidebar-toggle">
                    <i class="fas fa-bars"></i>
                </button>
                <div class="ms-auto d-flex align-items-center">
                    <div class="me-3">
                        <span class="text-muted">Last updated:</span>
                        <span class="fw-bold" id="last-updated">{{ datetime.now().strftime('%H:%M') }}</span>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-link text-dark dropdown-toggle" type="button" id="notificationDropdown"
                            data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-bell"></i>
                            <span class="badge bg-danger">3</span>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="notificationDropdown">
                            <li>
                                <h6 class="dropdown-header">Notifications</h6>
                            </li>
                            <li><a class="dropdown-item" href="#">New data available</a></li>
                            <li><a class="dropdown-item" href="#">System update scheduled</a></li>
                            <li><a class="dropdown-item" href="#">Weekly report ready</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Page Content -->
        <div class="content p-4">
            {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
            {% for category, message in messages %}
            <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            {% endfor %}
            {% endif %}
            {% endwith %}

            {% block content %}{% endblock %}
        </div>

        <!-- Footer -->
        <footer class="footer mt-auto py-3 bg-light">
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <span class="text-muted">© 2023 FPY Dashboard. All rights reserved.</span>
                    </div>
                    <div class="col-md-6 text-end">
                        <span class="text-muted">Version 2.0</span>
                    </div>
                </div>
            </div>
        </footer>
    </div>

    <!-- Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>

    <!-- DataTables JS -->
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.print.min.js"></script>

    <!-- Custom JS -->
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>

    {% block scripts %}{% endblock %}
    
</body>

</html>


templates/home.html:


{% extends "base.html" %}

{% block content %}
<div class="container-fluid">
    <!-- Hero Section -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="card border-0 shadow-lg">
                <div class="card-body text-center p-5">
                    <h1 class="display-4 fw-bold text-primary mb-4">
                        <i class="fas fa-industry me-3"></i>FPY Dashboard
                    </h1>
                    <p class="lead text-muted mb-4">
                        Advanced First Pass Yield Analytics Platform for Manufacturing Excellence
                    </p>
                    <div class="d-flex justify-content-center gap-3">
                        {% if logged_in %}
                            <a href="{{ url_for('dashboard.index') }}" class="btn btn-primary btn-lg px-4">
                                <i class="fas fa-chart-line me-2"></i>Go to Dashboard
                            </a>
                            <a href="{{ url_for('auth.logout') }}" class="btn btn-outline-danger btn-lg px-4">
                                <i class="fas fa-sign-out-alt me-2"></i>Logout
                            </a>
                        {% else %}
                            <a href="{{ url_for('dashboard.index') }}" class="btn btn-primary btn-lg px-4">
                                <i class="fas fa-chart-line me-2"></i>Go to Dashboard
                            </a>
                            <a href="{{ url_for('auth.login') }}" class="btn btn-outline-primary btn-lg px-4">
                                <i class="fas fa-sign-in-alt me-2"></i>Login
                            </a>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Features Section -->
    <div class="row mb-5">
        <div class="col-12">
            <h2 class="text-center mb-4">Key Features</h2>
        </div>
        
        <!-- Feature 1 -->
        <div class="col-lg-4 col-md-6 mb-4">
            <div class="card h-100 border-0 shadow-sm hover-shadow">
                <div class="card-body text-center p-4">
                    <div class="feature-icon bg-primary bg-opacity-10 text-primary rounded-circle mb-3">
                        <i class="fas fa-bolt fa-2x"></i>
                    </div>
                    <h4 class="card-title">Real-Time Data</h4>
                    <p class="card-text text-muted">
                        Access live FPY data updated every minute from 8:00 AM to current time, 
                        providing real-time insights into manufacturing performance.
                    </p>
                </div>
            </div>
        </div>
        
        <!-- Feature 2 -->
        <div class="col-lg-4 col-md-6 mb-4">
            <div class="card h-100 border-0 shadow-sm hover-shadow">
                <div class="card-body text-center p-4">
                    <div class="feature-icon bg-success bg-opacity-10 text-success rounded-circle mb-3">
                        <i class="fas fa-project-diagram fa-2x"></i>
                    </div>
                    <h4 class="card-title">Project Analysis</h4>
                    <p class="card-text text-muted">
                        Analyze performance by specific projects with automatic goal retrieval 
                        and detailed failure analysis for improved decision-making.
                    </p>
                </div>
            </div>
        </div>
        
        <!-- Feature 3 -->
        <div class="col-lg-4 col-md-6 mb-4">
            <div class="card h-100 border-0 shadow-sm hover-shadow">
                <div class="card-body text-center p-4">
                    <div class="feature-icon bg-info bg-opacity-10 text-info rounded-circle mb-3">
                        <i class="fas fa-cogs fa-2x"></i>
                    </div>
                    <h4 class="card-title">Model Insights</h4>
                    <p class="card-text text-muted">
                        Drill down into specific models with advanced filtering, 
                        searchable database, and comprehensive station-level analysis.
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Navigation Links Section -->
    <div class="row mb-5">
        <div class="col-12">
            <h2 class="text-center mb-4">Quick Navigation</h2>
            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="list-group list-group-flush shadow-sm">
                        <a href="{{ url_for('dashboard.index') }}" class="list-group-item list-group-item-action d-flex gap-3 py-3">
                            <i class="fas fa-tachometer-alt text-primary"></i>
                            <div class="d-flex gap-2 w-100 justify-content-between">
                                <div>
                                    <h6 class="mb-0">Dashboard Overview</h6>
                                    <p class="mb-0 opacity-75">View real-time statistics and key metrics</p>
                                </div>
                                <i class="fas fa-chevron-right opacity-25"></i>
                            </div>
                        </a>
                        <a href="{{ url_for('dashboard.auto_data') }}" class="list-group-item list-group-item-action d-flex gap-3 py-3">
                            <i class="fas fa-bolt text-primary"></i>
                            <div class="d-flex gap-2 w-100 justify-content-between">
                                <div>
                                    <h6 class="mb-0">Auto Data</h6>
                                    <p class="mb-0 opacity-75">Access live running project data</p>
                                </div>
                                <i class="fas fa-chevron-right opacity-25"></i>
                            </div>
                        </a>
                        <a href="{{ url_for('dashboard.project_specific') }}" class="list-group-item list-group-item-action d-flex gap-3 py-3">
                            <i class="fas fa-project-diagram text-primary"></i>
                            <div class="d-flex gap-2 w-100 justify-content-between">
                                <div>
                                    <h6 class="mb-0">Project-Specific Analysis</h6>
                                    <p class="mb-0 opacity-75">Analyze performance by specific projects</p>
                                </div>
                                <i class="fas fa-chevron-right opacity-25"></i>
                            </div>
                        </a>
                        <a href="{{ url_for('dashboard.model_specific') }}" class="list-group-item list-group-item-action d-flex gap-3 py-3">
                            <i class="fas fa-cogs text-primary"></i>
                            <div class="d-flex gap-2 w-100 justify-content-between">
                                <div>
                                    <h6 class="mb-0">Model-Specific Analysis</h6>
                                    <p class="mb-0 opacity-75">Filter and analyze by specific models</p>
                                </div>
                                <i class="fas fa-chevron-right opacity-25"></i>
                            </div>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- System Info Section -->
    <div class="row mb-5">
        <div class="col-12">
            <h2 class="text-center mb-4">System Information</h2>
        </div>
        
        <div class="col-lg-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title text-primary mb-3">
                        <i class="fas fa-info-circle me-2"></i>About FPY Dashboard
                    </h5>
                    <p class="card-text">
                        The FPY Dashboard is an advanced analytics platform designed to monitor 
                        and analyze First Pass Yield (FPY) metrics in manufacturing environments. 
                        It provides real-time insights into production performance, helping teams 
                        identify issues, track improvements, and make data-driven decisions.
                    </p>
                    <ul class="list-unstyled mt-3">
                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Real-time data monitoring</li>
                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Advanced filtering and search</li>
                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Comprehensive failure analysis</li>
                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Export capabilities (Excel, PDF)</li>
                        <li><i class="fas fa-check text-success me-2"></i>Mobile-responsive design</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="col-lg-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title text-primary mb-3">
                        <i class="fas fa-database me-2"></i>Data Sources
                    </h5>
                    <p class="card-text">
                        The dashboard integrates with multiple data sources to provide comprehensive insights:
                    </p>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Data Source</th>
                                    <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>MES Factory Report API</td>
                                    <td>Real-time production data</td>
                                </tr>
                                <tr>
                                    <td>SQLite Database</td>
                                    <td>Model descriptions and goals</td>
                                </tr>
                                <tr>
                                    <td>Project Management System</td>
                                    <td>Active project list</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Key Metrics Section -->
    <div class="row mb-5">
        <div class="col-12">
            <h2 class="text-center mb-4">Key Metrics Tracked</h2>
        </div>
        
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm text-center">
                <div class="card-body">
                    <div class="metric-icon bg-primary bg-opacity-10 text-primary rounded-circle mb-3">
                        <i class="fas fa-chart-line fa-2x"></i>
                    </div>
                    <h5 class="card-title">RTY (Rolling Throughput Yield)</h5>
                    <p class="card-text text-muted">
                        Overall production yield from start to finish
                    </p>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm text-center">
                <div class="card-body">
                    <div class="metric-icon bg-danger bg-opacity-10 text-danger rounded-circle mb-3">
                        <i class="fas fa-exclamation-triangle fa-2x"></i>
                    </div>
                    <h5 class="card-title">NG (No Good) Rate</h5>
                    <p class="card-text text-muted">
                        Percentage of products failing quality checks
                    </p>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm text-center">
                <div class="card-body">
                    <div class="metric-icon bg-warning bg-opacity-10 text-warning rounded-circle mb-3">
                        <i class="fas fa-check-circle fa-2x"></i>
                    </div>
                    <h5 class="card-title">NDF (No Defect Found) Rate</h5>
                    <p class="card-text text-muted">
                        Products flagged as defective but found OK on recheck
                    </p>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm text-center">
                <div class="card-body">
                    <div class="metric-icon bg-info bg-opacity-10 text-info rounded-circle mb-3">
                        <i class="fas fa-tachometer-alt fa-2x"></i>
                    </div>
                    <h5 class="card-title">Station Performance</h5>
                    <p class="card-text text-muted">
                        Detailed analysis by production station
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Contact Section -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center p-5">
                    <h4 class="card-title mb-3">Need Support?</h4>
                    <p class="card-text text-muted mb-4">
                        For technical assistance, feature requests, or to report issues, 
                        please contact our support team.
                    </p>
                    <div class="d-flex justify-content-center gap-3">
                        <a href="mailto:support@fpydashboard.com" class="btn btn-outline-primary">
                            <i class="fas fa-envelope me-2"></i>Email Support
                        </a>
                        <a href="tel:+1234567890" class="btn btn-outline-primary">
                            <i class="fas fa-phone me-2"></i>Call Support
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block head %}
<style>
    .feature-icon {
        width: 80px;
        height: 80px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
    }
    
    .metric-icon {
        width: 70px;
        height: 70px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
    }
    
    .hover-shadow {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .hover-shadow:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
    }
</style>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add smooth scrolling to all links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });
    });
</script>
{% endblock %}



templates/index.html:


{% extends "base.html" %}

{% block content %}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">Dashboard Overview</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Dashboard</li>
                </ol>
            </nav>
        </div>
        <div>
            <button class="btn btn-primary" id="refresh-dashboard">
                <i class="fas fa-sync-alt me-2"></i>Refresh Data
            </button>
        </div>
    </div>
    
    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total PCURR Input</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.total_pcurr_input | int }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-inbox fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Total RQC2 Good Qty</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.total_rqc2_good | int }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Overall RTY</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.overall_rty }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-line fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Active Projects</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.active_projects }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-project-diagram fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Charts Row -->
    <div class="row mb-4">
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">RTY Trend</h6>
                    <div class="dropdown no-arrow">
                        <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                        </a>
                        <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                            <div class="dropdown-header">Actions:</div>
                            <a class="dropdown-item" href="#">Export Data</a>
                            <a class="dropdown-item" href="#">Add to Report</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Something else here</a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="rtyTrendChart" height="100"></canvas>
                </div>
            </div>
        </div>
        
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Project Distribution</h6>
                </div>
                <div class="card-body">
                    <canvas id="projectDistributionChart" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Quick Actions -->
    <div class="row">
        <div class="col-lg-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Quick Actions</h6>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-md-3 mb-4">
                            <a href="{{ url_for('dashboard.auto_data') }}" class="btn-action">
                                <div class="icon-circle bg-primary">
                                    <i class="fas fa-bolt text-white"></i>
                                </div>
                                <div class="mt-3">
                                    <h5>Auto Data</h5>
                                    <p class="text-muted">View real-time data</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 mb-4">
                            <a href="{{ url_for('dashboard.project_specific') }}" class="btn-action">
                                <div class="icon-circle bg-success">
                                    <i class="fas fa-project-diagram text-white"></i>
                                </div>
                                <div class="mt-3">
                                    <h5>Project Specific</h5>
                                    <p class="text-muted">Analyze by project</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 mb-4">
                            <a href="{{ url_for('dashboard.model_specific') }}" class="btn-action">
                                <div class="icon-circle bg-info">
                                    <i class="fas fa-cogs text-white"></i>
                                </div>
                                <div class="mt-3">
                                    <h5>Model Specific</h5>
                                    <p class="text-muted">Filter by model</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 mb-4">
                            <a href="#" class="btn-action">
                                <div class="icon-circle bg-warning">
                                    <i class="fas fa-file-export text-white"></i>
                                </div>
                                <div class="mt-3">
                                    <h5>Export Reports</h5>
                                    <p class="text-muted">Download data</p>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Recent Activity -->
    <div class="row">
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Recent Activity</h6>
                </div>
                <div class="card-body">
                    <div class="timeline">
                        <div class="timeline-item">
                            <div class="timeline-marker bg-primary"></div>
                            <div class="timeline-content">
                                <span class="timeline-time">10:30 AM</span>
                                <h6 class="timeline-title">Project Alpha RTY updated</h6>
                                <p class="timeline-text">RTY increased from 89.2% to 91.5%</p>
                            </div>
                        </div>
                        <div class="timeline-item">
                            <div class="timeline-marker bg-success"></div>
                            <div class="timeline-content">
                                <span class="timeline-time">9:15 AM</span>
                                <h6 class="timeline-title">New issue resolved</h6>
                                <p class="timeline-text">Station 3 NTF issue has been resolved</p>
                            </div>
                        </div>
                        <div class="timeline-item">
                            <div class="timeline-marker bg-warning"></div>
                            <div class="timeline-content">
                                <span class="timeline-time">Yesterday</span>
                                <h6 class="timeline-title">Weekly report generated</h6>
                                <p class="timeline-text">Weekly performance report is now available</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Top Performing Projects</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Project</th>
                                    <th>RTY</th>
                                    <th>Trend</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Project X</td>
                                    <td>96.8%</td>
                                    <td><i class="fas fa-arrow-up text-success"></i></td>
                                    <td><span class="badge bg-success">Excellent</span></td>
                                </tr>
                                <tr>
                                    <td>Project Y</td>
                                    <td>94.2%</td>
                                    <td><i class="fas fa-arrow-up text-success"></i></td>
                                    <td><span class="badge bg-success">Good</span></td>
                                </tr>
                                <tr>
                                    <td>Project Z</td>
                                    <td>91.5%</td>
                                    <td><i class="fas fa-minus text-warning"></i></td>
                                    <td><span class="badge bg-warning">Average</span></td>
                                </tr>
                                <tr>
                                    <td>Project A</td>
                                    <td>89.7%</td>
                                    <td><i class="fas fa-arrow-down text-danger"></i></td>
                                    <td><span class="badge bg-danger">Needs Attention</span></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1" aria-labelledby="loadingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Refreshing data, please wait...</p>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // RTY Trend Chart
        const rtyTrendCtx = document.getElementById('rtyTrendChart').getContext('2d');
        const rtyTrendChart = new Chart(rtyTrendCtx, {
            type: 'line',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                datasets: [{
                    label: 'RTY %',
                    data: [88, 89, 90, 89.5, 91, 90.5, 91.5, 92, 91.8, 92.3, 92.1, 92.5],
                    backgroundColor: 'rgba(78, 115, 223, 0.05)',
                    borderColor: 'rgba(78, 115, 223, 1)',
                    pointBackgroundColor: 'rgba(78, 115, 223, 1)',
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: 'rgba(78, 115, 223, 1)',
                    tension: 0.3,
                    fill: true
                }]
            },
            options: {
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: false,
                        min: 85,
                        max: 100,
                        ticks: {
                            callback: function(value) {
                                return value + '%';
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return context.dataset.label + ': ' + context.parsed.y + '%';
                            }
                        }
                    }
                }
            }
        });
        
        // Project Distribution Chart
        const projectDistributionCtx = document.getElementById('projectDistributionChart').getContext('2d');
        const projectDistributionChart = new Chart(projectDistributionCtx, {
            type: 'doughnut',
            data: {
                labels: ['Project A', 'Project B', 'Project C', 'Project D', 'Others'],
                datasets: [{
                    data: [30, 25, 20, 15, 10],
                    backgroundColor: [
                        'rgba(78, 115, 223, 0.8)',
                        'rgba(28, 200, 138, 0.8)',
                        'rgba(54, 185, 204, 0.8)',
                        'rgba(255, 193, 7, 0.8)',
                        'rgba(231, 74, 59, 0.8)'
                    ],
                    borderColor: [
                        'rgba(78, 115, 223, 1)',
                        'rgba(28, 200, 138, 1)',
                        'rgba(54, 185, 204, 1)',
                        'rgba(255, 193, 7, 1)',
                        'rgba(231, 74, 59, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
        
        // Update last updated time
        function updateLastUpdatedTime() {
            const now = new Date();
            const timeString = now.getHours().toString().padStart(2, '0') + ':' + now.getMinutes().toString().padStart(2, '0');
            document.getElementById('last-updated').textContent = timeString;
        }
        
        updateLastUpdatedTime();
        setInterval(updateLastUpdatedTime, 60000); // Update every minute
        
        // Refresh dashboard button
        document.getElementById('refresh-dashboard').addEventListener('click', function() {
            const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
            loadingModal.show();
            
            // Simulate data refresh
            setTimeout(function() {
                location.reload();
            }, 1500);
        });
    });
</script>
{% endblock %}


utils/__init__.py:


from .api import *
from .helpers import *

__all__ = ['get_token', 'get_project_list', 'get_fpy', 'get_station_ntf_details', 'get_station_der_details', 
           'get_fpy_by_model', 'get_station_ntf_details_by_model', 'get_station_der_details_by_model',
           'get_top_n_counts', 'map_api_to_db', 'map_db_to_api']



utils/api.py:


import requests
from datetime import datetime, timedelta
from config import Config

def get_token():
    payload = {"userCode": Config.USER_CODE, "password": Config.PASSWORD, "langCode": Config.LANG_CODE}
    headers = {"Content-Type": "application/json", "Accept": "application/json"}
    resp = requests.post(Config.LOGIN_URL, json=payload, headers=headers)
    resp.raise_for_status()
    data = resp.json()
    return data["data"]

def get_project_list(token):
    today = datetime.now().strftime("%Y-%m-%d")
    headers = {"token": token, "lang-code": Config.LANG_CODE}
    params = {"stationType": "BE", "startDate": today, "endDate": today}
    resp = requests.get(Config.PROJECT_LIST_URL, headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()["data"]

def get_fpy(token, projects, start_date=None, end_date=None):
    if start_date is None or end_date is None:
        # Default behavior (current day from 8AM to now)
        now = datetime.now()
        start = now.replace(hour=8, minute=0, second=0, microsecond=0)
        end = now
    else:
        # Use provided date range
        start = start_date
        end = end_date
        
    payload = {
        "startDate": start.strftime("%Y-%m-%d %H:%M:%S"),
        "endDate": end.strftime("%Y-%m-%d %H:%M:%S"),
        "projects": projects,
        "station": ["PCURR", "AUD", "ANTWBG", "RQC", "RQC2", "MMI", "MMI2_All"],
        "stationType": "BE",
        "current": 1,
        "size": 100
    }
    headers = {"Content-Type": "application/json", "token": token, "lang-code": Config.LANG_CODE}
    resp = requests.post(Config.FPY_URL, json=payload, headers=headers)
    resp.raise_for_status()
    return resp.json()["data"]["records"]

def get_station_ntf_details(token, project, station):
    now = datetime.now()
    start = now.replace(hour=8, minute=0, second=0, microsecond=0)
    params = {
        "startDate": start.strftime("%Y-%m-%d %H:%M:%S"),
        "endDate": now.strftime("%Y-%m-%d %H:%M:%S"),
        "project": project,
        "stationName": station,
        "stationType": "BE",
        "workOrder": "",
        "lineName": "",
        "current": 1,
        "size": 1000
    }
    headers = {"token": token, "lang-code": Config.LANG_CODE}
    resp = requests.get(Config.NTF_DETAIL_URL, headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()["data"]["records"]

def get_station_der_details(token, project, station):
    end_time = datetime.now()
    start_time = end_time - timedelta(days=1)
    params = {
        "startDate": start_time.strftime("%Y-%m-%d %H:%M:%S"),
        "endDate": end_time.strftime("%Y-%m-%d %H:%M:%S"),
        "project": project,
        "stationName": station,
        "stationType": "BE",
        "workOrder": "",
        "lineName": "",
        "current": 1,
        "size": 1000
    }
    headers = {"token": token, "lang-code": Config.LANG_CODE, "Accept": "application/json"}
    resp = requests.get(Config.DER_DETAIL_URL, params=params, headers=headers)
    resp.raise_for_status()
    return resp.json()["data"]["records"]

def get_fpy_by_model(token, model_name, station_type, start_date, end_date):
    payload = {
        "startDate": start_date,
        "endDate": end_date,
        "projects": [model_name],
        "station": ["PCURR", "AUD", "ANTWBG", "RQC", "RQC2", "MMI", "MMI2_All"],
        "stationType": station_type,
        "current": 1,
        "size": 100
    }
    headers = {"Content-Type": "application/json", "token": token, "lang-code": Config.LANG_CODE}
    resp = requests.post(Config.FPY_URL, json=payload, headers=headers)
    resp.raise_for_status()
    return resp.json()["data"]["records"]

def get_station_ntf_details_by_model(token, model_name, station, station_type, start_date, end_date):
    params = {
        "startDate": start_date,
        "endDate": end_date,
        "project": model_name,
        "stationName": station,
        "stationType": station_type,
        "workOrder": "",
        "lineName": "",
        "current": 1,
        "size": 1000
    }
    headers = {"token": token, "lang-code": Config.LANG_CODE}
    resp = requests.get(Config.NTF_DETAIL_URL, headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()["data"]["records"]

def get_station_der_details_by_model(token, model_name, station, station_type, start_date, end_date):
    params = {
        "startDate": start_date,
        "endDate": end_date,
        "project": model_name,
        "stationName": station,
        "stationType": station_type,
        "workOrder": "",
        "lineName": "",
        "current": 1,
        "size": 1000
    }
    headers = {"token": token, "lang-code": Config.LANG_CODE, "Accept": "application/json"}
    resp = requests.get(Config.DER_DETAIL_URL, params=params, headers=headers)
    resp.raise_for_status()
    return resp.json()["data"]["records"]



    utils/helpers.py:


    import pandas as pd

def get_top_n_counts(df, col, n=3):
    if col not in df.columns or df.empty:
        return pd.DataFrame(columns=[col, "Count"])
    counts = df[col].value_counts().head(n).reset_index()
    counts.columns = [col, "Count"]
    return counts

def map_api_to_db(api_record):
    """Map API record to database model fields"""
    return {
        'project': api_record.get('project'),
        'station': api_record.get('station'),
        'inPut': int(api_record.get('inPut', 0)),
        'pass_qty': int(api_record.get('pass', 0)),  # Map 'pass' from API to 'pass_qty' in DB
        'fail': int(api_record.get('fail', 0)),
        'notFail': int(api_record.get('notFail', 0)),
        'der': float(api_record.get('der', 0).replace('%', '')) if api_record.get('der') else 0,
        'ntf': float(api_record.get('ntf', 0).replace('%', '')) if api_record.get('ntf') else 0,
        'rty': float(api_record.get('rty', 0).replace('%', '')) if api_record.get('rty') else 0,
        'py': float(api_record.get('py', 0).replace('%', '')) if api_record.get('py') else 0
    }

def map_db_to_api(db_record):
    """Map database model to API record format"""
    return {
        'project': db_record.project,
        'station': db_record.station,
        'inPut': db_record.inPut,
        'pass': db_record.pass_qty,  # Map 'pass_qty' from DB to 'pass' in API
        'fail': db_record.fail,
        'notFail': db_record.notFail,
        'der': f"{db_record.der}%",
        'ntf': f"{db_record.ntf}%",
        'rty': f"{db_record.rty}%",
        'py': f"{db_record.py}%"
    }



    app.py:


    from flask import Flask, render_template, request, send_file, jsonify, Blueprint, redirect, url_for
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
import pandas as pd
import io
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill
from datetime import datetime, timedelta
import os
import json
import threading
import atexit  # Added this import
from apscheduler.schedulers.background import BackgroundScheduler
from utils.api import *
from utils.helpers import *
from config import Config
from routes import auth_bp, dashboard_bp, api_bp
from extensions import db
from models import FPYAutoData

# Initialize Flask App
app = Flask(__name__)
app.secret_key = os.environ.get("SECRET_KEY", "default_secret_key")

# Configure SQLite database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///fpy_dashboard.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialize database
db.init_app(app)

# Create database tables
with app.app_context():
    db.create_all()

# Login Manager
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "auth.login"

# User class for authentication
class User:
    def __init__(self, id):
        self.id = id
    
    def is_authenticated(self):
        return True
    
    def is_active(self):
        return True
    
    def is_anonymous(self):
        return False
    
    def get_id(self):
        return self.id

@login_manager.user_loader
def load_user(user_id):
    return User(user_id)

# Add context processor to make datetime, Config, and column_headers available to templates
@app.context_processor
def inject_variables():
    column_headers = {
        "project": "Model",
        "station": "Station",
        "inPut": "Input Qty",
        "pass": "Good Qty",
        "fail": "NG",
        "notFail": "NDF",
        "der": "NG Rate",
        "ntf": "NDF Rate",
        "rty": "RTY",
        "py": "PY"
    }
    return dict(datetime=datetime, Config=Config, column_headers=column_headers)

# Register Blueprints
app.register_blueprint(auth_bp)
app.register_blueprint(dashboard_bp)
app.register_blueprint(api_bp)

# Background scheduler for auto data refresh
scheduler = BackgroundScheduler()

def fetch_and_store_auto_data():
    """Function to fetch and store auto data"""
    try:
        with app.app_context():
            print(f"[{datetime.now()}] Starting auto data refresh...")
            
            # Get token
            token = get_token()
            
            # Get project list
            projects = get_project_list(token)
            
            # Get today's data from 08:00AM to now
            now = datetime.now()
            start = now.replace(hour=8, minute=0, second=0, microsecond=0)
            
            # Get FPY data
            fpy_data_raw = get_fpy(token, projects, start, now)
            
            # Process data
            desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty", "py"]
            processed_data = []
            
            for row in fpy_data_raw:
                # Add PY column (empty for now)
                row["py"] = ""
                processed_data.append({col: row.get(col, "") for col in desired_columns})
            
            # Store data in database
            # First, clear existing data
            FPYAutoData.query.delete()
            
            # Then add new data
            for record in processed_data:
                auto_data = FPYAutoData(
                    project=record.get("project"),
                    station=record.get("station"),
                    inPut=record.get("inPut"),
                    pass_qty=record.get("pass"),
                    fail=record.get("fail"),
                    notFail=record.get("notFail"),
                    der=record.get("der"),
                    ntf=record.get("ntf"),
                    rty=record.get("rty"),
                    py=record.get("py"),
                    last_updated=datetime.now()
                )
                db.session.add(auto_data)
            
            db.session.commit()
            print(f"[{datetime.now()}] Auto data refresh completed. {len(processed_data)} records stored.")
            
    except Exception as e:
        print(f"[{datetime.now()}] Error in auto data refresh: {str(e)}")
        import traceback
        traceback.print_exc()

# Schedule the job to run every 15 minutes
scheduler.add_job(
    func=fetch_and_store_auto_data,
    trigger="interval",
    minutes=15,
    id='auto_data_refresh_job',
    name='Refresh auto data every 15 minutes',
    replace_existing=True
)

# Start the scheduler
scheduler.start()

# Error Handlers
@app.errorhandler(404)
def page_not_found(e):
    current_time = datetime.now().strftime('%H:%M')
    return render_template('errors/404.html', current_time=current_time), 404

@app.errorhandler(500)
def internal_server_error(e):
    current_time = datetime.now().strftime('%H:%M')
    return render_template('errors/500.html', error=str(e), current_time=current_time), 500

# Make sure to shut down the scheduler when exiting the app
atexit.register(lambda: scheduler.shutdown())




@app.route('/')
def root():
    return redirect(url_for('dashboard.home'))

# Main entry point
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000, debug=True)



config.py:


class Config:
    BASE_URL = "http://10.61.248.12:8099/mesFactoryReport"
    LOGIN_URL = f"{BASE_URL}/validUserInfoByMES"
    PROJECT_LIST_URL = f"{BASE_URL}/linePlanQty/queryDayPlanProject"
    FPY_URL = f"{BASE_URL}/fpyReport/projectFpyReport"
    NTF_DETAIL_URL = f"{BASE_URL}/fpyReport/queryNoFailDetail"
    DER_DETAIL_URL = f"{BASE_URL}/fpyReport/queryFailDetail"

    USER_CODE = "rti02"
    PASSWORD = "888888"
    LANG_CODE = "en"

    NTF_GOALS = {"PCURR": 0.50, "AUD": 1.50, "ANTWBG": 2.00}
    DER_GOALS = {"RQC": 1.20, "RQC2": 0.10, "MMI": 0.35, "MMI2_All": 0.50, "ANTWBG": 0.70, "AUD": 0.70}



    extensions.py:

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


init_database.py:


from app import app
from init_db import init_db

if __name__ == '__main__':
    with app.app_context():
        init_db()


models.py:


from extensions import db
from datetime import datetime

class ModelDescription(db.Model):
    __tablename__ = 'model_description'
    id = db.Column(db.Integer, primary_key=True)
    model_name = db.Column(db.String(100), unique=True, nullable=False)
    technology = db.Column(db.String(50))
    position = db.Column(db.String(50))
    brand = db.Column(db.String(50))
    goal = db.Column(db.String(10))  # e.g., "93%"

class ProjectGoal(db.Model):
    __tablename__ = 'project_goal'
    id = db.Column(db.Integer, primary_key=True)
    project_name = db.Column(db.String(100), unique=True, nullable=False)
    goal = db.Column(db.String(10))  # e.g., "93%"

class FPYData(db.Model):
    __tablename__ = 'fpy_data'
    id = db.Column(db.Integer, primary_key=True)
    project = db.Column(db.String(100), nullable=False)
    station = db.Column(db.String(50), nullable=False)
    inPut = db.Column(db.Integer, nullable=False)
    pass_qty = db.Column(db.Integer, nullable=False)  # Changed from 'pass' to 'pass_qty'
    fail = db.Column(db.Integer, nullable=False)
    notFail = db.Column(db.Integer, nullable=False)
    der = db.Column(db.Float)  # NG Rate
    ntf = db.Column(db.Float)  # NDF Rate
    rty = db.Column(db.Float)  # RTY
    py = db.Column(db.Float)  # PY
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

class FPYAutoData(db.Model):
    __tablename__ = 'fpy_auto_data'
    id = db.Column(db.Integer, primary_key=True)
    project = db.Column(db.String(100), nullable=False)
    station = db.Column(db.String(50), nullable=False)
    inPut = db.Column(db.Integer, nullable=False)
    pass_qty = db.Column(db.Integer, nullable=False)
    fail = db.Column(db.Integer, nullable=False)
    notFail = db.Column(db.Integer, nullable=False)
    der = db.Column(db.Float)  # NG Rate
    ntf = db.Column(db.Float)  # NDF Rate
    rty = db.Column(db.Float)  # RTY
    py = db.Column(db.Float)  # PY
    last_updated = db.Column(db.DateTime, default=datetime.utcnow)



    init_db.py:


    def init_db():
    """Initialize database data"""
    try:
        from models import ModelDescription, ProjectGoal, FPYAutoData
        from extensions import db
        
        print("Initializing database data...")
        
        # Check model data
        model_count = ModelDescription.query.count()
        print(f"Current model count: {model_count}")
        
        if model_count == 0:
            print("Importing model data...")
            models_data = [
                {"model_name": "A666L_F069", "technology": "4G", "position": "MID", "brand": "Itel", "goal": "93%"},
                {"model_name": "P663LN_F069", "technology": "4G", "position": "MID", "brand": "Itel", "goal": "93%"},
                {"model_name": "X6526_V658A", "technology": "4G", "position": "MID", "brand": "Infinix", "goal": "93%"},
                {"model_name": "BG7_XE674S", "technology": "4G", "position": "MID", "brand": "Tecno", "goal": "93%"},
                {"model_name": "it9020_LS2002", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "P661N_H334", "technology": "5G", "position": "MID", "brand": "Itel", "goal": "93%"},
                {"model_name": "it2165S_G1808", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "LI9_H335", "technology": "5G", "position": "MID", "brand": "Tecno", "goal": "93%"},
                {"model_name": "X6851_P865A", "technology": "5G", "position": "HIGH", "brand": "Infinix", "goal": "90%"},
                {"model_name": "S667LN_H6933", "technology": "4G", "position": "LOW", "brand": "Itel", "goal": "93%"},
                {"model_name": "it2175P_G1808", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "CL7k_P765A", "technology": "5G", "position": "HIGH", "brand": "Tecno", "goal": "90%"},
                {"model_name": "X6851B_P865A", "technology": "5G", "position": "HIGH", "brand": "Infinix", "goal": "90%"},
                {"model_name": "X6871_H962", "technology": "5G", "position": "HIGH", "brand": "Infinix", "goal": "90%"},
                {"model_name": "CL7_P765A", "technology": "5G", "position": "HIGH", "brand": "Tecno", "goal": "90%"},
                {"model_name": "CL9_H961", "technology": "5G", "position": "HIGH", "brand": "Tecno", "goal": "90%"},
                {"model_name": "X6852_P775A", "technology": "5G", "position": "HIGH", "brand": "Infinix", "goal": "90%"},
                {"model_name": "KJ8_H338", "technology": "5G", "position": "MID", "brand": "Tecno", "goal": "93%"},
                {"model_name": "A667LP_SQ373", "technology": "4G", "position": "LOW", "brand": "Itel", "goal": "93%"},
                {"model_name": "X6838_P755A", "technology": "5G", "position": "MID", "brand": "Infinix", "goal": "93%"},
                {"model_name": "A669L_SQ375", "technology": "4G", "position": "LOW", "brand": "Itel", "goal": "93%"},
                {"model_name": "Flip1_MA2432", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "X6861_H963", "technology": "5G", "position": "FLAGSHIP", "brand": "Infinix", "goal": "90%"},
                {"model_name": "KL4_F201", "technology": "4G", "position": "LOW", "brand": "Tecno", "goal": "93%"},
                {"model_name": "AE10_H833", "technology": "5G", "position": "FOLD", "brand": "Tecno", "goal": "90%"},
                {"model_name": "AE11_H911", "technology": "5G", "position": "FOLD", "brand": "Tecno", "goal": "90%"},
                {"model_name": "X6720_H353", "technology": "5G", "position": "MID", "brand": "Infinix", "goal": "93%"},
                {"model_name": "KL8_H353", "technology": "5G", "position": "LOW", "brand": "Tecno", "goal": "93%"},
                {"model_name": "A671LC_SQ378", "technology": "4G", "position": "MID", "brand": "Itel", "goal": "93%"},
                {"model_name": "X6962_H911", "technology": "5G", "position": "FOLD", "brand": "Infinix", "goal": "90%"},
                {"model_name": "KL8h_H353", "technology": "5G", "position": "LOW", "brand": "Tecno", "goal": "93%"},
                {"model_name": "KD68CS_KD68CS", "technology": "2G", "position": "FP", "brand": "Nexgo", "goal": "NA"},
                {"model_name": "KL4H_XE679", "technology": "4G", "position": "LOW", "brand": "Tecno", "goal": "93%"},
                {"model_name": "IT5032_ET2436", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "P120_M2001", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "Ace2p_G1808", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "It5361_MM61117", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "It2175P_G1808", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "P450_MM61120", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "ACE2L-H_GS1819", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "It5262_WDS076", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "It-5095_EY2820", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "X6532C_MF380", "technology": "4G", "position": "MID", "brand": "Infinix", "goal": "93%"},
                {"model_name": "A671N_H353", "technology": "5G", "position": "MID", "brand": "Itel", "goal": "93%"},
                {"model_name": "it3010A_ET1827", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "BG6m (Export)_F069M", "technology": "4G", "position": "LOW", "brand": "Tecno", "goal": "93%"},
                {"model_name": "KL5 (Export)_XK678", "technology": "4G", "position": "LOW", "brand": "Tecno", "goal": "93%"},
                {"model_name": "X6857B_H782", "technology": "5G", "position": "HIGH", "brand": "Infinix", "goal": "90%"},
                {"model_name": "CL7 (Export)Eithopia_P765A", "technology": "5G", "position": "HIGH", "brand": "Tecno", "goal": "90%"},
                {"model_name": "X6870_H781", "technology": "5G", "position": "HIGH", "brand": "Infinix", "goal": "90%"},
                {"model_name": "A6610L_SQ372", "technology": "4G", "position": "LOW", "brand": "Itel", "goal": "93%"},
                {"model_name": "It-5608N_G1808", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "It-9310_LS2801", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "it2181A_ET1828", "technology": "2G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "A6610L(Export) Latin America_SQ372", "technology": "4G", "position": "LOW", "brand": "Itel", "goal": "93%"},
                {"model_name": "LJ8_H781", "technology": "5G", "position": "LOW", "brand": "Tecno", "goal": "93%"},
                {"model_name": "M3501_M819N", "technology": "5G", "position": "MID", "brand": "INDKAL", "goal": "93%"},
                {"model_name": "KL5-V_XK678", "technology": "5G", "position": "LOW", "brand": "Tecno", "goal": "93%"},
                {"model_name": "C671L_SM382", "technology": "4G", "position": "LOW", "brand": "Itel", "goal": "93%"},
                {"model_name": "LJ8K_H781", "technology": "5G", "position": "LOW", "brand": "Tecno", "goal": "93%"},
                {"model_name": "X6525_F069", "technology": "4G", "position": "LOW", "brand": "Infinix", "goal": "93%"},
                {"model_name": "A663L_V450A", "technology": "4G", "position": "LOW", "brand": "Itel", "goal": "93%"},
                {"model_name": "KM4_F151", "technology": "4G", "position": "LOW", "brand": "Tecno", "goal": "93%"},
                {"model_name": "LJ7_H782", "technology": "5G", "position": "MID", "brand": "Tecno", "goal": "93%"},
                {"model_name": "X6726_P526A", "technology": "5G", "position": "MID", "brand": "Infinix", "goal": "93%"},
                {"model_name": "V230_GK2819", "technology": "2G", "position": "FP", "brand": "VILLAON", "goal": "NA"},
                {"model_name": "V220_GY2433", "technology": "2G", "position": "FP", "brand": "VILLAON", "goal": "NA"},
                {"model_name": "IT9120_SL24B", "technology": "4G", "position": "FP", "brand": "Itel", "goal": "NA"},
                {"model_name": "X6725_F151", "technology": "4G", "position": "LOW", "brand": "Infinix", "goal": "93%"},
                {"model_name": "X6876_H786", "technology": "5G", "position": "HIGH", "brand": "Infinix", "goal": "90%"},
                {"model_name": "X6730_H358", "technology": "5G", "position": "MID", "brand": "Infinix", "goal": "93%"},
                {"model_name": "KM8_H358", "technology": "5G", "position": "MID", "brand": "Tecno", "goal": "93%"},
                {"model_name": "KM9_H357", "technology": "5G", "position": "MID", "brand": "Tecno", "goal": "93%"}
            ]
            
            # Add model data to database
            added_count = 0
            for model_data in models_data:
                existing_model = ModelDescription.query.filter_by(model_name=model_data["model_name"]).first()
                if not existing_model:
                    model = ModelDescription(
                        model_name=model_data["model_name"],
                        technology=model_data["technology"],
                        position=model_data["position"],
                        brand=model_data["brand"],
                        goal=model_data["goal"]
                    )
                    db.session.add(model)
                    added_count += 1
                else:
                    print(f"Model {model_data['model_name']} already exists, skipping")
            
            db.session.commit()
            print(f"Successfully imported {added_count} model records to database")
        else:
            print(f"Database already has {model_count} model records, skipping initialization")
        
        # Check project goal data
        project_count = ProjectGoal.query.count()
        print(f"Current project goal count: {project_count}")
        
        if project_count == 0:
            print("Importing project goal data...")
            projects_data = [
                {"project_name": "A666L_F069", "goal": "93%"},
                {"project_name": "P663LN_F069", "goal": "93%"},
                {"project_name": "X6526_V658A", "goal": "93%"},
                {"project_name": "BG7_XE674S", "goal": "93%"},
                {"project_name": "it9020_LS2002", "goal": "NA"},
                {"project_name": "P661N_H334", "goal": "93%"},
                {"project_name": "it2165S_G1808", "goal": "NA"},
                {"project_name": "LI9_H335", "goal": "93%"},
                {"project_name": "X6851_P865A", "goal": "90%"},
                {"project_name": "S667LN_H6933", "goal": "93%"},
                {"project_name": "it2175P_G1808", "goal": "NA"},
                {"project_name": "CL7k_P765A", "goal": "90%"},
                {"project_name": "X6851B_P865A", "goal": "90%"},
                {"project_name": "X6871_H962", "goal": "90%"},
                {"project_name": "CL7_P765A", "goal": "90%"},
                {"project_name": "CL9_H961", "goal": "90%"},
                {"project_name": "X6852_P775A", "goal": "90%"},
                {"project_name": "KJ8_H338", "goal": "93%"},
                {"project_name": "A667LP_SQ373", "goal": "93%"},
                {"project_name": "X6838_P755A", "goal": "93%"},
                {"project_name": "A669L_SQ375", "goal": "93%"},
                {"project_name": "Flip1_MA2432", "goal": "NA"},
                {"project_name": "X6861_H963", "goal": "90%"},
                {"project_name": "KL4_F201", "goal": "93%"},
                {"project_name": "AE10_H833", "goal": "90%"},
                {"project_name": "AE11_H911", "goal": "90%"},
                {"project_name": "X6720_H353", "goal": "93%"},
                {"project_name": "KL8_H353", "goal": "93%"},
                {"project_name": "A671LC_SQ378", "goal": "93%"},
                {"project_name": "X6962_H911", "goal": "90%"},
                {"project_name": "KL8h_H353", "goal": "93%"},
                {"project_name": "KD68CS_KD68CS", "goal": "NA"},
                {"project_name": "KL4H_XE679", "goal": "93%"},
                {"project_name": "IT5032_ET2436", "goal": "NA"},
                {"project_name": "P120_M2001", "goal": "NA"},
                {"project_name": "Ace2p_G1808", "goal": "NA"},
                {"project_name": "It5361_MM61117", "goal": "NA"},
                {"project_name": "It2175P_G1808", "goal": "NA"},
                {"project_name": "P450_MM61120", "goal": "NA"},
                {"project_name": "ACE2L-H_GS1819", "goal": "NA"},
                {"project_name": "It5262_WDS076", "goal": "NA"},
                {"project_name": "It-5095_EY2820", "goal": "NA"},
                {"project_name": "X6532C_MF380", "goal": "93%"},
                {"project_name": "A671N_H353", "goal": "93%"},
                {"project_name": "it3010A_ET1827", "goal": "NA"},
                {"project_name": "BG6m (Export)_F069M", "goal": "93%"},
                {"project_name": "KL5 (Export)_XK678", "goal": "93%"},
                {"project_name": "X6857B_H782", "goal": "90%"},
                {"project_name": "CL7 (Export)Eithopia_P765A", "goal": "90%"},
                {"project_name": "X6870_H781", "goal": "90%"},
                {"project_name": "A6610L_SQ372", "goal": "93%"},
                {"project_name": "It-5608N_G1808", "goal": "NA"},
                {"project_name": "It-9310_LS2801", "goal": "NA"},
                {"project_name": "it2181A_ET1828", "goal": "NA"},
                {"project_name": "A6610L(Export) Latin America_SQ372", "goal": "93%"},
                {"project_name": "LJ8_H781", "goal": "93%"},
                {"project_name": "M3501_M819N", "goal": "93%"},
                {"project_name": "KL5-V_XK678", "goal": "93%"},
                {"project_name": "C671L_SM382", "goal": "93%"},
                {"project_name": "LJ8K_H781", "goal": "93%"},
                {"project_name": "X6525_F069", "goal": "93%"},
                {"project_name": "A663L_V450A", "goal": "93%"},
                {"project_name": "KM4_F151", "goal": "93%"},
                {"project_name": "LJ7_H782", "goal": "93%"},
                {"project_name": "X6726_P526A", "goal": "93%"},
                {"project_name": "V230_GK2819", "goal": "NA"},
                {"project_name": "V220_GY2433", "goal": "NA"},
                {"project_name": "IT9120_SL24B", "goal": "NA"},
                {"project_name": "X6725_F151", "goal": "93%"},
                {"project_name": "X6876_H786", "goal": "90%"},
                {"project_name": "X6730_H358", "goal": "93%"},
                {"project_name": "KM8_H358", "goal": "93%"},
                {"project_name": "KM9_H357", "goal": "93%"}
            ]
            
            # Add project goal data to database
            for project_data in projects_data:
                project = ProjectGoal(
                    project_name=project_data["project_name"],
                    goal=project_data["goal"]
                )
                db.session.add(project)
            
            db.session.commit()
            print(f"Successfully imported {len(projects_data)} project goal records to database")
        else:
            print(f"Database already has {project_count} project goal records, skipping initialization")
        
        print("Database data initialization completed successfully!")
        
    except Exception as e:
        print(f"Database initialization error: {e}")
        import traceback
        traceback.print_exc()
        raise

if __name__ == '__main__':
    init_db()