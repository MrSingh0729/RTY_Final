model_specific.html:


{% extends "base.html" %}

{% block content %}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">Model-Specific FPY Report</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ url_for('dashboard.index') }}">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Model Specific</li>
                </ol>
            </nav>
        </div>
        <div>
            <button class="btn btn-primary" id="refresh-btn">
                <i class="fas fa-sync-alt me-2"></i>Refresh Data
            </button>
        </div>
    </div>
    
    <!-- Filter Form -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Model Selection</h6>
        </div>
        <div class="card-body">
            <form method="POST" id="model-form">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="model_name" class="form-label">Model Name</label>
                        <input type="text" class="form-control" name="model_name" id="model_name" value="{{ selected_model }}" required>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label for="station_type" class="form-label">Station Type</label>
                        <select class="form-select" name="station_type" id="station_type">
                            <option value="BE" {% if station_type == "BE" %}selected{% endif %}>BE</option>
                            <option value="FT" {% if station_type == "FT" %}selected{% endif %}>FT</option>
                            <option value="ICT" {% if station_type == "ICT" %}selected{% endif %}>ICT</option>
                        </select>
                    </div>
                    <div class="col-md-2 mb-3">
                        <label for="start_date" class="form-label">Start Date</label>
                        <input type="datetime-local" class="form-control" name="start_date" id="start_date" value="{{ start_date }}" required>
                    </div>
                    <div class="col-md-2 mb-3">
                        <label for="end_date" class="form-label">End Date</label>
                        <input type="datetime-local" class="form-control" name="end_date" id="end_date" value="{{ end_date }}" required>
                    </div>
                    <div class="col-md-1 mb-3 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <label for="rty_goal" class="form-label">RTY Goal (%)</label>
                        <input type="number" class="form-control" name="rty_goal" id="rty_goal" value="{{ rty_goal }}" step="0.1" min="0" max="100" required>
                    </div>
                    <div class="col-md-9 mb-3 d-flex align-items-end">
                        {% if selected_model %}
                        <div class="dropdown">
                            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="exportDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-file-export me-1"></i> Export Model
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="exportDropdown">
                                <li><a class="dropdown-item" href="/export-excel-model?model_name={{ selected_model }}&station_type={{ station_type }}&start_date={{ start_date }}&end_date={{ end_date }}&rty_goal={{ rty_goal }}">Export as Excel</a></li>
                                <li><a class="dropdown-item" href="/export-pdf-model?model_name={{ selected_model }}&station_type={{ station_type }}&start_date={{ start_date }}&end_date={{ end_date }}&rty_goal={{ rty_goal }}">Export as PDF</a></li>
                            </ul>
                        </div>
                        {% endif %}
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    {% if selected_model and data %}
    <!-- Model Info Card -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Model: {{ selected_model }}</h6>
            <div class="btn-group" role="group">
                <a href="/export-excel-model?model_name={{ selected_model }}&station_type={{ station_type }}&start_date={{ start_date }}&end_date={{ end_date }}&rty_goal={{ rty_goal }}" class="btn btn-outline-primary">
                    <i class="fas fa-file-excel me-1"></i> Excel
                </a>
                <a href="/export-pdf-model?model_name={{ selected_model }}&station_type={{ station_type }}&start_date={{ start_date }}&end_date={{ end_date }}&rty_goal={{ rty_goal }}" class="btn btn-outline-primary">
                    <i class="fas fa-file-pdf me-1"></i> PDF
                </a>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    {% if data and "rty" in data[0] %}
                    {% set actual_rty = data[0]["rty"] %}
                    {% if actual_rty %}
                    {% set actual_rty_val = actual_rty.replace('%', '') | float %}
                    {% if actual_rty_val < rty_goal %}
                    <div class="alert alert-warning" role="alert">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="fas fa-exclamation-triangle fa-2x"></i>
                            </div>
                            <div>
                                <h5 class="alert-heading">RTY Goal Not Met</h5>
                                <p class="mb-0">Actual RTY: <strong>{{ actual_rty_val }}%</strong> | Goal: <strong>{{ rty_goal }}%</strong></p>
                            </div>
                        </div>
                    </div>
                    {% else %}
                    <div class="alert alert-success" role="alert">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="fas fa-check-circle fa-2x"></i>
                            </div>
                            <div>
                                <h5 class="alert-heading">RTY Goal Met</h5>
                                <p class="mb-0">Actual RTY: <strong>{{ actual_rty_val }}%</strong> | Goal: <strong>{{ rty_goal }}%</strong></p>
                            </div>
                        </div>
                    </div>
                    {% endif %}
                    {% endif %}
                    {% endif %}
                </div>
                <div class="col-md-4">
                    <div class="d-flex justify-content-center">
                        <div class="position-relative" style="width: 150px; height: 150px;">
                            <canvas id="rtyGauge"></canvas>
                            <div class="position-absolute top-50 start-50 translate-middle text-center">
                                <div class="h5 mb-0" id="gauge-value">{{ data[0].rty if data else '0%' }}</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {% endif %}
    
    {% if data %}
    <!-- FPY Data Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">FPY Data</h6>
            <div class="dropdown no-arrow">
                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                    <div class="dropdown-header">Actions:</div>
                    <a class="dropdown-item" href="#" id="toggle-columns">Toggle Columns</a>
                    <a class="dropdown-item" href="#" id="reset-table">Reset View</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="modelTable" class="table table-striped table-hover" style="width:100%">
                    <thead>
                        <tr>
                            {% for col in data[0].keys() %}
                            <th>{{ col }}</th>
                            {% endfor %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for row in data %}
                        <tr>
                            {% for val in row.values() %}
                            <td>{{ val }}</td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    {% endif %}
    
    {% if data %}
    <!-- Station Goals Status Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Station Goals Status</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="stationGoalsTable" class="table table-striped table-hover" style="width:100%">
                    <thead>
                        <tr>
                            <th>Station</th>
                            <th>RTY (%)</th>
                            <th>NTF (%)</th>
                            <th>NTF Goal (%)</th>
                            <th>NTF Status</th>
                            <th>DER (%)</th>
                            <th>DER Goal (%)</th>
                            <th>DER Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for row in data %}
                        {% set station = row.station %}
                        {% set rty_val = row.rty.replace('%', '') | float %}
                        {% set ntf_val = row.ntf.replace('%', '') | float if row.ntf else 0 %}
                        {% set der_val = row.der.replace('%', '') | float if row.der else 0 %}
                        {% set ntf_goal = Config.NTF_GOALS.get(station, 0) %}
                        {% set der_goal = Config.DER_GOALS.get(station, 0) %}
                        {% set ntf_status = "Goal Met" if ntf_val <= ntf_goal else "Goal Not Met" %}
                        {% set der_status = "Goal Met" if der_val <= der_goal else "Goal Not Met" %}
                        <tr>
                            <td>{{ station }}</td>
                            <td>{{ row.rty }}</td>
                            <td>{{ row.ntf or "0%" }}</td>
                            <td>{{ ntf_goal }}%</td>
                            <td>
                                {% if ntf_goal > 0 %}
                                <span class="badge {% if ntf_status == "Goal Met" %}bg-success{% else %}bg-danger{% endif %}">
                                    {{ ntf_status }}
                                </span>
                                {% else %}
                                <span class="badge bg-secondary">N/A</span>
                                {% endif %}
                            </td>
                            <td>{{ row.der or "0%" }}</td>
                            <td>{{ der_goal }}%</td>
                            <td>
                                {% if der_goal > 0 %}
                                <span class="badge {% if der_status == "Goal Met" %}bg-success{% else %}bg-danger{% endif %}">
                                    {{ der_status }}
                                </span>
                                {% else %}
                                <span class="badge bg-secondary">N/A</span>
                                {% endif %}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    {% endif %}
    
    {% if failed_stations %}
    <!-- Failed Stations Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Stations Not Meeting NTF/DER Goals</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="goalTable" class="table table-striped table-hover" style="width:100%">
                    <thead>
                        <tr>
                            <th>Station</th>
                            <th>Metric</th>
                            <th>Actual (%)</th>
                            <th>Goal (%)</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for s in failed_stations %}
                        <tr>
                            <td>{{ s[0] }}</td>
                            <td>{{ s[1] }}</td>
                            <td>{{ s[2] }}</td>
                            <td>{{ s[3] }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    {% endif %}
    
    {% if data %}
    <!-- All Stations Analysis -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">All Stations Analysis</h6>
        </div>
        <div class="card-body">
            {% for row in data %}
            {% set station = row.station %}
            {% set ntf_val = row.ntf.replace('%', '') | float if row.ntf else 0 %}
            {% set der_val = row.der.replace('%', '') | float if row.der else 0 %}
            {% set ntf_goal = Config.NTF_GOALS.get(station, 0) %}
            {% set der_goal = Config.DER_GOALS.get(station, 0) %}
            
            <div class="mb-4">
                <div class="accordion" id="stationAnalysisAccordion{{ loop.index }}">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="stationHeading{{ loop.index }}">
                            <button class="accordion-button {% if loop.index > 1 %}collapsed{% endif %}" type="button" data-bs-toggle="collapse" data-bs-target="#stationCollapse{{ loop.index }}" aria-expanded="{% if loop.index == 1 %}true{% else %}false{% endif %}" aria-controls="stationCollapse{{ loop.index }}">
                                <strong>{{ station }} Analysis</strong>
                                <span class="ms-2">
                                    {% if ntf_goal > 0 %}
                                    <span class="badge {% if ntf_val <= ntf_goal %}bg-success{% else %}bg-danger{% endif %}">
                                        NTF: {{ ntf_val }}% / {{ ntf_goal }}%
                                    </span>
                                    {% endif %}
                                    {% if der_goal > 0 %}
                                    <span class="badge {% if der_val <= der_goal %}bg-success{% else %}bg-danger{% endif %}">
                                        DER: {{ der_val }}% / {{ der_goal }}%
                                    </span>
                                    {% endif %}
                                </span>
                            </button>
                        </h2>
                        <div id="stationCollapse{{ loop.index }}" class="accordion-collapse collapse {% if loop.index == 1 %}show{% endif %}" aria-labelledby="stationHeading{{ loop.index }}" data-bs-parent="#stationAnalysisAccordion{{ loop.index }}">
                            <div class="accordion-body">
                                <div class="row mb-3">
                                    <div class="col-md-3">
                                        <p><strong>RTY:</strong> {{ row.rty }}</p>
                                    </div>
                                    <div class="col-md-3">
                                        <p><strong>Input:</strong> {{ row.inPut }}</p>
                                    </div>
                                    <div class="col-md-3">
                                        <p><strong>Pass:</strong> {{ row.pass }}</p>
                                    </div>
                                    <div class="col-md-3">
                                        <p><strong>Fail:</strong> {{ row.fail }}</p>
                                    </div>
                                </div>
                                
                                {% if ntf_goal > 0 %}
                                <h5 class="mt-3">NTF Analysis</h5>
                                <div class="table-responsive">
                                    <table id="ntfTable{{ loop.index }}" class="table table-striped table-hover analysis-table" style="width:100%">
                                        <thead>
                                            <tr>
                                                <th>Computer Name</th>
                                                <th>Qty</th>
                                                <th>Top Faults</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {% set ntf_details = get_ntf_details_for_station(selected_model, station, station_type, start_date, end_date) %}
                                            {% if ntf_details and ntf_details.top_computers %}
                                            {% for comp, count in ntf_details.top_computers.items() %}
                                            <tr>
                                                <td>{{ comp }}</td>
                                                <td>{{ count }}</td>
                                                <td>
                                                    {% if ntf_details.top_faults_by_computer and ntf_details.top_faults_by_computer[comp] %}
                                                    <ol class="mb-0">
                                                        {% for fault in ntf_details.top_faults_by_computer[comp] %}
                                                        <li>{{ fault[0] }} → {{ fault[1] }}</li>
                                                        {% endfor %}
                                                    </ol>
                                                    {% else %}
                                                    No fault data available.
                                                    {% endif %}
                                                </td>
                                            </tr>
                                            {% endfor %}
                                            {% else %}
                                            <tr>
                                                <td colspan="3" class="text-center">No NTF data available</td>
                                            </tr>
                                            {% endif %}
                                        </tbody>
                                    </table>
                                </div>
                                {% endif %}
                                
                                {% if der_goal > 0 %}
                                <h5 class="mt-3">DER Analysis</h5>
                                <div class="table-responsive">
                                    <table id="derTable{{ loop.index }}" class="table table-striped table-hover analysis-table" style="width:100%">
                                        <thead>
                                            <tr>
                                                <th>Symptom</th>
                                                <th>Qty</th>
                                                <th>Responsibility</th>
                                                <th>Qty</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {% set der_details = get_der_details_for_station(selected_model, station, station_type, start_date, end_date) %}
                                            {% if der_details and der_details.top_symptoms and der_details.top_responsibilities %}
                                                {% for i in range(3) %}
                                                <tr>
                                                    <td>
                                                        {% if i < der_details.top_symptoms|length %}
                                                            {{ der_details.top_symptoms[i].Symptoms }}
                                                        {% else %}
                                                            -
                                                        {% endif %}
                                                    </td>
                                                    <td>
                                                        {% if i < der_details.top_symptoms|length %}
                                                            {{ der_details.top_symptoms[i].Count }}
                                                        {% else %}
                                                            -
                                                        {% endif %}
                                                    </td>
                                                    <td>
                                                        {% if i < der_details.top_responsibilities|length %}
                                                            {{ der_details.top_responsibilities[i].Responsibility }}
                                                        {% else %}
                                                            -
                                                        {% endif %}
                                                    </td>
                                                    <td>
                                                        {% if i < der_details.top_responsibilities|length %}
                                                            {{ der_details.top_responsibilities[i].Count }}
                                                        {% else %}
                                                            -
                                                        {% endif %}
                                                    </td>
                                                </tr>
                                                {% endfor %}
                                            {% else %}
                                                <tr>
                                                    <td colspan="4" class="text-center">No DER data available</td>
                                                </tr>
                                            {% endif %}
                                        </tbody>
                                    </table>
                                </div>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
    {% endif %}
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1" aria-labelledby="loadingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Refreshing data, please wait...</p>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize DataTables with destroy option to prevent reinitialization
        let modelTable;
        let stationGoalsTable;
        let goalTable;
        
        function initDataTables() {
            // Destroy existing DataTables if they exist
            if (modelTable) {
                modelTable.destroy();
            }
            if (stationGoalsTable) {
                stationGoalsTable.destroy();
            }
            if (goalTable) {
                goalTable.destroy();
            }
            
            // Initialize modelTable
            modelTable = $('#modelTable').DataTable({
                responsive: true,
                paging: false,
                searching: false,
                ordering: true,
                info: false,
                destroy: true
            });
            
            // Initialize stationGoalsTable
            stationGoalsTable = $('#stationGoalsTable').DataTable({
                responsive: true,
                paging: false,
                searching: false,
                ordering: true,
                info: false,
                destroy: true
            });
            
            // Initialize goalTable
            goalTable = $('#goalTable').DataTable({
                responsive: true,
                paging: false,
                searching: false,
                ordering: true,
                info: false,
                destroy: true
            });
            
            // Initialize analysis tables
            $('.analysis-table').each(function() {
                const tableId = $(this).attr('id');
                if (tableId && $.fn.DataTable.isDataTable('#' + tableId)) {
                    $('#' + tableId).DataTable().destroy();
                }
                
                // Check if the table has a "No data available" row
                const hasNoDataRow = $(this).find('td[colspan]').length > 0;
                
                $(this).DataTable({
                    responsive: true,
                    paging: false,
                    searching: false,
                    ordering: !hasNoDataRow,  // Disable sorting if no data
                    info: false,
                    destroy: true,
                    "columnDefs": [
                        { "targets": '_all', "defaultContent": "-" }  // Fill empty cells with "-"
                    ]
                });
            });
        }
        
        // Initialize DataTables on page load
        initDataTables();
        
        // Refresh button functionality
        document.getElementById('refresh-btn').addEventListener('click', function() {
            const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
            loadingModal.show();
            
            // Simulate data refresh
            setTimeout(function() {
                location.reload();
            }, 1500);
        });
        
        // Set max date for datetime inputs to current date/time
        const now = new Date();
        const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000)
                                .toISOString().slice(0, 16);
        
        const startInput = document.getElementById('start_date');
        const endInput = document.getElementById('end_date');
        
        if (startInput && !startInput.value) {
            startInput.value = localDateTime;
        }
        
        if (endInput && !endInput.value) {
            endInput.value = localDateTime;
        }
        
        startInput.setAttribute('max', localDateTime);
        endInput.setAttribute('max', localDateTime);
    });
</script>
{% endblock %}



dahsboard.py:


from flask import Blueprint, render_template, request, send_file, jsonify, redirect, url_for
from flask_login import login_required
import pandas as pd
import io
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill
from datetime import datetime
from utils.api import *
from utils.helpers import *
from config import Config

dashboard_bp = Blueprint('dashboard', __name__, url_prefix='/dashboard')

@dashboard_bp.route('/')
@login_required
def index():
    current_time = datetime.now().strftime('%H:%M')
    return render_template('index.html', current_time=current_time)

@dashboard_bp.route('/auto-data')
@login_required
def auto_data():
    try:
        token = get_token()
        projects = get_project_list(token)
        fpy_data = get_fpy(token, projects)

        desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty"]
        filtered_data = [
            {col: row.get(col, "") for col in desired_columns}
            for row in fpy_data
        ]

        current_time = datetime.now().strftime('%H:%M')
        return render_template('dashboard/auto_data.html', data=filtered_data, current_time=current_time)
    except Exception as e:
        current_time = datetime.now().strftime('%H:%M')
        return render_template('errors/500.html', error=str(e), current_time=current_time)

@dashboard_bp.route('/project-specific', methods=['GET', 'POST'])
@login_required
def project_specific():
    current_time = datetime.now().strftime('%H:%M')
    try:
        token = get_token()
        projects = get_project_list(token)
        selected_project = None
        rty_goal = 90.0
        fpy_data = []
        failed_stations = []
        fail_details = []

        if request.method == 'POST':
            selected_project = request.form.get('project')
            rty_goal = float(request.form.get('rty_goal', 90.0))
            fpy_data_raw = get_fpy(token, [selected_project])

            desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty"]
            fpy_data = [
                {col: row.get(col, "") for col in desired_columns}
                for row in fpy_data_raw
            ]

            if fpy_data and "rty" in fpy_data[0]:
                try:
                    actual_rty = float(str(fpy_data[0]["rty"]).replace("%", ""))
                    if actual_rty < rty_goal:
                        for row in fpy_data:
                            station = row.get("station")
                            ntf = float(str(row.get("ntf", "0")).replace("%", "")) if row.get("ntf") else None
                            der = float(str(row.get("der", "0")).replace("%", "")) if row.get("der") else None

                            if station in Config.NTF_GOALS and ntf is not None and ntf > Config.NTF_GOALS[station]:
                                failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))
                                detail_data = get_station_ntf_details(token, selected_project, station)
                                detail_df = pd.DataFrame(detail_data)
                                detail_df = detail_df.rename(columns={
                                    "substation": "Computer Name",
                                    "sn": "SN",
                                    "symptomEnName": "Fault Description"
                                })
                                detail_df = detail_df[["SN", "Fault Description", "Computer Name"]]

                                top_computers = detail_df["Computer Name"].value_counts().head(3).to_dict()
                                top_faults_by_computer = {}
                                for comp in top_computers:
                                    comp_faults = detail_df[detail_df["Computer Name"] == comp]
                                    faults = comp_faults["Fault Description"].value_counts().head(3).reset_index().values.tolist()
                                    top_faults_by_computer[comp] = faults

                                fail_details.append({
                                    "station": station,
                                    "metric": "NTF",
                                    "actual": ntf,
                                    "goal": Config.NTF_GOALS[station],
                                    "top_computers": top_computers,
                                    "top_faults_by_computer": top_faults_by_computer
                                })

                            if station in Config.DER_GOALS and der is not None and der > Config.DER_GOALS[station]:
                                failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                                detail_data = get_station_der_details(token, selected_project, station)
                                detail_df = pd.DataFrame(detail_data)
                                detail_df = detail_df.rename(columns={
                                    "sn": "SN",
                                    "responsibilityEnName": "Responsibility",
                                    "symptomEnName": "Symptoms"
                                })
                                detail_df = detail_df[["SN", "Responsibility", "Symptoms"]]
                                top_symptoms = get_top_n_counts(detail_df, "Symptoms", 3)
                                top_responsibilities = get_top_n_counts(detail_df, "Responsibility", 3)

                                fail_details.append({
                                    "station": station,
                                    "metric": "DER",
                                    "actual": der,
                                    "goal": Config.DER_GOALS[station],
                                    "top_symptoms": top_symptoms.to_dict(orient="records"),
                                    "top_responsibilities": top_responsibilities.to_dict(orient="records")
                                })
                except Exception as e:
                    print("RTY analysis error:", e)

        return render_template("dashboard/project_specific.html",
                               projects=projects,
                               selected_project=selected_project,
                               rty_goal=rty_goal,
                               data=fpy_data,
                               failed_stations=failed_stations,
                               fail_details=fail_details,
                               current_time=current_time)
    except Exception as e:
        return render_template('errors/500.html', error=str(e), current_time=current_time)

def get_ntf_details_for_station(model_name, station, station_type, start_date, end_date):
    """Get NTF details for a specific station"""
    try:
        token = get_token()
        detail_data = get_station_ntf_details_by_model(token, model_name, station, station_type, start_date, end_date)
        if not detail_data:
            return {
                "top_computers": {},
                "top_faults_by_computer": {}
            }
            
        detail_df = pd.DataFrame(detail_data).rename(columns={
            "substation": "Computer Name",
            "sn": "SN",
            "symptomEnName": "Fault Description"
        })
        detail_df = detail_df[["SN", "Fault Description", "Computer Name"]]
        
        if not detail_df.empty:
            top_computers = detail_df["Computer Name"].value_counts().head(3).to_dict()
            top_faults_by_computer = {}
            
            for comp in top_computers:
                comp_faults = detail_df[detail_df["Computer Name"] == comp]
                faults = comp_faults["Fault Description"].value_counts().head(3).reset_index().values.tolist()
                top_faults_by_computer[comp] = faults
                
            return {
                "top_computers": top_computers,
                "top_faults_by_computer": top_faults_by_computer
            }
        else:
            return {
                "top_computers": {},
                "top_faults_by_computer": {}
            }
    except Exception as e:
        print(f"Error getting NTF details for {station}: {e}")
        return {
            "top_computers": {},
            "top_faults_by_computer": {}
        }

def get_der_details_for_station(model_name, station, station_type, start_date, end_date):
    """Get DER details for a specific station"""
    try:
        token = get_token()
        detail_df = pd.DataFrame(get_station_der_details_by_model(token, model_name, station, station_type, start_date, end_date)).rename(columns={
            "sn": "SN",
            "responsibilityEnName": "Responsibility",
            "symptomEnName": "Symptoms"
        })
        detail_df = detail_df[["SN", "Responsibility", "Symptoms"]]
        
        # Get top symptoms and responsibilities
        if not detail_df.empty:
            top_symptoms = get_top_n_counts(detail_df, "Symptoms", 3)
            top_responsibilities = get_top_n_counts(detail_df, "Responsibility", 3)
            
            return {
                "top_symptoms": top_symptoms.to_dict(orient="records"),
                "top_responsibilities": top_responsibilities.to_dict(orient="records")
            }
        else:
            return {
                "top_symptoms": [],
                "top_responsibilities": []
            }
    except Exception as e:
        print(f"Error getting DER details for {station}: {e}")
        return {
            "top_symptoms": [],
            "top_responsibilities": []
        }

@dashboard_bp.route('/model-specific', methods=['GET', 'POST'])
@login_required
def model_specific():
    current_time = datetime.now().strftime('%H:%M')
    try:
        token = get_token()
        selected_model = None
        station_type = "BE"
        start_date = None
        end_date = None
        rty_goal = 90.0
        fpy_data = []
        failed_stations = []

        if request.method == 'POST':
            selected_model = request.form.get('model_name')
            station_type = request.form.get('station_type', 'BE')
            start_date = request.form.get('start_date')
            end_date = request.form.get('end_date')
            rty_goal = float(request.form.get('rty_goal', 90.0))

            print(f"Fetching data for model: {selected_model}, station type: {station_type}, start: {start_date}, end: {end_date}")
            
            fpy_data_raw = get_fpy_by_model(token, selected_model, station_type, start_date, end_date)
            print(f"Raw data received: {len(fpy_data_raw) if fpy_data_raw else 0} records")

            desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty"]
            fpy_data = [
                {col: row.get(col, "") for col in desired_columns}
                for row in fpy_data_raw
            ]
            
            print(f"Processed data: {len(fpy_data)} records")
            if fpy_data:
                print(f"First record: {fpy_data[0]}")

            if fpy_data and "rty" in fpy_data[0]:
                try:
                    actual_rty = float(str(fpy_data[0]["rty"]).replace("%", ""))
                    print(f"Actual RTY: {actual_rty}%, Goal: {rty_goal}%")
                    
                    if actual_rty < rty_goal:
                        for row in fpy_data:
                            station = row.get("station")
                            ntf = float(str(row.get("ntf", "0")).replace("%", "")) if row.get("ntf") else None
                            der = float(str(row.get("der", "0")).replace("%", "")) if row.get("der") else None

                            if station in Config.NTF_GOALS and ntf is not None and ntf > Config.NTF_GOALS[station]:
                                failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))

                            if station in Config.DER_GOALS and der is not None and der > Config.DER_GOALS[station]:
                                failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                except Exception as e:
                    print("RTY analysis error:", e)

        return render_template("dashboard/model_specific.html",
                               selected_model=selected_model,
                               station_type=station_type,
                               start_date=start_date,
                               end_date=end_date,
                               rty_goal=rty_goal,
                               data=fpy_data,
                               failed_stations=failed_stations,
                               current_time=current_time,
                               get_ntf_details_for_station=get_ntf_details_for_station,
                               get_der_details_for_station=get_der_details_for_station)
    except Exception as e:
        print(f"Error in model_specific: {e}")
        return render_template('errors/500.html', error=str(e), current_time=current_time)

@dashboard_bp.route('/export-excel')
@login_required
def export_excel():
    project = request.args.get('project')
    rty_goal = float(request.args.get('rty_goal', 90.0))

    token = get_token()
    fpy_data_raw = get_fpy(token, [project])

    if not fpy_data_raw:
        return "No data to export."

    # Clean FPY table
    desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty"]
    fpy_data = [{col: row.get(col, "") for col in desired_columns} for row in fpy_data_raw]
    fpy_df = pd.DataFrame(fpy_data).astype(str)

    failed_stations = []
    ntf_rows = []
    der_rows = []

    try:
        actual_rty = float(str(fpy_df["rty"].iloc[0]).replace("%", ""))
        if actual_rty < rty_goal:
            for _, row in fpy_df.iterrows():
                station = row["station"]
                ntf = float(str(row["ntf"]).replace("%", "")) if row["ntf"] else None
                der = float(str(row["der"]).replace("%", "")) if row["der"] else None

                if station in Config.NTF_GOALS and ntf > Config.NTF_GOALS[station]:
                    failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))
                    detail_df = pd.DataFrame(get_station_ntf_details(token, project, station)).rename(columns={
                        "substation": "Computer Name",
                        "sn": "SN",
                        "symptomEnName": "Fault Description"
                    })[["SN", "Fault Description", "Computer Name"]]

                    top_computers = detail_df["Computer Name"].value_counts().head(3).to_dict()
                    for comp, count in top_computers.items():
                        faults = detail_df[detail_df["Computer Name"] == comp]["Fault Description"].value_counts().head(3)
                        fault_lines = [f"{i+1}. {fault} → {qty}" for i, (fault, qty) in enumerate(faults.items())]
                        ntf_rows.append([f"{comp} → {count}", "\n".join(fault_lines)])

                if station in Config.DER_GOALS and der > Config.DER_GOALS[station]:
                    failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                    detail_df = pd.DataFrame(get_station_der_details(token, project, station)).rename(columns={
                        "sn": "SN",
                        "responsibilityEnName": "Responsibility",
                        "symptomEnName": "Symptoms"
                    })[["SN", "Responsibility", "Symptoms"]]

                    top_symptoms = detail_df["Symptoms"].value_counts().head(3)
                    top_responsibilities = detail_df["Responsibility"].value_counts().head(3)

                    for i in range(3):
                        symptom = top_symptoms.index[i] if i < len(top_symptoms) else ""
                        symptom_qty = top_symptoms.iloc[i] if i < len(top_symptoms) else ""
                        resp = top_responsibilities.index[i] if i < len(top_responsibilities) else ""
                        resp_qty = top_responsibilities.iloc[i] if i < len(top_responsibilities) else ""
                        der_rows.append([f"{symptom} → {symptom_qty}", f"{resp} → {resp_qty}"])
    except Exception as e:
        print("RTY analysis error:", e)

    # Create Excel workbook
    wb = Workbook()
    ws = wb.active
    ws.title = "FPY Report"

    bold = Font(bold=True)
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)
    header_fill = PatternFill(start_color="4361ee", end_color="4361ee", fill_type="solid")
    header_font = Font(bold=True, color="FFFFFF")

    def write_section(title, df_or_rows, headers=None):
        # Safely merge title row
        pre_row = ws.max_row if ws.max_row else 0
        ws.append([title])
        title_row = pre_row + 1
        ws.merge_cells(start_row=title_row, start_column=1, end_row=title_row, end_column=10)
        ws.cell(row=title_row, column=1).font = bold

        if isinstance(df_or_rows, pd.DataFrame):
            ws.append(list(df_or_rows.columns))
            for cell in ws[ws.max_row]:
                cell.font = header_font
                cell.alignment = center
                cell.fill = header_fill
            for row in df_or_rows.itertuples(index=False):
                ws.append(list(row))
        else:
            if headers:
                ws.append(headers)
                for cell in ws[ws.max_row]:
                    cell.font = header_font
                    cell.alignment = center
                    cell.fill = header_fill
            for row in df_or_rows:
                ws.append(row)

        ws.append([])  # Spacer row

    # Write FPY Table
    write_section("FPY Table", fpy_df)

    # Write Failed Stations
    if failed_stations:
        fail_df = pd.DataFrame(failed_stations, columns=["Station", "Metric", "Actual (%)", "Goal (%)"])
        write_section("Failed Stations", fail_df)

    # Write NTF Breakdown
    if ntf_rows:
        write_section("Top Failure Analysis — NTF", ntf_rows, ["Top Computer → Qty", "Top 3 Faults → Qty"])

    # Write DER Breakdown
    if der_rows:
        write_section("Top Failure Analysis — DER", der_rows, ["Symptom → Qty", "Responsibility → Qty"])

    # Adjust column width for 'project' column
    ws.column_dimensions['A'].width = 25  # Wider than others

    output = io.BytesIO()
    wb.save(output)
    output.seek(0)

    return send_file(output,
                     download_name=f"{project}_full_report.xlsx",
                     as_attachment=True,
                     mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
 
@dashboard_bp.route('/export-pdf')
@login_required
def export_pdf():
    project = request.args.get('project')
    rty_goal = float(request.args.get('rty_goal', 90.0))
 
    token = get_token()
    fpy_data_raw = get_fpy(token, [project])
 
    if not fpy_data_raw:
        return "No data to export."
 
    # Clean FPY table
    desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty"]
    fpy_data = [{col: row.get(col, "") for col in desired_columns} for row in fpy_data_raw]
    fpy_df = pd.DataFrame(fpy_data).astype(str)
 
    failed_stations = []
    ntf_blocks = []
    der_blocks = []
 
    try:
        actual_rty = float(str(fpy_df["rty"].iloc[0]).replace("%", ""))
        if actual_rty < rty_goal:
            for _, row in fpy_df.iterrows():
                station = row.get("station")
                ntf = float(str(row.get("ntf", "0")).replace("%", "")) if row.get("ntf") else None
                der = float(str(row.get("der", "0")).replace("%", "")) if row.get("der") else None
 
                if station in Config.NTF_GOALS and ntf is not None and ntf > Config.NTF_GOALS[station]:
                    failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))
                    detail_data = get_station_ntf_details(token, project, station)
                    detail_df = pd.DataFrame(detail_data).rename(columns={
                        "substation": "Computer Name",
                        "sn": "SN",
                        "symptomEnName": "Fault Description"
                    })
                    detail_df = detail_df[["SN", "Fault Description", "Computer Name"]]
 
                    top_computers = detail_df["Computer Name"].value_counts().head(3).to_dict()
                    rows = ""
                    for comp, count in top_computers.items():
                        comp_faults = detail_df[detail_df["Computer Name"] == comp]
                        faults = comp_faults["Fault Description"].value_counts().head(3)
                        fault_lines = "".join([f"{i+1}. {fault} → {qty}<br>" for i, (fault, qty) in enumerate(faults.items())])
                        rows += f"<tr><td>{comp} → {count}</td><td>{fault_lines}</td></tr>"
                    ntf_blocks.append(f"""
                        <h3>{station} — NTF Analysis</h3>
                        <table>
                            <thead><tr><th>Top Computer → Qty</th><th>Top 3 Faults → Qty</th></tr></thead>
                            <tbody>{rows}</tbody>
                        </table>
                    """)
 
                if station in Config.DER_GOALS and der is not None and der > Config.DER_GOALS[station]:
                    failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                    detail_df = pd.DataFrame(get_station_der_details(token, project, station)).rename(columns={
                        "sn": "SN",
                        "responsibilityEnName": "Responsibility",
                        "symptomEnName": "Symptoms"
                    })
                    detail_df = detail_df[["SN", "Responsibility", "Symptoms"]]
 
                    top_symptoms = detail_df["Symptoms"].value_counts().head(3)
                    top_responsibilities = detail_df["Responsibility"].value_counts().head(3)
 
                    rows = ""
                    for i in range(3):
                        symptom = top_symptoms.index[i] if i < len(top_symptoms) else ""
                        symptom_qty = top_symptoms.iloc[i] if i < len(top_symptoms) else ""
                        resp = top_responsibilities.index[i] if i < len(top_responsibilities) else ""
                        resp_qty = top_responsibilities.iloc[i] if i < len(top_responsibilities) else ""
                        rows += f"<tr><td>{symptom} → {symptom_qty}</td><td>{resp} → {resp_qty}</td></tr>"
                    der_blocks.append(f"""
                        <h3>{station} — DER Analysis</h3>
                        <table>
                            <thead><tr><th>Symptom → Qty</th><th>Responsibility → Qty</th></tr></thead>
                            <tbody>{rows}</tbody>
                        </table>
                    """)
    except Exception as e:
        print("RTY analysis error:", e)
 
    # Build FPY table manually with wider project column
    fpy_html = "<table border='1' cellspacing='0' cellpadding='4' style='width:100%;'>"
    fpy_html += "<thead><tr>"
    for col in fpy_df.columns:
        if col == "project":
            fpy_html += f"<th style='font-size:10px; white-space:normal; word-wrap:break-word; width:120px;'>{col}</th>"
        else:
            fpy_html += f"<th style='font-size:10px; white-space:normal; word-wrap:break-word;'>{col}</th>"
    fpy_html += "</tr></thead><tbody>"
 
    for _, row in fpy_df.iterrows():
        fpy_html += "<tr>"
        for col in fpy_df.columns:
            if col == "project":
                fpy_html += f"<td style='font-size:10px; white-space:normal; word-wrap:break-word; width:120px;'>{row[col]}</td>"
            else:
                fpy_html += f"<td style='font-size:10px; white-space:normal; word-wrap:break-word;'>{row[col]}</td>"
        fpy_html += "</tr>"
    fpy_html += "</tbody></table>"
 
    # Build full HTML
    html = f"""
    <html><head><style>
    body {{ font-family: Arial; font-size: 11px; }}
    table {{ border-collapse: collapse; width: 100%; margin-bottom: 20px; }}
    th, td {{ border: 1px solid #ccc; padding: 4px; text-align: left; vertical-align: top; }}
    th {{ background-color: #4361ee; color: white; }}
    h1 {{ margin-bottom: 10px; color: #4361ee; }}
    h2 {{ margin-top: 30px; color: #4361ee; }}
    h3 {{ margin-top: 20px; color: #4361ee; }}
    </style></head><body>
    <h1>FPY Report for {project}</h1>
    <p><strong>RTY Goal:</strong> {rty_goal}%</p>
 
    <h2>FPY Table</h2>
    {fpy_html}
    """
 
    if failed_stations:
        fail_df = pd.DataFrame(failed_stations, columns=["Station", "Metric", "Actual (%)", "Goal (%)"])
        html += "<h2>Failed Stations</h2>" + fail_df.to_html(index=False)
 
    if ntf_blocks or der_blocks:
        html += "<h2>Top Failure Analysis</h2>"
        html += "".join(ntf_blocks)
        html += "".join(der_blocks)
 
    html += "</body></html>"
 
    # Convert to PDF using ReportLab
    from reportlab.lib.pagesizes import letter, landscape
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet
    from reportlab.lib import colors
    from reportlab.lib.units import inch
 
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=landscape(letter))
    elements = []
    
    styles = getSampleStyleSheet()
    title_style = styles['Title']
    heading_style = styles['Heading1']
    normal_style = styles['Normal']
    
    # Title
    elements.append(Paragraph(f"FPY Report for {project}", title_style))
    elements.append(Spacer(1, 12))
    elements.append(Paragraph(f"RTY Goal: {rty_goal}%", normal_style))
    elements.append(Spacer(1, 12))
    
    # FPY Table
    elements.append(Paragraph("FPY Table", heading_style))
    elements.append(Spacer(1, 12))
    
    # Convert DataFrame to list of lists for ReportLab
    fpy_data_list = [list(fpy_df.columns)] + fpy_df.values.tolist()
    fpy_table = Table(fpy_data_list)
    fpy_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    elements.append(fpy_table)
    elements.append(Spacer(1, 12))
    
    # Failed Stations
    if failed_stations:
        elements.append(Paragraph("Failed Stations", heading_style))
        elements.append(Spacer(1, 12))
        
        failed_data = [["Station", "Metric", "Actual (%)", "Goal (%)"]] + failed_stations
        failed_table = Table(failed_data)
        failed_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        elements.append(failed_table)
        elements.append(Spacer(1, 12))
    
    # NTF Breakdown
    if ntf_blocks:
        elements.append(Paragraph("Top Failure Analysis — NTF", heading_style))
        elements.append(Spacer(1, 12))
        
        for rows in ntf_blocks:
            ntf_table = Table([["Top Computer → Qty", "Top 3 Faults → Qty"]] + rows)
            ntf_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            elements.append(ntf_table)
            elements.append(Spacer(1, 12))
    
    # DER Breakdown
    if der_blocks:
        elements.append(Paragraph("Top Failure Analysis — DER", heading_style))
        elements.append(Spacer(1, 12))
        
        for rows in der_blocks:
            der_table = Table([["Symptom → Qty", "Responsibility → Qty"]] + rows)
            der_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            elements.append(der_table)
            elements.append(Spacer(1, 12))
    
    # Build PDF
    doc.build(elements)
    
    buffer.seek(0)
    return send_file(buffer,
                     download_name=f"{project}_full_report.pdf",
                     as_attachment=True,
                     mimetype='application/pdf')