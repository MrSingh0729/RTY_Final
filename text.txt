static/style.css:


body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f4f6f8;
    margin: 0;
    padding: 0;
}

header {
    background-color: #003366;
    color: white;
    padding: 20px;
}

header h1 {
    margin: 0;
    font-size: 24px;
}

nav {
    margin-top: 10px;
}

nav a {
    color: #ffffff;
    text-decoration: none;
    margin-right: 15px;
    font-weight: bold;
}

nav a:hover {
    text-decoration: underline;
}

.container {
    max-width: 1200px;
    margin: auto;
    padding: 30px;
}

h2 {
    color: #003366;
    margin-bottom: 10px;
}

.timestamp {
    font-size: 14px;
    color: #555;
    margin-bottom: 20px;
}

.alert {
    padding: 15px;
    border-radius: 5px;
    margin-top: 20px;
}

.alert.warning {
    background-color: #fff3cd;
    color: #856404;
    border: 1px solid #ffeeba;
}

@media screen and (max-width: 768px) {
    .container {
        padding: 15px;
    }

    nav a {
        display: block;
        margin-bottom: 8px;
    }
}


/* Topbar layout */
.topbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #003366;
    color: white;
    padding: 15px 30px;
    flex-wrap: wrap;
}

.logo h1 {
    margin: 0;
    font-size: 22px;
}

.nav-links {
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
}

.nav-links a {
    color: #ffffff;
    text-decoration: none;
    font-weight: bold;
}

.nav-links a:hover {
    text-decoration: underline;
}

/* Optional: make nav collapse on small screens */
@media screen and (max-width: 768px) {
    .topbar {
        flex-direction: column;
        align-items: flex-start;
    }

    .nav-links {
        margin-top: 10px;
        flex-direction: column;
        gap: 8px;
    }
}


.form-section {
    margin-bottom: 30px;
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    align-items: center;
}

.form-section label {
    font-weight: bold;
    color: #003366;
}

.form-section select,
.form-section input {
    padding: 8px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.form-section button {
    padding: 8px 16px;
    background-color: #003366;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.form-section button:hover {
    background-color: #0055aa;
}


.export-bar {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 10px;
}

.dropdown {
    position: relative;
    display: inline-block;
}

.dropbtn {
    background-color: #0078d4;
    color: white;
    padding: 8px 16px;
    font-size: 14px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.dropdown-content {
    display: none;
    position: absolute;
    right: 0;
    background-color: #f9f9f9;
    min-width: 160px;
    box-shadow: 0px 4px 8px rgba(0,0,0,0.1);
    z-index: 1;
    border-radius: 4px;
    overflow: hidden;
}

.dropdown-content a {
    color: black;
    padding: 10px 16px;
    text-decoration: none;
    display: block;
    font-size: 14px;
}

.dropdown-content a:hover {
    background-color: #f1f1f1;
}

.dropdown:hover .dropdown-content {
    display: block;
}

.dropdown:hover .dropbtn {
    background-color: #005a9e;
}



templates/auto_data.html:

{% extends "base.html" %}
{% block content %}
<div class="container">
    <h2>‚ö° Auto FPY Report</h2>
    <p class="timestamp">Live data from today 08:00 ‚Üí <strong>{{ current_time }}</strong></p>

    {% if data %}
    <table id="fpyTable" class="display nowrap" style="width:100%">
        <thead>
            <tr>
                {% for col in data[0].keys() %}
                <th>{{ col }}</th>
                {% endfor %}
            </tr>
        </thead>
        <tbody>
            {% for row in data %}
            <tr>
                {% for val in row.values() %}
                <td>{{ val }}</td>
                {% endfor %}
            </tr>
            {% endfor %}
        </tbody>
    </table>
    {% else %}
    <div class="alert warning">
        <strong>‚ö† No current data available.</strong>
    </div>
    {% endif %}
</div>

<!-- DataTables CSS -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css">

<!-- jQuery + DataTables JS -->
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>

<!-- DataTables Buttons -->
<script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.print.min.js"></script>

<!-- Excel Export -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>

<!-- PDF Export -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>

<script>
$(document).ready(function() {
    $('#fpyTable').DataTable({
        scrollX: true,
        responsive: true,
        pageLength: 20,
        lengthMenu: [ [20, 50, 100, 200], [20, 50, 100, 200] ],
        dom: 'Blfrtip',
        buttons: [
            'copy',
            {
                extend: 'csv',
                title: 'FPY_Report'
            },
            {
                extend: 'excel',
                title: 'FPY_Report'
            },
            {
                extend: 'pdf',
                title: 'FPY_Report',
                orientation: 'landscape',
                pageSize: 'A4'
            },
            'print'
        ]
    });
});
</script>
{% endblock %}



templates/base.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FPY Dashboard</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <header class="topbar">
        <div class="logo">
            <h1>üè≠ Factory FPY Dashboard</h1>
        </div>
        <nav class="nav-links">
            <a href="{{ url_for('index') }}">üè† Home</a>
            <a href="{{ url_for('auto_data') }}">‚ö° Auto Data</a>
            <a href="{{ url_for('project_specific') }}">üéØ Project Specific</a>
            <a href="{{ url_for('model_specific') }}">üõ† Model Specific</a> <!-- ‚úÖ New Link -->
        </nav>
    </header>
    <hr>
    <main>
        {% block content %}{% endblock %}
    </main>
</body>
</html>



templates/index.html:


{% extends "base.html" %}
{% block content %}
<h2>Welcome to the FPY Dashboard</h2>
<p>Select a mode from the navigation bar above to begin.</p>
{% endblock %}



templates/model_specific.html:

{% extends "base.html" %}
{% block content %}
<div class="container">
    <h2>üõ†Ô∏è Model-Specific FPY Report</h2>

    <div class="form-bar">
        <form method="POST" class="form-section">
            <label for="model_name">Model Name:</label>
            <input type="text" name="model_name" id="model_name" value="{{ selected_model }}" required>

            <label for="station_type">Station Type:</label>
            <select name="station_type" id="station_type">
                <option value="BE" {% if station_type == "BE" %}selected{% endif %}>BE</option>
                <option value="FT" {% if station_type == "FT" %}selected{% endif %}>FT</option>
                <option value="ICT" {% if station_type == "ICT" %}selected{% endif %}>ICT</option>
            </select>

            <label for="start_date" title="You can type or pick from calendar">Start Date & Time:</label>
            <input type="datetime-local" name="start_date" id="start_date" value="{{ start_date }}" required placeholder="YYYY-MM-DD HH:MM">

            <label for="end_date" title="You can type or pick from calendar">End Date & Time:</label>
            <input type="datetime-local" name="end_date" id="end_date" value="{{ end_date }}" required placeholder="YYYY-MM-DD HH:MM">

            <label for="rty_goal">RTY Goal (%):</label>
            <input type="number" step="0.1" name="rty_goal" id="rty_goal" value="{{ rty_goal }}" required>

            <button type="submit">üîç View Report</button>
        </form>

        {% if selected_model %}
        <div class="dropdown">
            <button class="dropbtn">üì§ Export Model</button>
            <div class="dropdown-content">
                <a href="/export-excel-model?model_name={{ selected_model }}&station_type={{ station_type }}&start_date={{ start_date }}&end_date={{ end_date }}&rty_goal={{ rty_goal }}">Export as Excel</a>
                <a href="/export-pdf-model?model_name={{ selected_model }}&station_type={{ station_type }}&start_date={{ start_date }}&end_date={{ end_date }}&rty_goal={{ rty_goal }}">Export as PDF</a>
            </div>
        </div>
        {% endif %}
    </div>

    {% if selected_model and data %}
        {% set actual_rty = data[0]["rty"] %}
        {% if actual_rty %}
            {% set actual_rty_val = actual_rty.replace('%', '') | float %}
            {% if actual_rty_val < rty_goal %}
                <div class="alert warning">
                    ‚ö† RTY Not Meeting Goal ‚Äî Actual: {{ actual_rty_val }}%, Goal: {{ rty_goal }}%
                </div>
            {% else %}
                <div class="alert success">
                    ‚úÖ RTY Goal Met ‚Äî Actual: {{ actual_rty_val }}%, Goal: {{ rty_goal }}%
                </div>
            {% endif %}
        {% endif %}
    {% endif %}

    {% if data %}
    <table id="modelTable" class="display nowrap" style="width:100%">
        <thead>
            <tr>
                {% for col in data[0].keys() %}
                <th>{{ col }}</th>
                {% endfor %}
            </tr>
        </thead>
        <tbody>
            {% for row in data %}
            <tr>
                {% for val in row.values() %}
                <td>{{ val }}</td>
                {% endfor %}
            </tr>
            {% endfor %}
        </tbody>
    </table>
    {% endif %}

    {% if failed_stations %}
    <h3>üö® Stations Not Meeting NTF/DER Goals</h3>
    <table id="goalTable" class="display nowrap" style="width:100%">
        <thead>
            <tr>
                <th>Station</th>
                <th>Metric</th>
                <th>Actual (%)</th>
                <th>Goal (%)</th>
            </tr>
        </thead>
        <tbody>
            {% for s in failed_stations %}
            <tr>
                <td>{{ s[0] }}</td>
                <td>{{ s[1] }}</td>
                <td>{{ s[2] }}</td>
                <td>{{ s[3] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    {% endif %}

    {% if fail_details %}
    <h3>üìä Top Failure Analysis</h3>
    {% for detail in fail_details %}
    <div class="expander">
        <details>
            <summary><strong>{{ detail.station }} ‚Äî {{ detail.metric }} Analysis</strong></summary>
            <p><strong>Actual:</strong> {{ detail.actual }}% | <strong>Goal:</strong> {{ detail.goal }}%</p>

            {% if detail.metric == "NTF" %}
                <h4>üñ•Ô∏è Top 3 Computers & Faults</h4>
                <table class="display nowrap failureTable" style="width:100%">
                    <thead>
                        <tr>
                            <th>Computer Name</th>
                            <th>Qty</th>
                            <th>Top Faults</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for comp, count in detail.top_computers.items() %}
                        <tr>
                            <td>{{ comp }}</td>
                            <td>{{ count }}</td>
                            <td>
                                {% if detail.top_faults_by_computer[comp] %}
                                    <ul>
                                    {% for fault in detail.top_faults_by_computer[comp] %}
                                        <li>{{ fault[0] }} ‚Üí {{ fault[1] }}</li>
                                    {% endfor %}
                                    </ul>
                                {% else %}
                                    No fault data available.
                                {% endif %}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% else %}
                <h4>üß™ Top 3 Symptoms & Responsibilities</h4>
                <table class="display nowrap failureTable" style="width:100%">
                    <thead>
                        <tr>
                            <th>Symptom</th>
                            <th>Qty</th>
                            <th>Responsibility</th>
                            <th>Qty</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for i in range(3) %}
                        <tr>
                            <td>
                                {% if i < detail.top_symptoms|length %}
                                    {{ detail.top_symptoms[i].Symptoms }}
                                {% endif %}
                            </td>
                            <td>
                                {% if i < detail.top_symptoms|length %}
                                    {{ detail.top_symptoms[i].Count }}
                                {% endif %}
                            </td>
                            <td>
                                {% if i < detail.top_responsibilities|length %}
                                    {{ detail.top_responsibilities[i].Responsibility }}
                                {% endif %}
                            </td>
                            <td>
                                {% if i < detail.top_responsibilities|length %}
                                    {{ detail.top_responsibilities[i].Count }}
                                {% endif %}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% endif %}
        </details>
    </div>
    {% endfor %}
    {% endif %}
</div>

<!-- DataTables -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>

<script>
$(document).ready(function() {
    $('#modelTable').DataTable({
        scrollX: true,
        responsive: true,
        paging: false,
        searching: false,
        ordering: true
    });

    $('#goalTable').DataTable({
        scrollX: true,
        responsive: true,
        paging: false,
        searching: false,
        ordering: true
    });

    $('.failureTable').DataTable({
        scrollX: true,
        responsive: true,
        paging: false,
        searching: false,
        ordering: true
    });
});
</script>

<style>
input[type="datetime-local"] {
    min-width: 220px;
    padding: 6px 10px;
    font-size: 14px;
}
</style>
{% endblock %}



templates/project_specific.html:

{% extends "base.html" %}
{% block content %}
<div class="container">
    <h2>üéØ Project-Specific FPY Report</h2>

    <div class="form-bar">
        <form method="POST" class="form-section">
            <label for="project">Select Project:</label>
            <select name="project" id="project" required>
                {% for p in projects %}
                <option value="{{ p }}" {% if p == selected_project %}selected{% endif %}>{{ p }}</option>
                {% endfor %}
            </select>

            <label for="rty_goal">RTY Goal (%):</label>
            <input type="number" step="0.1" name="rty_goal" id="rty_goal" value="{{ rty_goal }}" required>

            <button type="submit">üîç View Report</button>
        </form>

        <div class="dropdown">
            <button class="dropbtn">üì§ Export Project</button>
            <div class="dropdown-content">
                <a href="/export-excel?project={{ selected_project }}&rty_goal={{ rty_goal }}">Export as Excel</a>
<a href="/export-pdf?project={{ selected_project }}&rty_goal={{ rty_goal }}">Export as PDF</a>
            </div>
        </div>
    </div>

    {% if selected_project and data %}
        {% set actual_rty = data[0]["rty"] %}
        {% if actual_rty %}
            {% set actual_rty_val = actual_rty.replace('%', '') | float %}
            {% if actual_rty_val < rty_goal %}
                <div class="alert warning">
                    ‚ö† RTY Not Meeting Goal ‚Äî Actual: {{ actual_rty_val }}%, Goal: {{ rty_goal }}%
                </div>
            {% else %}
                <div class="alert success">
                    ‚úÖ RTY Goal Met ‚Äî Actual: {{ actual_rty_val }}%, Goal: {{ rty_goal }}%
                </div>
            {% endif %}
        {% endif %}
    {% endif %}

    {% if data %}
    <table id="projectTable" class="display nowrap" style="width:100%">
        <thead>
            <tr>
                {% for col in data[0].keys() %}
                <th>{{ col }}</th>
                {% endfor %}
            </tr>
        </thead>
        <tbody>
            {% for row in data %}
            <tr>
                {% for val in row.values() %}
                <td>{{ val }}</td>
                {% endfor %}
            </tr>
            {% endfor %}
        </tbody>
    </table>
    {% endif %}

    {% if failed_stations %}
    <h3>üö® Stations Not Meeting NTF/DER Goals</h3>
    <table id="goalTable" class="display nowrap" style="width:100%">
        <thead>
            <tr>
                <th>Station</th>
                <th>Metric</th>
                <th>Actual (%)</th>
                <th>Goal (%)</th>
            </tr>
        </thead>
        <tbody>
            {% for s in failed_stations %}
            <tr>
                <td>{{ s[0] }}</td>
                <td>{{ s[1] }}</td>
                <td>{{ s[2] }}</td>
                <td>{{ s[3] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    {% endif %}

    {% if fail_details %}
    <h3>üìä Top Failure Analysis</h3>
    {% for detail in fail_details %}
    <div class="expander">
        <details>
            <summary><strong>{{ detail.station }} ‚Äî {{ detail.metric }} Analysis</strong></summary>
            <p><strong>Actual:</strong> {{ detail.actual }}% | <strong>Goal:</strong> {{ detail.goal }}%</p>

            {% if detail.metric == "NTF" %}
                <h4>üñ•Ô∏è Top 3 Computers & Faults</h4>
                <table class="excel-table">
                    <thead>
                        <tr>
                            <th>Top Computer ‚Üí Qty</th>
                            <th>Top 3 Faults ‚Üí Qty</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for comp, count in detail.top_computers.items() %}
                        <tr>
                            <td>{{ comp }} ‚Üí {{ count }}</td>
                            <td>
                                {% if detail.top_faults_by_computer[comp] %}
                                    {% for fault in detail.top_faults_by_computer[comp] %}
                                        {{ loop.index }}. {{ fault[0] }} ‚Üí {{ fault[1] }}<br>
                                    {% endfor %}
                                {% else %}
                                    No fault data available.
                                {% endif %}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% else %}
                <h4>üß™ Top 3 Symptoms & Responsibilities</h4>
                <table class="excel-table">
                    <thead>
                        <tr>
                            <th>Symptom ‚Üí Qty</th>
                            <th>Responsibility ‚Üí Qty</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for i in range(3) %}
                        <tr>
                            <td>
                                {% if i < detail.top_symptoms|length %}
                                    {{ detail.top_symptoms[i].Symptoms }} ‚Üí {{ detail.top_symptoms[i].Count }}
                                {% endif %}
                            </td>
                            <td>
                                {% if i < detail.top_responsibilities|length %}
                                    {{ detail.top_responsibilities[i].Responsibility }} ‚Üí {{ detail.top_responsibilities[i].Count }}
                                {% endif %}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% endif %}
        </details>
    </div>
    {% endfor %}
    {% endif %}
</div>

<!-- DataTables -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>

<script>
$(document).ready(function() {
    $('#projectTable').DataTable({
        scrollX: true,
        responsive: true,
        paging: false,
        searching: false,
        ordering: true
    });

    $('#goalTable').DataTable({
        scrollX: true,
        responsive: true,
        paging: false,
        searching: false,
        ordering: true
    });
});
</script>

<style>
.form-bar {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    gap: 20px;
    margin-bottom: 15px;
}

.form-section {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    align-items: center;
}

.form-section label {
    font-weight: bold;
}

.dropdown {
    position: relative;
    display: inline-block;
}

.dropbtn {
    background-color: #0078d4;
    color: white;
    padding: 8px 16px;
    font-size: 14px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.dropdown-content {
    display: none;
    position: absolute;
    right: 0;
    background-color: #f9f9f9;
    min-width: 160px;
    box-shadow: 0px 4px 8px rgba(0,0,0,0.1);
    z-index: 1;
    border-radius: 4px;
    overflow: hidden;
}

.dropdown-content a {
    color: black;
    padding: 10px 16px;
    text-decoration: none;
    display: block;
    font-size: 14px;
}

.dropdown-content a:hover {
    background-color: #f1f1f1;
}

.dropdown:hover .dropdown-content {
    display: block;
}

.dropdown:hover .dropbtn {
    background-color: #005a9e;
}

.expander details {
    margin: 20px 0;
    padding: 15px;
    border: 1px solid #ccc;
    border-radius: 6px;
    background-color: #f9f9f9;
}

.expander summary {
    font-weight: bold;
    cursor: pointer;
    font-size: 16px;
}

.excel-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 14px;
    margin-top: 10px;
}

.excel-table th, .excel-table td {
    border: 1px solid #ccc;
    padding: 8px 12px;
    text-align: left;
    vertical-align: top;
}

.excel-table th {
    background-color: #e0e0e0;
    font-weight: bold;
}

.excel-table tr:nth-child(even) {
    background-color: #f9f9f9;
}

.excel-table tr:hover {
    background-color: #f1f1f1;
}

.alert.success {
    background-color: #e6ffed;
    border-left: 4px solid #2ecc71;
    padding: 10px;
    margin: 15px 0;
}

.alert.warning {
    background-color: #fff3cd;
    border-left: 4px solid #f39c12;
    padding: 10px;
    margin: 15px 0;
}
</style>
{% endblock %}


utils/api.py:


import requests
from datetime import datetime, timedelta
from config import Config

def get_token():
    payload = {"userCode": Config.USER_CODE, "password": Config.PASSWORD, "langCode": Config.LANG_CODE}
    headers = {"Content-Type": "application/json", "Accept": "application/json"}
    resp = requests.post(Config.LOGIN_URL, json=payload, headers=headers)
    resp.raise_for_status()
    data = resp.json()
    return data["data"]

def get_project_list(token):
    today = datetime.now().strftime("%Y-%m-%d")
    headers = {"token": token, "lang-code": Config.LANG_CODE}
    params = {"stationType": "BE", "startDate": today, "endDate": today}
    resp = requests.get(Config.PROJECT_LIST_URL, headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()["data"]

def get_fpy(token, projects):
    now = datetime.now()
    start = now.replace(hour=8, minute=0, second=0, microsecond=0)
    payload = {
        "startDate": start.strftime("%Y-%m-%d %H:%M:%S"),
        "endDate": now.strftime("%Y-%m-%d %H:%M:%S"),
        "projects": projects,
        "station": ["PCURR", "AUD", "ANTWBG", "RQC", "RQC2", "MMI", "MMI2_All"],
        "stationType": "BE",
        "current": 1,
        "size": 100
    }
    headers = {"Content-Type": "application/json", "token": token, "lang-code": Config.LANG_CODE}
    resp = requests.post(Config.FPY_URL, json=payload, headers=headers)
    resp.raise_for_status()
    return resp.json()["data"]["records"]

def get_station_ntf_details(token, project, station):
    now = datetime.now()
    start = now.replace(hour=8, minute=0, second=0, microsecond=0)
    params = {
        "startDate": start.strftime("%Y-%m-%d %H:%M:%S"),
        "endDate": now.strftime("%Y-%m-%d %H:%M:%S"),
        "project": project,
        "stationName": station,
        "stationType": "BE",
        "workOrder": "",
        "lineName": "",
        "current": 1,
        "size": 1000
    }
    headers = {"token": token, "lang-code": Config.LANG_CODE}
    resp = requests.get(Config.NTF_DETAIL_URL, headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()["data"]["records"]

def get_station_der_details(token, project, station):
    end_time = datetime.now()
    start_time = end_time - timedelta(days=1)
    params = {
        "startDate": start_time.strftime("%Y-%m-%d %H:%M:%S"),
        "endDate": end_time.strftime("%Y-%m-%d %H:%M:%S"),
        "project": project,
        "stationName": station,
        "stationType": "BE",
        "workOrder": "",
        "lineName": "",
        "current": 1,
        "size": 1000
    }
    headers = {"token": token, "lang-code": Config.LANG_CODE, "Accept": "application/json"}
    resp = requests.get(Config.DER_DETAIL_URL, params=params, headers=headers)
    resp.raise_for_status()
    return resp.json()["data"]["records"]



def get_fpy_by_model(token, model_name, station_type, start_date, end_date):
    payload = {
        "startDate": start_date,
        "endDate": end_date,
        "projects": [model_name],
        "station": ["PCURR", "AUD", "ANTWBG", "RQC", "RQC2", "MMI", "MMI2_All"],
        "stationType": station_type,
        "current": 1,
        "size": 100
    }
    headers = {"Content-Type": "application/json", "token": token, "lang-code": Config.LANG_CODE}
    resp = requests.post(Config.FPY_URL, json=payload, headers=headers)
    resp.raise_for_status()
    return resp.json()["data"]["records"]

def get_station_ntf_details_by_model(token, model_name, station, station_type, start_date, end_date):
    params = {
        "startDate": start_date,
        "endDate": end_date,
        "project": model_name,
        "stationName": station,
        "stationType": station_type,
        "workOrder": "",
        "lineName": "",
        "current": 1,
        "size": 1000
    }
    headers = {"token": token, "lang-code": Config.LANG_CODE}
    resp = requests.get(Config.NTF_DETAIL_URL, headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()["data"]["records"]

def get_station_der_details_by_model(token, model_name, station, station_type, start_date, end_date):
    params = {
        "startDate": start_date,
        "endDate": end_date,
        "project": model_name,
        "stationName": station,
        "stationType": station_type,
        "workOrder": "",
        "lineName": "",
        "current": 1,
        "size": 1000
    }
    headers = {"token": token, "lang-code": Config.LANG_CODE, "Accept": "application/json"}
    resp = requests.get(Config.DER_DETAIL_URL, params=params, headers=headers)
    resp.raise_for_status()
    return resp.json()["data"]["records"]


# utils/api.py

def get_fpy(token, projects, start_date=None, end_date=None):
    if start_date is None or end_date is None:
        # Default behavior (current day from 8AM to now)
        now = datetime.now()
        start = now.replace(hour=8, minute=0, second=0, microsecond=0)
        end = now
    else:
        # Use provided date range
        start = start_date
        end = end_date
        
    payload = {
        "startDate": start.strftime("%Y-%m-%d %H:%M:%S"),
        "endDate": end.strftime("%Y-%m-%d %H:%M:%S"),
        "projects": projects,
        "station": ["PCURR", "AUD", "ANTWBG", "RQC", "RQC2", "MMI", "MMI2_All"],
        "stationType": "BE",
        "current": 1,
        "size": 100
    }
    headers = {"Content-Type": "application/json", "token": token, "lang-code": Config.LANG_CODE}
    resp = requests.post(Config.FPY_URL, json=payload, headers=headers)
    resp.raise_for_status()
    return resp.json()["data"]["records"]



utils/helpers.py:

import pandas as pd

def get_top_n_counts(df, col, n=3):
    if col not in df.columns or df.empty:
        return pd.DataFrame(columns=[col, "Count"])
    counts = df[col].value_counts().head(n).reset_index()
    counts.columns = [col, "Count"]
    return counts


app.py:


from flask import send_file, request
import pandas as pd
import io
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment
from flask import Flask, render_template, request
from xhtml2pdf import pisa
from flask import Response, render_template_string
from datetime import datetime
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment
import io
from utils.api import (
    get_token,
    get_project_list,
    get_project_list,
    get_fpy,
    get_station_ntf_details,
    get_station_der_details
)
from utils.helpers import get_top_n_counts
from config import Config
from datetime import datetime
import pandas as pd

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/auto-data')
def auto_data():
    token = get_token()
    projects = get_project_list(token)
    fpy_data = get_fpy(token, projects)

    desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty"]
    filtered_data = [
        {col: row.get(col, "") for col in desired_columns}
        for row in fpy_data
    ]

    current_time = datetime.now().strftime("%H:%M")
    return render_template('auto_data.html', data=filtered_data, current_time=current_time)

@app.route('/project-specific', methods=['GET', 'POST'])
def project_specific():
    token = get_token()
    projects = get_project_list(token)
    selected_project = None
    rty_goal = 90.0
    fpy_data = []
    failed_stations = []
    fail_details = []

    if request.method == 'POST':
        selected_project = request.form.get('project')
        rty_goal = float(request.form.get('rty_goal', 90.0))
        fpy_data_raw = get_fpy(token, [selected_project])

        desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty"]
        fpy_data = [
            {col: row.get(col, "") for col in desired_columns}
            for row in fpy_data_raw
        ]

        if fpy_data and "rty" in fpy_data[0]:
            try:
                actual_rty = float(str(fpy_data[0]["rty"]).replace("%", ""))
                if actual_rty < rty_goal:
                    for row in fpy_data:
                        station = row.get("station")
                        ntf = float(str(row.get("ntf", "0")).replace("%", "")) if row.get("ntf") else None
                        der = float(str(row.get("der", "0")).replace("%", "")) if row.get("der") else None

                        if station in Config.NTF_GOALS and ntf is not None and ntf > Config.NTF_GOALS[station]:
                            failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))
                            detail_data = get_station_ntf_details(token, selected_project, station)
                            detail_df = pd.DataFrame(detail_data)
                            detail_df = detail_df.rename(columns={
                                "substation": "Computer Name",
                                "sn": "SN",
                                "symptomEnName": "Fault Description"
                            })
                            detail_df = detail_df[["SN", "Fault Description", "Computer Name"]]

                            top_computers = detail_df["Computer Name"].value_counts().head(3).to_dict()
                            top_faults_by_computer = {}
                            for comp in top_computers:
                                comp_faults = detail_df[detail_df["Computer Name"] == comp]
                                faults = comp_faults["Fault Description"].value_counts().head(3).reset_index().values.tolist()
                                top_faults_by_computer[comp] = faults

                            fail_details.append({
                                "station": station,
                                "metric": "NTF",
                                "actual": ntf,
                                "goal": Config.NTF_GOALS[station],
                                "top_computers": top_computers,
                                "top_faults_by_computer": top_faults_by_computer
                            })

                        if station in Config.DER_GOALS and der is not None and der > Config.DER_GOALS[station]:
                            failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                            detail_data = get_station_der_details(token, selected_project, station)
                            detail_df = pd.DataFrame(detail_data)
                            detail_df = detail_df.rename(columns={
                                "sn": "SN",
                                "responsibilityEnName": "Responsibility",
                                "symptomEnName": "Symptoms"
                            })
                            detail_df = detail_df[["SN", "Responsibility", "Symptoms"]]
                            top_symptoms = get_top_n_counts(detail_df, "Symptoms", 3)
                            top_responsibilities = get_top_n_counts(detail_df, "Responsibility", 3)

                            fail_details.append({
                                "station": station,
                                "metric": "DER",
                                "actual": der,
                                "goal": Config.DER_GOALS[station],
                                "top_symptoms": top_symptoms.to_dict(orient="records"),
                                "top_responsibilities": top_responsibilities.to_dict(orient="records")
                            })
            except Exception as e:
                print("RTY analysis error:", e)

    return render_template("project_specific.html",
                           projects=projects,
                           selected_project=selected_project,
                           rty_goal=rty_goal,
                           data=fpy_data,
                           failed_stations=failed_stations,
                           fail_details=fail_details)



@app.route('/export-excel')
def export_excel():
    project = request.args.get('project')
    rty_goal = float(request.args.get('rty_goal', 90.0))

    token = get_token()
    fpy_data_raw = get_fpy(token, [project])

    if not fpy_data_raw:
        return "No data to export."

    # Clean FPY table
    desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty"]
    fpy_data = [{col: row.get(col, "") for col in desired_columns} for row in fpy_data_raw]
    fpy_df = pd.DataFrame(fpy_data).astype(str)

    failed_stations = []
    ntf_rows = []
    der_rows = []

    try:
        actual_rty = float(str(fpy_df["rty"].iloc[0]).replace("%", ""))
        if actual_rty < rty_goal:
            for _, row in fpy_df.iterrows():
                station = row["station"]
                ntf = float(str(row["ntf"]).replace("%", "")) if row["ntf"] else None
                der = float(str(row["der"]).replace("%", "")) if row["der"] else None

                if station in Config.NTF_GOALS and ntf > Config.NTF_GOALS[station]:
                    failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))
                    detail_df = pd.DataFrame(get_station_ntf_details(token, project, station)).rename(columns={
                        "substation": "Computer Name",
                        "sn": "SN",
                        "symptomEnName": "Fault Description"
                    })[["SN", "Fault Description", "Computer Name"]]

                    top_computers = detail_df["Computer Name"].value_counts().head(3).to_dict()
                    for comp, count in top_computers.items():
                        faults = detail_df[detail_df["Computer Name"] == comp]["Fault Description"].value_counts().head(3)
                        fault_lines = [f"{i+1}. {fault} ‚Üí {qty}" for i, (fault, qty) in enumerate(faults.items())]
                        ntf_rows.append([f"{comp} ‚Üí {count}", "\n".join(fault_lines)])

                if station in Config.DER_GOALS and der > Config.DER_GOALS[station]:
                    failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                    detail_df = pd.DataFrame(get_station_der_details(token, project, station)).rename(columns={
                        "sn": "SN",
                        "responsibilityEnName": "Responsibility",
                        "symptomEnName": "Symptoms"
                    })[["SN", "Responsibility", "Symptoms"]]

                    top_symptoms = detail_df["Symptoms"].value_counts().head(3)
                    top_responsibilities = detail_df["Responsibility"].value_counts().head(3)

                    for i in range(3):
                        symptom = top_symptoms.index[i] if i < len(top_symptoms) else ""
                        symptom_qty = top_symptoms.iloc[i] if i < len(top_symptoms) else ""
                        resp = top_responsibilities.index[i] if i < len(top_responsibilities) else ""
                        resp_qty = top_responsibilities.iloc[i] if i < len(top_responsibilities) else ""
                        der_rows.append([f"{symptom} ‚Üí {symptom_qty}", f"{resp} ‚Üí {resp_qty}"])
    except Exception as e:
        print("RTY analysis error:", e)

    # Create Excel workbook
    wb = Workbook()
    ws = wb.active
    ws.title = "FPY Report"

    bold = Font(bold=True)
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)

    def write_section(title, df_or_rows, headers=None):
        # Safely merge title row
        pre_row = ws.max_row if ws.max_row else 0
        ws.append([title])
        title_row = pre_row + 1
        ws.merge_cells(start_row=title_row, start_column=1, end_row=title_row, end_column=10)
        ws.cell(row=title_row, column=1).font = bold

        if isinstance(df_or_rows, pd.DataFrame):
            ws.append(list(df_or_rows.columns))
            for cell in ws[ws.max_row]:
                cell.font = bold
                cell.alignment = center
            for row in df_or_rows.itertuples(index=False):
                ws.append(list(row))
        else:
            if headers:
                ws.append(headers)
                for cell in ws[ws.max_row]:
                    cell.font = bold
                    cell.alignment = center
            for row in df_or_rows:
                ws.append(row)

        ws.append([])  # Spacer row

    # Write FPY Table
    write_section("FPY Table", fpy_df)

    # Write Failed Stations
    if failed_stations:
        fail_df = pd.DataFrame(failed_stations, columns=["Station", "Metric", "Actual (%)", "Goal (%)"])
        write_section("Failed Stations", fail_df)

    # Write NTF Breakdown
    if ntf_rows:
        write_section("Top Failure Analysis ‚Äî NTF", ntf_rows, ["Top Computer ‚Üí Qty", "Top 3 Faults ‚Üí Qty"])

    # Write DER Breakdown
    if der_rows:
        write_section("Top Failure Analysis ‚Äî DER", der_rows, ["Symptom ‚Üí Qty", "Responsibility ‚Üí Qty"])

    # Adjust column width for 'project' column
    ws.column_dimensions['A'].width = 25  # Wider than others

    output = io.BytesIO()
    wb.save(output)
    output.seek(0)

    return send_file(output,
                     download_name=f"{project}_full_report.xlsx",
                     as_attachment=True,
                     mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')



@app.route('/export-pdf')
def export_pdf():
    project = request.args.get('project')
    rty_goal = float(request.args.get('rty_goal', 90.0))

    token = get_token()
    fpy_data_raw = get_fpy(token, [project])

    if not fpy_data_raw:
        return "No data to export."

    # Clean FPY table
    desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty"]
    fpy_data = [{col: row.get(col, "") for col in desired_columns} for row in fpy_data_raw]
    fpy_df = pd.DataFrame(fpy_data).astype(str)

    failed_stations = []
    ntf_blocks = []
    der_blocks = []

    try:
        actual_rty = float(str(fpy_df["rty"].iloc[0]).replace("%", ""))
        if actual_rty < rty_goal:
            for _, row in fpy_df.iterrows():
                station = row.get("station")
                ntf = float(str(row.get("ntf", "0")).replace("%", "")) if row.get("ntf") else None
                der = float(str(row.get("der", "0")).replace("%", "")) if row.get("der") else None

                if station in Config.NTF_GOALS and ntf is not None and ntf > Config.NTF_GOALS[station]:
                    failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))
                    detail_data = get_station_ntf_details(token, project, station)
                    detail_df = pd.DataFrame(detail_data).rename(columns={
                        "substation": "Computer Name",
                        "sn": "SN",
                        "symptomEnName": "Fault Description"
                    })
                    detail_df = detail_df[["SN", "Fault Description", "Computer Name"]]

                    top_computers = detail_df["Computer Name"].value_counts().head(3).to_dict()
                    rows = ""
                    for comp, count in top_computers.items():
                        comp_faults = detail_df[detail_df["Computer Name"] == comp]
                        faults = comp_faults["Fault Description"].value_counts().head(3)
                        fault_lines = "".join([f"{i+1}. {fault} ‚Üí {qty}<br>" for i, (fault, qty) in enumerate(faults.items())])
                        rows += f"<tr><td>{comp} ‚Üí {count}</td><td>{fault_lines}</td></tr>"
                    ntf_blocks.append(f"""
                        <h3>{station} ‚Äî NTF Analysis</h3>
                        <table>
                            <thead><tr><th>Top Computer ‚Üí Qty</th><th>Top 3 Faults ‚Üí Qty</th></tr></thead>
                            <tbody>{rows}</tbody>
                        </table>
                    """)

                if station in Config.DER_GOALS and der is not None and der > Config.DER_GOALS[station]:
                    failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                    detail_df = pd.DataFrame(get_station_der_details(token, project, station)).rename(columns={
                        "sn": "SN",
                        "responsibilityEnName": "Responsibility",
                        "symptomEnName": "Symptoms"
                    })
                    detail_df = detail_df[["SN", "Responsibility", "Symptoms"]]

                    top_symptoms = detail_df["Symptoms"].value_counts().head(3)
                    top_responsibilities = detail_df["Responsibility"].value_counts().head(3)

                    rows = ""
                    for i in range(3):
                        symptom = top_symptoms.index[i] if i < len(top_symptoms) else ""
                        symptom_qty = top_symptoms.iloc[i] if i < len(top_symptoms) else ""
                        resp = top_responsibilities.index[i] if i < len(top_responsibilities) else ""
                        resp_qty = top_responsibilities.iloc[i] if i < len(top_responsibilities) else ""
                        rows += f"<tr><td>{symptom} ‚Üí {symptom_qty}</td><td>{resp} ‚Üí {resp_qty}</td></tr>"
                    der_blocks.append(f"""
                        <h3>{station} ‚Äî DER Analysis</h3>
                        <table>
                            <thead><tr><th>Symptom ‚Üí Qty</th><th>Responsibility ‚Üí Qty</th></tr></thead>
                            <tbody>{rows}</tbody>
                        </table>
                    """)
    except Exception as e:
        print("RTY analysis error:", e)

    # Build FPY table manually with wider project column
    fpy_html = "<table border='1' cellspacing='0' cellpadding='4' style='width:100%;'>"
    fpy_html += "<thead><tr>"
    for col in fpy_df.columns:
        if col == "project":
            fpy_html += f"<th style='font-size:10px; white-space:normal; word-wrap:break-word; width:120px;'>{col}</th>"
        else:
            fpy_html += f"<th style='font-size:10px; white-space:normal; word-wrap:break-word;'>{col}</th>"
    fpy_html += "</tr></thead><tbody>"

    for _, row in fpy_df.iterrows():
        fpy_html += "<tr>"
        for col in fpy_df.columns:
            if col == "project":
                fpy_html += f"<td style='font-size:10px; white-space:normal; word-wrap:break-word; width:120px;'>{row[col]}</td>"
            else:
                fpy_html += f"<td style='font-size:10px; white-space:normal; word-wrap:break-word;'>{row[col]}</td>"
        fpy_html += "</tr>"
    fpy_html += "</tbody></table>"

    # Build full HTML
    html = f"""
    <html><head><style>
    body {{ font-family: Arial; font-size: 11px; }}
    table {{ border-collapse: collapse; width: 100%; margin-bottom: 20px; }}
    th, td {{ border: 1px solid #ccc; padding: 4px; text-align: left; vertical-align: top; }}
    th {{ background-color: #f0f0f0; }}
    h1 {{ margin-bottom: 10px; }}
    h2 {{ margin-top: 30px; }}
    h3 {{ margin-top: 20px; }}
    </style></head><body>
    <h1>FPY Report for {project}</h1>
    <p><strong>RTY Goal:</strong> {rty_goal}%</p>

    <h2>FPY Table</h2>
    {fpy_html}
    """

    if failed_stations:
        fail_df = pd.DataFrame(failed_stations, columns=["Station", "Metric", "Actual (%)", "Goal (%)"])
        html += "<h2>Failed Stations</h2>" + fail_df.to_html(index=False)

    if ntf_blocks or der_blocks:
        html += "<h2>Top Failure Analysis</h2>"
        html += "".join(ntf_blocks)
        html += "".join(der_blocks)

    html += "</body></html>"

    # Convert to PDF
    pdf = io.BytesIO()
    pisa.CreatePDF(io.StringIO(html), dest=pdf)
    pdf.seek(0)
    return send_file(pdf,
                     download_name=f"{project}_full_report.pdf",
                     as_attachment=True,
                     mimetype='application/pdf')


from utils.api import (
    get_token,
    get_fpy_by_model,
    get_station_ntf_details_by_model,
    get_station_der_details_by_model
)

@app.route('/model-specific', methods=['GET', 'POST'])
def model_specific():
    token = get_token()
    selected_model = None
    station_type = "BE"
    start_date = None
    end_date = None
    rty_goal = 90.0
    fpy_data = []
    failed_stations = []
    fail_details = []

    if request.method == 'POST':
        selected_model = request.form.get('model_name')
        station_type = request.form.get('station_type', 'BE')
        start_date = request.form.get('start_date')
        end_date = request.form.get('end_date')
        rty_goal = float(request.form.get('rty_goal', 90.0))

        fpy_data_raw = get_fpy_by_model(token, selected_model, station_type, start_date, end_date)

        desired_columns = ["project", "station", "inPut", "pass", "fail", "notFail", "der", "ntf", "rty"]
        fpy_data = [
            {col: row.get(col, "") for col in desired_columns}
            for row in fpy_data_raw
        ]

        if fpy_data and "rty" in fpy_data[0]:
            try:
                actual_rty = float(str(fpy_data[0]["rty"]).replace("%", ""))
                if actual_rty < rty_goal:
                    for row in fpy_data:
                        station = row.get("station")
                        ntf = float(str(row.get("ntf", "0")).replace("%", "")) if row.get("ntf") else None
                        der = float(str(row.get("der", "0")).replace("%", "")) if row.get("der") else None

                        if station in Config.NTF_GOALS and ntf is not None and ntf > Config.NTF_GOALS[station]:
                            failed_stations.append((station, "NTF", ntf, Config.NTF_GOALS[station]))
                            detail_data = get_station_ntf_details_by_model(token, selected_model, station, station_type, start_date, end_date)
                            detail_df = pd.DataFrame(detail_data)
                            detail_df = detail_df.rename(columns={
                                "substation": "Computer Name",
                                "sn": "SN",
                                "symptomEnName": "Fault Description"
                            })
                            detail_df = detail_df[["SN", "Fault Description", "Computer Name"]]

                            top_computers = detail_df["Computer Name"].value_counts().head(3).to_dict()
                            top_faults_by_computer = {}
                            for comp in top_computers:
                                comp_faults = detail_df[detail_df["Computer Name"] == comp]
                                faults = comp_faults["Fault Description"].value_counts().head(3).reset_index().values.tolist()
                                top_faults_by_computer[comp] = faults

                            fail_details.append({
                                "station": station,
                                "metric": "NTF",
                                "actual": ntf,
                                "goal": Config.NTF_GOALS[station],
                                "top_computers": top_computers,
                                "top_faults_by_computer": top_faults_by_computer
                            })

                        if station in Config.DER_GOALS and der is not None and der > Config.DER_GOALS[station]:
                            failed_stations.append((station, "DER", der, Config.DER_GOALS[station]))
                            detail_data = get_station_der_details_by_model(token, selected_model, station, station_type, start_date, end_date)
                            detail_df = pd.DataFrame(detail_data)
                            detail_df = detail_df.rename(columns={
                                "sn": "SN",
                                "responsibilityEnName": "Responsibility",
                                "symptomEnName": "Symptoms"
                            })
                            detail_df = detail_df[["SN", "Responsibility", "Symptoms"]]
                            top_symptoms = get_top_n_counts(detail_df, "Symptoms", 3)
                            top_responsibilities = get_top_n_counts(detail_df, "Responsibility", 3)

                            fail_details.append({
                                "station": station,
                                "metric": "DER",
                                "actual": der,
                                "goal": Config.DER_GOALS[station],
                                "top_symptoms": top_symptoms.to_dict(orient="records"),
                                "top_responsibilities": top_responsibilities.to_dict(orient="records")
                            })
            except Exception as e:
                print("RTY analysis error:", e)

    return render_template("model_specific.html",
                           selected_model=selected_model,
                           station_type=station_type,
                           start_date=start_date,
                           end_date=end_date,
                           rty_goal=rty_goal,
                           data=fpy_data,
                           failed_stations=failed_stations,
                           fail_details=fail_details)




if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000)


config.py:


class Config:
    BASE_URL = "http://10.61.248.12:8099/mesFactoryReport"
    LOGIN_URL = f"{BASE_URL}/validUserInfoByMES"
    PROJECT_LIST_URL = f"{BASE_URL}/linePlanQty/queryDayPlanProject"
    FPY_URL = f"{BASE_URL}/fpyReport/projectFpyReport"
    NTF_DETAIL_URL = f"{BASE_URL}/fpyReport/queryNoFailDetail"
    DER_DETAIL_URL = f"{BASE_URL}/fpyReport/queryFailDetail"

    USER_CODE = "rti02"
    PASSWORD = "888888"
    LANG_CODE = "en"

    NTF_GOALS = {"PCURR": 0.50, "AUD": 1.50, "ANTWBG": 2.00}
    DER_GOALS = {"RQC": 1.20, "RQC2": 0.10, "MMI1": 0.35, "MMI2": 0.50, "ANTWBG": 0.70, "AUD": 0.70}
